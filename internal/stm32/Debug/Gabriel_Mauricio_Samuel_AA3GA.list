
Gabriel_Mauricio_Samuel_AA3GA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f58  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006ec  080080f8  080080f8  000180f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087e4  080087e4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080087e4  080087e4  000187e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087ec  080087ec  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087ec  080087ec  000187ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087f0  080087f0  000187f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080087f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  200001dc  080089d0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  080089d0  00020450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e40d  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eb2  00000000  00000000  0002e619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  000304d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb0  00000000  00000000  00031120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170f7  00000000  00000000  00031cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f413  00000000  00000000  00048dc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b899  00000000  00000000  000581da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3a73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004538  00000000  00000000  000e3ac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080080e0 	.word	0x080080e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	080080e0 	.word	0x080080e0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_ldivmod>:
 8000bb8:	b97b      	cbnz	r3, 8000bda <__aeabi_ldivmod+0x22>
 8000bba:	b972      	cbnz	r2, 8000bda <__aeabi_ldivmod+0x22>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bfbe      	ittt	lt
 8000bc0:	2000      	movlt	r0, #0
 8000bc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bc6:	e006      	blt.n	8000bd6 <__aeabi_ldivmod+0x1e>
 8000bc8:	bf08      	it	eq
 8000bca:	2800      	cmpeq	r0, #0
 8000bcc:	bf1c      	itt	ne
 8000bce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000bd2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bd6:	f000 b9bf 	b.w	8000f58 <__aeabi_idiv0>
 8000bda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be2:	2900      	cmp	r1, #0
 8000be4:	db09      	blt.n	8000bfa <__aeabi_ldivmod+0x42>
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	db1a      	blt.n	8000c20 <__aeabi_ldivmod+0x68>
 8000bea:	f000 f84d 	bl	8000c88 <__udivmoddi4>
 8000bee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf6:	b004      	add	sp, #16
 8000bf8:	4770      	bx	lr
 8000bfa:	4240      	negs	r0, r0
 8000bfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	db1b      	blt.n	8000c3c <__aeabi_ldivmod+0x84>
 8000c04:	f000 f840 	bl	8000c88 <__udivmoddi4>
 8000c08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c10:	b004      	add	sp, #16
 8000c12:	4240      	negs	r0, r0
 8000c14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c18:	4252      	negs	r2, r2
 8000c1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c1e:	4770      	bx	lr
 8000c20:	4252      	negs	r2, r2
 8000c22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c26:	f000 f82f 	bl	8000c88 <__udivmoddi4>
 8000c2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c32:	b004      	add	sp, #16
 8000c34:	4240      	negs	r0, r0
 8000c36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3a:	4770      	bx	lr
 8000c3c:	4252      	negs	r2, r2
 8000c3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c42:	f000 f821 	bl	8000c88 <__udivmoddi4>
 8000c46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4e:	b004      	add	sp, #16
 8000c50:	4252      	negs	r2, r2
 8000c52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2203      	movs	r2, #3
 8000f68:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2203      	movs	r2, #3
 8000f74:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2203      	movs	r2, #3
 8000f7a:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2203      	movs	r2, #3
 8000f80:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2203      	movs	r2, #3
 8000f86:	715a      	strb	r2, [r3, #5]
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	; 0x28
 8000f98:	af04      	add	r7, sp, #16
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	607a      	str	r2, [r7, #4]
 8000fa0:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000fae:	7afb      	ldrb	r3, [r7, #11]
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	8af9      	ldrh	r1, [r7, #22]
 8000fb4:	f241 3388 	movw	r3, #5000	; 0x1388
 8000fb8:	9302      	str	r3, [sp, #8]
 8000fba:	2302      	movs	r3, #2
 8000fbc:	9301      	str	r3, [sp, #4]
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	f002 f90b 	bl	80031e0 <HAL_I2C_Mem_Read>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d10b      	bne.n	8000fe8 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8000fd0:	7d7b      	ldrb	r3, [r7, #21]
 8000fd2:	021b      	lsls	r3, r3, #8
 8000fd4:	b21a      	sxth	r2, r3
 8000fd6:	7d3b      	ldrb	r3, [r7, #20]
 8000fd8:	b21b      	sxth	r3, r3
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	b21b      	sxth	r3, r3
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	801a      	strh	r2, [r3, #0]
		return true;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e000      	b.n	8000fea <read_register16+0x56>
	} else
		return false;
 8000fe8:	2300      	movs	r3, #0

}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3718      	adds	r7, #24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8000ff2:	b590      	push	{r4, r7, lr}
 8000ff4:	b08b      	sub	sp, #44	; 0x2c
 8000ff6:	af04      	add	r7, sp, #16
 8000ff8:	60f8      	str	r0, [r7, #12]
 8000ffa:	607a      	str	r2, [r7, #4]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	460b      	mov	r3, r1
 8001000:	72fb      	strb	r3, [r7, #11]
 8001002:	4613      	mov	r3, r2
 8001004:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001012:	7afb      	ldrb	r3, [r7, #11]
 8001014:	b29a      	uxth	r2, r3
 8001016:	7abb      	ldrb	r3, [r7, #10]
 8001018:	b29b      	uxth	r3, r3
 800101a:	8af9      	ldrh	r1, [r7, #22]
 800101c:	f241 3488 	movw	r4, #5000	; 0x1388
 8001020:	9402      	str	r4, [sp, #8]
 8001022:	9301      	str	r3, [sp, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	2301      	movs	r3, #1
 800102a:	f002 f8d9 	bl	80031e0 <HAL_I2C_Mem_Read>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d101      	bne.n	8001038 <read_data+0x46>
		return 0;
 8001034:	2300      	movs	r3, #0
 8001036:	e000      	b.n	800103a <read_data+0x48>
	else
		return 1;
 8001038:	2301      	movs	r3, #1

}
 800103a:	4618      	mov	r0, r3
 800103c:	371c      	adds	r7, #28
 800103e:	46bd      	mov	sp, r7
 8001040:	bd90      	pop	{r4, r7, pc}

08001042 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	461a      	mov	r2, r3
 800104e:	2188      	movs	r1, #136	; 0x88
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff ff9f 	bl	8000f94 <read_register16>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d06f      	beq.n	800113c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3302      	adds	r3, #2
 8001060:	461a      	mov	r2, r3
 8001062:	218a      	movs	r1, #138	; 0x8a
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff ff95 	bl	8000f94 <read_register16>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d065      	beq.n	800113c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3304      	adds	r3, #4
 8001074:	461a      	mov	r2, r3
 8001076:	218c      	movs	r1, #140	; 0x8c
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff ff8b 	bl	8000f94 <read_register16>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d05b      	beq.n	800113c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3306      	adds	r3, #6
 8001088:	461a      	mov	r2, r3
 800108a:	218e      	movs	r1, #142	; 0x8e
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ff81 	bl	8000f94 <read_register16>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d051      	beq.n	800113c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3308      	adds	r3, #8
 800109c:	461a      	mov	r2, r3
 800109e:	2190      	movs	r1, #144	; 0x90
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ff77 	bl	8000f94 <read_register16>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d047      	beq.n	800113c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	330a      	adds	r3, #10
 80010b0:	461a      	mov	r2, r3
 80010b2:	2192      	movs	r1, #146	; 0x92
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ff6d 	bl	8000f94 <read_register16>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d03d      	beq.n	800113c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	330c      	adds	r3, #12
 80010c4:	461a      	mov	r2, r3
 80010c6:	2194      	movs	r1, #148	; 0x94
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ff63 	bl	8000f94 <read_register16>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d033      	beq.n	800113c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	330e      	adds	r3, #14
 80010d8:	461a      	mov	r2, r3
 80010da:	2196      	movs	r1, #150	; 0x96
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff ff59 	bl	8000f94 <read_register16>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d029      	beq.n	800113c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3310      	adds	r3, #16
 80010ec:	461a      	mov	r2, r3
 80010ee:	2198      	movs	r1, #152	; 0x98
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ff4f 	bl	8000f94 <read_register16>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d01f      	beq.n	800113c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3312      	adds	r3, #18
 8001100:	461a      	mov	r2, r3
 8001102:	219a      	movs	r1, #154	; 0x9a
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff ff45 	bl	8000f94 <read_register16>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d015      	beq.n	800113c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3314      	adds	r3, #20
 8001114:	461a      	mov	r2, r3
 8001116:	219c      	movs	r1, #156	; 0x9c
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff ff3b 	bl	8000f94 <read_register16>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d00b      	beq.n	800113c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8001128:	461a      	mov	r2, r3
 800112a:	219e      	movs	r1, #158	; 0x9e
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff ff31 	bl	8000f94 <read_register16>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <read_calibration_data+0xfa>

		return true;
 8001138:	2301      	movs	r3, #1
 800113a:	e000      	b.n	800113e <read_calibration_data+0xfc>
	}

	return false;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8001146:	b580      	push	{r7, lr}
 8001148:	b084      	sub	sp, #16
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f103 0218 	add.w	r2, r3, #24
 8001154:	2301      	movs	r3, #1
 8001156:	21a1      	movs	r1, #161	; 0xa1
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff ff4a 	bl	8000ff2 <read_data>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d14b      	bne.n	80011fc <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	331a      	adds	r3, #26
 8001168:	461a      	mov	r2, r3
 800116a:	21e1      	movs	r1, #225	; 0xe1
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff ff11 	bl	8000f94 <read_register16>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d041      	beq.n	80011fc <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f103 021c 	add.w	r2, r3, #28
 800117e:	2301      	movs	r3, #1
 8001180:	21e3      	movs	r1, #227	; 0xe3
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff ff35 	bl	8000ff2 <read_data>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d136      	bne.n	80011fc <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 800118e:	f107 030e 	add.w	r3, r7, #14
 8001192:	461a      	mov	r2, r3
 8001194:	21e4      	movs	r1, #228	; 0xe4
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff fefc 	bl	8000f94 <read_register16>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d02c      	beq.n	80011fc <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 80011a2:	f107 030c 	add.w	r3, r7, #12
 80011a6:	461a      	mov	r2, r3
 80011a8:	21e5      	movs	r1, #229	; 0xe5
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff fef2 	bl	8000f94 <read_register16>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d022      	beq.n	80011fc <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f103 0222 	add.w	r2, r3, #34	; 0x22
 80011bc:	2301      	movs	r3, #1
 80011be:	21e7      	movs	r1, #231	; 0xe7
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff ff16 	bl	8000ff2 <read_data>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d117      	bne.n	80011fc <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80011cc:	89fb      	ldrh	r3, [r7, #14]
 80011ce:	011b      	lsls	r3, r3, #4
 80011d0:	b21b      	sxth	r3, r3
 80011d2:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 80011d6:	b21a      	sxth	r2, r3
 80011d8:	89fb      	ldrh	r3, [r7, #14]
 80011da:	121b      	asrs	r3, r3, #8
 80011dc:	b21b      	sxth	r3, r3
 80011de:	f003 030f 	and.w	r3, r3, #15
 80011e2:	b21b      	sxth	r3, r3
 80011e4:	4313      	orrs	r3, r2
 80011e6:	b21a      	sxth	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 80011ec:	89bb      	ldrh	r3, [r7, #12]
 80011ee:	091b      	lsrs	r3, r3, #4
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	b21a      	sxth	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	841a      	strh	r2, [r3, #32]

		return true;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e000      	b.n	80011fe <read_hum_calibration_data+0xb8>
	}

	return false;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8001206:	b580      	push	{r7, lr}
 8001208:	b088      	sub	sp, #32
 800120a:	af04      	add	r7, sp, #16
 800120c:	6078      	str	r0, [r7, #4]
 800120e:	460b      	mov	r3, r1
 8001210:	70fb      	strb	r3, [r7, #3]
 8001212:	4613      	mov	r3, r2
 8001214:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001222:	78fb      	ldrb	r3, [r7, #3]
 8001224:	b29a      	uxth	r2, r3
 8001226:	89f9      	ldrh	r1, [r7, #14]
 8001228:	f242 7310 	movw	r3, #10000	; 0x2710
 800122c:	9302      	str	r3, [sp, #8]
 800122e:	2301      	movs	r3, #1
 8001230:	9301      	str	r3, [sp, #4]
 8001232:	1cbb      	adds	r3, r7, #2
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	2301      	movs	r3, #1
 8001238:	f001 fed8 	bl	8002fec <HAL_I2C_Mem_Write>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <write_register8+0x40>
		return false;
 8001242:	2300      	movs	r3, #0
 8001244:	e000      	b.n	8001248 <write_register8+0x42>
	else
		return true;
 8001246:	2301      	movs	r3, #1
}
 8001248:	4618      	mov	r0, r3
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800125e:	2b76      	cmp	r3, #118	; 0x76
 8001260:	d005      	beq.n	800126e <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001266:	2b77      	cmp	r3, #119	; 0x77
 8001268:	d001      	beq.n	800126e <bmp280_init+0x1e>

		return false;
 800126a:	2300      	movs	r3, #0
 800126c:	e099      	b.n	80013a2 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001274:	2301      	movs	r3, #1
 8001276:	21d0      	movs	r1, #208	; 0xd0
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff feba 	bl	8000ff2 <read_data>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <bmp280_init+0x38>
		return false;
 8001284:	2300      	movs	r3, #0
 8001286:	e08c      	b.n	80013a2 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800128e:	2b58      	cmp	r3, #88	; 0x58
 8001290:	d006      	beq.n	80012a0 <bmp280_init+0x50>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001298:	2b60      	cmp	r3, #96	; 0x60
 800129a:	d001      	beq.n	80012a0 <bmp280_init+0x50>

		return false;
 800129c:	2300      	movs	r3, #0
 800129e:	e080      	b.n	80013a2 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 80012a0:	22b6      	movs	r2, #182	; 0xb6
 80012a2:	21e0      	movs	r1, #224	; 0xe0
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f7ff ffae 	bl	8001206 <write_register8>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <bmp280_init+0x64>
		return false;
 80012b0:	2300      	movs	r3, #0
 80012b2:	e076      	b.n	80013a2 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 80012b4:	f107 020c 	add.w	r2, r7, #12
 80012b8:	2301      	movs	r3, #1
 80012ba:	21f3      	movs	r1, #243	; 0xf3
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff fe98 	bl	8000ff2 <read_data>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1f5      	bne.n	80012b4 <bmp280_init+0x64>
				&& (status & 1) == 0)
 80012c8:	7b3b      	ldrb	r3, [r7, #12]
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f0      	bne.n	80012b4 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff feb5 	bl	8001042 <read_calibration_data>
 80012d8:	4603      	mov	r3, r0
 80012da:	f083 0301 	eor.w	r3, r3, #1
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d100      	bne.n	80012e6 <bmp280_init+0x96>
 80012e4:	e001      	b.n	80012ea <bmp280_init+0x9a>
		return false;
 80012e6:	2300      	movs	r3, #0
 80012e8:	e05b      	b.n	80013a2 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80012f0:	2b60      	cmp	r3, #96	; 0x60
 80012f2:	d10a      	bne.n	800130a <bmp280_init+0xba>
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff ff26 	bl	8001146 <read_hum_calibration_data>
 80012fa:	4603      	mov	r3, r0
 80012fc:	f083 0301 	eor.w	r3, r3, #1
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <bmp280_init+0xba>
		return false;
 8001306:	2300      	movs	r3, #0
 8001308:	e04b      	b.n	80013a2 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	795b      	ldrb	r3, [r3, #5]
 800130e:	015b      	lsls	r3, r3, #5
 8001310:	b25a      	sxtb	r2, r3
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	785b      	ldrb	r3, [r3, #1]
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	b25b      	sxtb	r3, r3
 800131a:	4313      	orrs	r3, r2
 800131c:	b25b      	sxtb	r3, r3
 800131e:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8001320:	7bfb      	ldrb	r3, [r7, #15]
 8001322:	461a      	mov	r2, r3
 8001324:	21f5      	movs	r1, #245	; 0xf5
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff ff6d 	bl	8001206 <write_register8>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <bmp280_init+0xe6>
		return false;
 8001332:	2300      	movs	r3, #0
 8001334:	e035      	b.n	80013a2 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d102      	bne.n	8001344 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	2200      	movs	r2, #0
 8001342:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	78db      	ldrb	r3, [r3, #3]
 8001348:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 800134a:	b25a      	sxtb	r2, r3
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	789b      	ldrb	r3, [r3, #2]
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	b25b      	sxtb	r3, r3
 8001354:	4313      	orrs	r3, r2
 8001356:	b25a      	sxtb	r2, r3
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	b25b      	sxtb	r3, r3
 800135e:	4313      	orrs	r3, r2
 8001360:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001362:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800136a:	2b60      	cmp	r3, #96	; 0x60
 800136c:	d10d      	bne.n	800138a <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	791b      	ldrb	r3, [r3, #4]
 8001372:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001374:	7b7b      	ldrb	r3, [r7, #13]
 8001376:	461a      	mov	r2, r3
 8001378:	21f2      	movs	r1, #242	; 0xf2
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff ff43 	bl	8001206 <write_register8>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <bmp280_init+0x13a>
			return false;
 8001386:	2300      	movs	r3, #0
 8001388:	e00b      	b.n	80013a2 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 800138a:	7bbb      	ldrb	r3, [r7, #14]
 800138c:	461a      	mov	r2, r3
 800138e:	21f4      	movs	r1, #244	; 0xf4
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff ff38 	bl	8001206 <write_register8>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <bmp280_init+0x150>
		return false;
 800139c:	2300      	movs	r3, #0
 800139e:	e000      	b.n	80013a2 <bmp280_init+0x152>
	}

	return true;
 80013a0:	2301      	movs	r3, #1
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 80013aa:	b480      	push	{r7}
 80013ac:	b087      	sub	sp, #28
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	60f8      	str	r0, [r7, #12]
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	10da      	asrs	r2, r3, #3
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	881b      	ldrh	r3, [r3, #0]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80013c8:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80013cc:	12db      	asrs	r3, r3, #11
 80013ce:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	111b      	asrs	r3, r3, #4
 80013d4:	68fa      	ldr	r2, [r7, #12]
 80013d6:	8812      	ldrh	r2, [r2, #0]
 80013d8:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	1112      	asrs	r2, r2, #4
 80013de:	68f9      	ldr	r1, [r7, #12]
 80013e0:	8809      	ldrh	r1, [r1, #0]
 80013e2:	1a52      	subs	r2, r2, r1
 80013e4:	fb02 f303 	mul.w	r3, r2, r3
 80013e8:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80013f0:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80013f4:	139b      	asrs	r3, r3, #14
 80013f6:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 80013f8:	697a      	ldr	r2, [r7, #20]
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	441a      	add	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	4613      	mov	r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4413      	add	r3, r2
 800140c:	3380      	adds	r3, #128	; 0x80
 800140e:	121b      	asrs	r3, r3, #8
}
 8001410:	4618      	mov	r0, r3
 8001412:	371c      	adds	r7, #28
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 800141c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001420:	b0cc      	sub	sp, #304	; 0x130
 8001422:	af00      	add	r7, sp, #0
 8001424:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 8001428:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 800142c:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001430:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001434:	17da      	asrs	r2, r3, #31
 8001436:	461c      	mov	r4, r3
 8001438:	4615      	mov	r5, r2
 800143a:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 800143e:	f145 3bff 	adc.w	fp, r5, #4294967295	; 0xffffffff
 8001442:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001446:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800144a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800144e:	fb03 f102 	mul.w	r1, r3, r2
 8001452:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001456:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800145a:	fb02 f303 	mul.w	r3, r2, r3
 800145e:	18ca      	adds	r2, r1, r3
 8001460:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001464:	fba3 8903 	umull	r8, r9, r3, r3
 8001468:	eb02 0309 	add.w	r3, r2, r9
 800146c:	4699      	mov	r9, r3
 800146e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001472:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001476:	b21b      	sxth	r3, r3
 8001478:	17da      	asrs	r2, r3, #31
 800147a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800147e:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001482:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001486:	4603      	mov	r3, r0
 8001488:	fb03 f209 	mul.w	r2, r3, r9
 800148c:	460b      	mov	r3, r1
 800148e:	fb08 f303 	mul.w	r3, r8, r3
 8001492:	4413      	add	r3, r2
 8001494:	4602      	mov	r2, r0
 8001496:	fba8 1202 	umull	r1, r2, r8, r2
 800149a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800149e:	460a      	mov	r2, r1
 80014a0:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80014a4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80014a8:	4413      	add	r3, r2
 80014aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80014ae:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80014b2:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 80014b6:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80014ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80014be:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80014c2:	b21b      	sxth	r3, r3
 80014c4:	17da      	asrs	r2, r3, #31
 80014c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80014ca:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80014ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80014d2:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80014d6:	462a      	mov	r2, r5
 80014d8:	fb02 f203 	mul.w	r2, r2, r3
 80014dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80014e0:	4621      	mov	r1, r4
 80014e2:	fb01 f303 	mul.w	r3, r1, r3
 80014e6:	441a      	add	r2, r3
 80014e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80014ec:	4621      	mov	r1, r4
 80014ee:	fba3 1301 	umull	r1, r3, r3, r1
 80014f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80014f6:	460b      	mov	r3, r1
 80014f8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80014fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001500:	18d3      	adds	r3, r2, r3
 8001502:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001506:	f04f 0000 	mov.w	r0, #0
 800150a:	f04f 0100 	mov.w	r1, #0
 800150e:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001512:	462b      	mov	r3, r5
 8001514:	0459      	lsls	r1, r3, #17
 8001516:	4623      	mov	r3, r4
 8001518:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 800151c:	4623      	mov	r3, r4
 800151e:	0458      	lsls	r0, r3, #17
 8001520:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001524:	1814      	adds	r4, r2, r0
 8001526:	643c      	str	r4, [r7, #64]	; 0x40
 8001528:	414b      	adcs	r3, r1
 800152a:	647b      	str	r3, [r7, #68]	; 0x44
 800152c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001530:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8001534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001538:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800153c:	b21b      	sxth	r3, r3
 800153e:	17da      	asrs	r2, r3, #31
 8001540:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001544:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001548:	f04f 0000 	mov.w	r0, #0
 800154c:	f04f 0100 	mov.w	r1, #0
 8001550:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001554:	00d9      	lsls	r1, r3, #3
 8001556:	2000      	movs	r0, #0
 8001558:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800155c:	1814      	adds	r4, r2, r0
 800155e:	63bc      	str	r4, [r7, #56]	; 0x38
 8001560:	414b      	adcs	r3, r1
 8001562:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001564:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001568:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 800156c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001570:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001574:	fb03 f102 	mul.w	r1, r3, r2
 8001578:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800157c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001580:	fb02 f303 	mul.w	r3, r2, r3
 8001584:	18ca      	adds	r2, r1, r3
 8001586:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800158a:	fba3 1303 	umull	r1, r3, r3, r3
 800158e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001592:	460b      	mov	r3, r1
 8001594:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001598:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800159c:	18d3      	adds	r3, r2, r3
 800159e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80015a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80015a6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80015aa:	b21b      	sxth	r3, r3
 80015ac:	17da      	asrs	r2, r3, #31
 80015ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80015b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80015b6:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80015ba:	462b      	mov	r3, r5
 80015bc:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80015c0:	4642      	mov	r2, r8
 80015c2:	fb02 f203 	mul.w	r2, r2, r3
 80015c6:	464b      	mov	r3, r9
 80015c8:	4621      	mov	r1, r4
 80015ca:	fb01 f303 	mul.w	r3, r1, r3
 80015ce:	4413      	add	r3, r2
 80015d0:	4622      	mov	r2, r4
 80015d2:	4641      	mov	r1, r8
 80015d4:	fba2 1201 	umull	r1, r2, r2, r1
 80015d8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80015dc:	460a      	mov	r2, r1
 80015de:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80015e2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80015e6:	4413      	add	r3, r2
 80015e8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80015ec:	f04f 0000 	mov.w	r0, #0
 80015f0:	f04f 0100 	mov.w	r1, #0
 80015f4:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 80015f8:	4623      	mov	r3, r4
 80015fa:	0a18      	lsrs	r0, r3, #8
 80015fc:	462b      	mov	r3, r5
 80015fe:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001602:	462b      	mov	r3, r5
 8001604:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8001606:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800160a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800160e:	b21b      	sxth	r3, r3
 8001610:	17da      	asrs	r2, r3, #31
 8001612:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001616:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800161a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800161e:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001622:	464a      	mov	r2, r9
 8001624:	fb02 f203 	mul.w	r2, r2, r3
 8001628:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800162c:	4644      	mov	r4, r8
 800162e:	fb04 f303 	mul.w	r3, r4, r3
 8001632:	441a      	add	r2, r3
 8001634:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001638:	4644      	mov	r4, r8
 800163a:	fba3 4304 	umull	r4, r3, r3, r4
 800163e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001642:	4623      	mov	r3, r4
 8001644:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001648:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800164c:	18d3      	adds	r3, r2, r3
 800164e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001652:	f04f 0200 	mov.w	r2, #0
 8001656:	f04f 0300 	mov.w	r3, #0
 800165a:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800165e:	464c      	mov	r4, r9
 8001660:	0323      	lsls	r3, r4, #12
 8001662:	4644      	mov	r4, r8
 8001664:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001668:	4644      	mov	r4, r8
 800166a:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 800166c:	1884      	adds	r4, r0, r2
 800166e:	633c      	str	r4, [r7, #48]	; 0x30
 8001670:	eb41 0303 	adc.w	r3, r1, r3
 8001674:	637b      	str	r3, [r7, #52]	; 0x34
 8001676:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800167a:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 800167e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001682:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001686:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 800168a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800168e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001692:	88db      	ldrh	r3, [r3, #6]
 8001694:	b29b      	uxth	r3, r3
 8001696:	2200      	movs	r2, #0
 8001698:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800169c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80016a0:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80016a4:	462b      	mov	r3, r5
 80016a6:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80016aa:	4642      	mov	r2, r8
 80016ac:	fb02 f203 	mul.w	r2, r2, r3
 80016b0:	464b      	mov	r3, r9
 80016b2:	4621      	mov	r1, r4
 80016b4:	fb01 f303 	mul.w	r3, r1, r3
 80016b8:	4413      	add	r3, r2
 80016ba:	4622      	mov	r2, r4
 80016bc:	4641      	mov	r1, r8
 80016be:	fba2 1201 	umull	r1, r2, r2, r1
 80016c2:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80016c6:	460a      	mov	r2, r1
 80016c8:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80016cc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80016d0:	4413      	add	r3, r2
 80016d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80016d6:	f04f 0200 	mov.w	r2, #0
 80016da:	f04f 0300 	mov.w	r3, #0
 80016de:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80016e2:	4629      	mov	r1, r5
 80016e4:	104a      	asrs	r2, r1, #1
 80016e6:	4629      	mov	r1, r5
 80016e8:	17cb      	asrs	r3, r1, #31
 80016ea:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

	if (var1 == 0) {
 80016ee:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80016f2:	4313      	orrs	r3, r2
 80016f4:	d101      	bne.n	80016fa <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 80016f6:	2300      	movs	r3, #0
 80016f8:	e148      	b.n	800198c <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 80016fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80016fe:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001702:	17da      	asrs	r2, r3, #31
 8001704:	62bb      	str	r3, [r7, #40]	; 0x28
 8001706:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001708:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800170c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001710:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001714:	105b      	asrs	r3, r3, #1
 8001716:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800171a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800171e:	07db      	lsls	r3, r3, #31
 8001720:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001724:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001728:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800172c:	4621      	mov	r1, r4
 800172e:	1a89      	subs	r1, r1, r2
 8001730:	67b9      	str	r1, [r7, #120]	; 0x78
 8001732:	4629      	mov	r1, r5
 8001734:	eb61 0303 	sbc.w	r3, r1, r3
 8001738:	67fb      	str	r3, [r7, #124]	; 0x7c
 800173a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800173e:	4622      	mov	r2, r4
 8001740:	462b      	mov	r3, r5
 8001742:	1891      	adds	r1, r2, r2
 8001744:	6239      	str	r1, [r7, #32]
 8001746:	415b      	adcs	r3, r3
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
 800174a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800174e:	4621      	mov	r1, r4
 8001750:	1851      	adds	r1, r2, r1
 8001752:	61b9      	str	r1, [r7, #24]
 8001754:	4629      	mov	r1, r5
 8001756:	414b      	adcs	r3, r1
 8001758:	61fb      	str	r3, [r7, #28]
 800175a:	f04f 0200 	mov.w	r2, #0
 800175e:	f04f 0300 	mov.w	r3, #0
 8001762:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001766:	4649      	mov	r1, r9
 8001768:	018b      	lsls	r3, r1, #6
 800176a:	4641      	mov	r1, r8
 800176c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001770:	4641      	mov	r1, r8
 8001772:	018a      	lsls	r2, r1, #6
 8001774:	4641      	mov	r1, r8
 8001776:	1889      	adds	r1, r1, r2
 8001778:	6139      	str	r1, [r7, #16]
 800177a:	4649      	mov	r1, r9
 800177c:	eb43 0101 	adc.w	r1, r3, r1
 8001780:	6179      	str	r1, [r7, #20]
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800178e:	4649      	mov	r1, r9
 8001790:	008b      	lsls	r3, r1, #2
 8001792:	4641      	mov	r1, r8
 8001794:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001798:	4641      	mov	r1, r8
 800179a:	008a      	lsls	r2, r1, #2
 800179c:	4610      	mov	r0, r2
 800179e:	4619      	mov	r1, r3
 80017a0:	4603      	mov	r3, r0
 80017a2:	4622      	mov	r2, r4
 80017a4:	189b      	adds	r3, r3, r2
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	460b      	mov	r3, r1
 80017aa:	462a      	mov	r2, r5
 80017ac:	eb42 0303 	adc.w	r3, r2, r3
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	f04f 0300 	mov.w	r3, #0
 80017ba:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80017be:	4649      	mov	r1, r9
 80017c0:	008b      	lsls	r3, r1, #2
 80017c2:	4641      	mov	r1, r8
 80017c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017c8:	4641      	mov	r1, r8
 80017ca:	008a      	lsls	r2, r1, #2
 80017cc:	4610      	mov	r0, r2
 80017ce:	4619      	mov	r1, r3
 80017d0:	4603      	mov	r3, r0
 80017d2:	4622      	mov	r2, r4
 80017d4:	189b      	adds	r3, r3, r2
 80017d6:	673b      	str	r3, [r7, #112]	; 0x70
 80017d8:	462b      	mov	r3, r5
 80017da:	460a      	mov	r2, r1
 80017dc:	eb42 0303 	adc.w	r3, r2, r3
 80017e0:	677b      	str	r3, [r7, #116]	; 0x74
 80017e2:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80017e6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80017ea:	f7ff f9e5 	bl	8000bb8 <__aeabi_ldivmod>
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 80017f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80017fa:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80017fe:	b21b      	sxth	r3, r3
 8001800:	17da      	asrs	r2, r3, #31
 8001802:	66bb      	str	r3, [r7, #104]	; 0x68
 8001804:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001806:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800180a:	f04f 0000 	mov.w	r0, #0
 800180e:	f04f 0100 	mov.w	r1, #0
 8001812:	0b50      	lsrs	r0, r2, #13
 8001814:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001818:	1359      	asrs	r1, r3, #13
 800181a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800181e:	462b      	mov	r3, r5
 8001820:	fb00 f203 	mul.w	r2, r0, r3
 8001824:	4623      	mov	r3, r4
 8001826:	fb03 f301 	mul.w	r3, r3, r1
 800182a:	4413      	add	r3, r2
 800182c:	4622      	mov	r2, r4
 800182e:	fba2 1200 	umull	r1, r2, r2, r0
 8001832:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001836:	460a      	mov	r2, r1
 8001838:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800183c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001840:	4413      	add	r3, r2
 8001842:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001846:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800184a:	f04f 0000 	mov.w	r0, #0
 800184e:	f04f 0100 	mov.w	r1, #0
 8001852:	0b50      	lsrs	r0, r2, #13
 8001854:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001858:	1359      	asrs	r1, r3, #13
 800185a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800185e:	462b      	mov	r3, r5
 8001860:	fb00 f203 	mul.w	r2, r0, r3
 8001864:	4623      	mov	r3, r4
 8001866:	fb03 f301 	mul.w	r3, r3, r1
 800186a:	4413      	add	r3, r2
 800186c:	4622      	mov	r2, r4
 800186e:	fba2 1200 	umull	r1, r2, r2, r0
 8001872:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001876:	460a      	mov	r2, r1
 8001878:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800187c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001880:	4413      	add	r3, r2
 8001882:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001886:	f04f 0200 	mov.w	r2, #0
 800188a:	f04f 0300 	mov.w	r3, #0
 800188e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001892:	4621      	mov	r1, r4
 8001894:	0e4a      	lsrs	r2, r1, #25
 8001896:	4629      	mov	r1, r5
 8001898:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800189c:	4629      	mov	r1, r5
 800189e:	164b      	asrs	r3, r1, #25
 80018a0:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 80018a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018a8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80018ac:	b21b      	sxth	r3, r3
 80018ae:	17da      	asrs	r2, r3, #31
 80018b0:	663b      	str	r3, [r7, #96]	; 0x60
 80018b2:	667a      	str	r2, [r7, #100]	; 0x64
 80018b4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80018b8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80018bc:	462a      	mov	r2, r5
 80018be:	fb02 f203 	mul.w	r2, r2, r3
 80018c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80018c6:	4621      	mov	r1, r4
 80018c8:	fb01 f303 	mul.w	r3, r1, r3
 80018cc:	4413      	add	r3, r2
 80018ce:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80018d2:	4621      	mov	r1, r4
 80018d4:	fba2 1201 	umull	r1, r2, r2, r1
 80018d8:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80018dc:	460a      	mov	r2, r1
 80018de:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80018e2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80018e6:	4413      	add	r3, r2
 80018e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80018ec:	f04f 0200 	mov.w	r2, #0
 80018f0:	f04f 0300 	mov.w	r3, #0
 80018f4:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 80018f8:	4621      	mov	r1, r4
 80018fa:	0cca      	lsrs	r2, r1, #19
 80018fc:	4629      	mov	r1, r5
 80018fe:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001902:	4629      	mov	r1, r5
 8001904:	14cb      	asrs	r3, r1, #19
 8001906:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 800190a:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800190e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001912:	1884      	adds	r4, r0, r2
 8001914:	65bc      	str	r4, [r7, #88]	; 0x58
 8001916:	eb41 0303 	adc.w	r3, r1, r3
 800191a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800191c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001920:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001924:	4621      	mov	r1, r4
 8001926:	1889      	adds	r1, r1, r2
 8001928:	6539      	str	r1, [r7, #80]	; 0x50
 800192a:	4629      	mov	r1, r5
 800192c:	eb43 0101 	adc.w	r1, r3, r1
 8001930:	6579      	str	r1, [r7, #84]	; 0x54
 8001932:	f04f 0000 	mov.w	r0, #0
 8001936:	f04f 0100 	mov.w	r1, #0
 800193a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800193e:	4623      	mov	r3, r4
 8001940:	0a18      	lsrs	r0, r3, #8
 8001942:	462b      	mov	r3, r5
 8001944:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001948:	462b      	mov	r3, r5
 800194a:	1219      	asrs	r1, r3, #8
 800194c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001950:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001954:	b21b      	sxth	r3, r3
 8001956:	17da      	asrs	r2, r3, #31
 8001958:	64bb      	str	r3, [r7, #72]	; 0x48
 800195a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800195c:	f04f 0200 	mov.w	r2, #0
 8001960:	f04f 0300 	mov.w	r3, #0
 8001964:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001968:	464c      	mov	r4, r9
 800196a:	0123      	lsls	r3, r4, #4
 800196c:	4644      	mov	r4, r8
 800196e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001972:	4644      	mov	r4, r8
 8001974:	0122      	lsls	r2, r4, #4
 8001976:	1884      	adds	r4, r0, r2
 8001978:	603c      	str	r4, [r7, #0]
 800197a:	eb41 0303 	adc.w	r3, r1, r3
 800197e:	607b      	str	r3, [r7, #4]
 8001980:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001984:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	return p;
 8001988:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 800198c:	4618      	mov	r0, r3
 800198e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001992:	46bd      	mov	sp, r7
 8001994:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001998 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001998:	b480      	push	{r7}
 800199a:	b087      	sub	sp, #28
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 80019aa:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	039a      	lsls	r2, r3, #14
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80019b6:	051b      	lsls	r3, r3, #20
 80019b8:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80019c0:	4619      	mov	r1, r3
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	fb01 f303 	mul.w	r3, r1, r3
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80019ce:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 80019d6:	4611      	mov	r1, r2
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	fb01 f202 	mul.w	r2, r1, r2
 80019de:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80019e0:	68f9      	ldr	r1, [r7, #12]
 80019e2:	7f09      	ldrb	r1, [r1, #28]
 80019e4:	4608      	mov	r0, r1
 80019e6:	6979      	ldr	r1, [r7, #20]
 80019e8:	fb00 f101 	mul.w	r1, r0, r1
 80019ec:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80019ee:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80019f2:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80019f6:	1292      	asrs	r2, r2, #10
 80019f8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 80019fc:	68f9      	ldr	r1, [r7, #12]
 80019fe:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001a02:	fb01 f202 	mul.w	r2, r1, r2
 8001a06:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001a0a:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001a0c:	fb02 f303 	mul.w	r3, r2, r3
 8001a10:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	13db      	asrs	r3, r3, #15
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	13d2      	asrs	r2, r2, #15
 8001a1a:	fb02 f303 	mul.w	r3, r2, r3
 8001a1e:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	7e12      	ldrb	r2, [r2, #24]
 8001a24:	fb02 f303 	mul.w	r3, r2, r3
 8001a28:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001a36:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001a3e:	bfa8      	it	ge
 8001a40:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001a44:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	131b      	asrs	r3, r3, #12
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	371c      	adds	r7, #28
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b08c      	sub	sp, #48	; 0x30
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	60f8      	str	r0, [r7, #12]
 8001a5e:	60b9      	str	r1, [r7, #8]
 8001a60:	607a      	str	r2, [r7, #4]
 8001a62:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001a6a:	2b60      	cmp	r3, #96	; 0x60
 8001a6c:	d007      	beq.n	8001a7e <bmp280_read_fixed+0x28>
		if (humidity)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d002      	beq.n	8001a7a <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <bmp280_read_fixed+0x32>
 8001a84:	2308      	movs	r3, #8
 8001a86:	e000      	b.n	8001a8a <bmp280_read_fixed+0x34>
 8001a88:	2306      	movs	r3, #6
 8001a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	f107 0218 	add.w	r2, r7, #24
 8001a94:	21f7      	movs	r1, #247	; 0xf7
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f7ff faab 	bl	8000ff2 <read_data>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <bmp280_read_fixed+0x50>
		return false;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	e038      	b.n	8001b18 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001aa6:	7e3b      	ldrb	r3, [r7, #24]
 8001aa8:	031a      	lsls	r2, r3, #12
 8001aaa:	7e7b      	ldrb	r3, [r7, #25]
 8001aac:	011b      	lsls	r3, r3, #4
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	7eba      	ldrb	r2, [r7, #26]
 8001ab2:	0912      	lsrs	r2, r2, #4
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001aba:	7efb      	ldrb	r3, [r7, #27]
 8001abc:	031a      	lsls	r2, r3, #12
 8001abe:	7f3b      	ldrb	r3, [r7, #28]
 8001ac0:	011b      	lsls	r3, r3, #4
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	7f7a      	ldrb	r2, [r7, #29]
 8001ac6:	0912      	lsrs	r2, r2, #4
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	4313      	orrs	r3, r2
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001ace:	f107 0314 	add.w	r3, r7, #20
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	f7ff fc67 	bl	80013aa <compensate_temperature>
 8001adc:	4602      	mov	r2, r0
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f7ff fc97 	bl	800141c <compensate_pressure>
 8001aee:	4602      	mov	r2, r0
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d00d      	beq.n	8001b16 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001afa:	7fbb      	ldrb	r3, [r7, #30]
 8001afc:	021b      	lsls	r3, r3, #8
 8001afe:	7ffa      	ldrb	r2, [r7, #31]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	461a      	mov	r2, r3
 8001b08:	6a39      	ldr	r1, [r7, #32]
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f7ff ff44 	bl	8001998 <compensate_humidity>
 8001b10:	4602      	mov	r2, r0
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001b16:	2301      	movs	r3, #1
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3730      	adds	r7, #48	; 0x30
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b088      	sub	sp, #32
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
 8001b2c:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d002      	beq.n	8001b3a <bmp280_read_float+0x1a>
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	e000      	b.n	8001b3c <bmp280_read_float+0x1c>
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f107 0218 	add.w	r2, r7, #24
 8001b40:	f107 011c 	add.w	r1, r7, #28
 8001b44:	68f8      	ldr	r0, [r7, #12]
 8001b46:	f7ff ff86 	bl	8001a56 <bmp280_read_fixed>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d028      	beq.n	8001ba2 <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	ee07 3a90 	vmov	s15, r3
 8001b56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b5a:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001bac <bmp280_read_float+0x8c>
 8001b5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	ee07 3a90 	vmov	s15, r3
 8001b6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b72:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001bb0 <bmp280_read_float+0x90>
 8001b76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00b      	beq.n	8001b9e <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	ee07 3a90 	vmov	s15, r3
 8001b8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b90:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001bb4 <bmp280_read_float+0x94>
 8001b94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e000      	b.n	8001ba4 <bmp280_read_float+0x84>
	}

	return false;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3720      	adds	r7, #32
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	42c80000 	.word	0x42c80000
 8001bb0:	43800000 	.word	0x43800000
 8001bb4:	44800000 	.word	0x44800000

08001bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bb8:	b5b0      	push	{r4, r5, r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bbe:	f000 fdb7 	bl	8002730 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bc2:	f000 f8ed 	bl	8001da0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bc6:	f000 f9e3 	bl	8001f90 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001bca:	f000 f9b7 	bl	8001f3c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001bce:	f000 f951 	bl	8001e74 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001bd2:	f000 f97d 	bl	8001ed0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  //INICIAR DISPLAY
  LCD_Init();
 8001bd6:	f000 fc87 	bl	80024e8 <LCD_Init>
  LCD_Write_String(0,0, "Inicializando...");
 8001bda:	4a5c      	ldr	r2, [pc, #368]	; (8001d4c <main+0x194>)
 8001bdc:	2100      	movs	r1, #0
 8001bde:	2000      	movs	r0, #0
 8001be0:	f000 fd0c 	bl	80025fc <LCD_Write_String>

  //INICIAR SENSOR
  bmp280_init_default_params(&bmp280.params);
 8001be4:	485a      	ldr	r0, [pc, #360]	; (8001d50 <main+0x198>)
 8001be6:	f7ff f9b9 	bl	8000f5c <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_0;
 8001bea:	4b5a      	ldr	r3, [pc, #360]	; (8001d54 <main+0x19c>)
 8001bec:	2276      	movs	r2, #118	; 0x76
 8001bee:	849a      	strh	r2, [r3, #36]	; 0x24
  bmp280.i2c = &hi2c1;
 8001bf0:	4b58      	ldr	r3, [pc, #352]	; (8001d54 <main+0x19c>)
 8001bf2:	4a59      	ldr	r2, [pc, #356]	; (8001d58 <main+0x1a0>)
 8001bf4:	629a      	str	r2, [r3, #40]	; 0x28

  while (!bmp280_init(&bmp280, &bmp280.params)) {
 8001bf6:	e013      	b.n	8001c20 <main+0x68>
	  size = sprintf((char *)Data, "Falha na inicializacao do BMP280\n");
 8001bf8:	4958      	ldr	r1, [pc, #352]	; (8001d5c <main+0x1a4>)
 8001bfa:	4859      	ldr	r0, [pc, #356]	; (8001d60 <main+0x1a8>)
 8001bfc:	f003 fff8 	bl	8005bf0 <siprintf>
 8001c00:	4603      	mov	r3, r0
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	4b57      	ldr	r3, [pc, #348]	; (8001d64 <main+0x1ac>)
 8001c06:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, Data, size, 1000);
 8001c08:	4b56      	ldr	r3, [pc, #344]	; (8001d64 <main+0x1ac>)
 8001c0a:	881a      	ldrh	r2, [r3, #0]
 8001c0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c10:	4953      	ldr	r1, [pc, #332]	; (8001d60 <main+0x1a8>)
 8001c12:	4855      	ldr	r0, [pc, #340]	; (8001d68 <main+0x1b0>)
 8001c14:	f002 ffdb 	bl	8004bce <HAL_UART_Transmit>
	  HAL_Delay(2000);
 8001c18:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c1c:	f000 fdfa 	bl	8002814 <HAL_Delay>
  while (!bmp280_init(&bmp280, &bmp280.params)) {
 8001c20:	494b      	ldr	r1, [pc, #300]	; (8001d50 <main+0x198>)
 8001c22:	484c      	ldr	r0, [pc, #304]	; (8001d54 <main+0x19c>)
 8001c24:	f7ff fb14 	bl	8001250 <bmp280_init>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	f083 0301 	eor.w	r3, r3, #1
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1e1      	bne.n	8001bf8 <main+0x40>
  }
  bool bme280p = bmp280.id == BME280_CHIP_ID;
 8001c34:	4b47      	ldr	r3, [pc, #284]	; (8001d54 <main+0x19c>)
 8001c36:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001c3a:	2b60      	cmp	r3, #96	; 0x60
 8001c3c:	bf0c      	ite	eq
 8001c3e:	2301      	moveq	r3, #1
 8001c40:	2300      	movne	r3, #0
 8001c42:	71fb      	strb	r3, [r7, #7]
  size = sprintf((char *)Data, "BMP280: encontrado %s\n", bme280p ? "BME280" : "BMP280");
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <main+0x96>
 8001c4a:	4b48      	ldr	r3, [pc, #288]	; (8001d6c <main+0x1b4>)
 8001c4c:	e000      	b.n	8001c50 <main+0x98>
 8001c4e:	4b48      	ldr	r3, [pc, #288]	; (8001d70 <main+0x1b8>)
 8001c50:	461a      	mov	r2, r3
 8001c52:	4948      	ldr	r1, [pc, #288]	; (8001d74 <main+0x1bc>)
 8001c54:	4842      	ldr	r0, [pc, #264]	; (8001d60 <main+0x1a8>)
 8001c56:	f003 ffcb 	bl	8005bf0 <siprintf>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	4b41      	ldr	r3, [pc, #260]	; (8001d64 <main+0x1ac>)
 8001c60:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, Data, size, 1000);
 8001c62:	4b40      	ldr	r3, [pc, #256]	; (8001d64 <main+0x1ac>)
 8001c64:	881a      	ldrh	r2, [r3, #0]
 8001c66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c6a:	493d      	ldr	r1, [pc, #244]	; (8001d60 <main+0x1a8>)
 8001c6c:	483e      	ldr	r0, [pc, #248]	; (8001d68 <main+0x1b0>)
 8001c6e:	f002 ffae 	bl	8004bce <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(100);
 8001c72:	2064      	movs	r0, #100	; 0x64
 8001c74:	f000 fdce 	bl	8002814 <HAL_Delay>
	  while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 8001c78:	e013      	b.n	8001ca2 <main+0xea>
		  size = sprintf((char *)Data,
 8001c7a:	493f      	ldr	r1, [pc, #252]	; (8001d78 <main+0x1c0>)
 8001c7c:	4838      	ldr	r0, [pc, #224]	; (8001d60 <main+0x1a8>)
 8001c7e:	f003 ffb7 	bl	8005bf0 <siprintf>
 8001c82:	4603      	mov	r3, r0
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	4b37      	ldr	r3, [pc, #220]	; (8001d64 <main+0x1ac>)
 8001c88:	801a      	strh	r2, [r3, #0]
				  "Falha na leitura de temperatura\n");
		  HAL_UART_Transmit(&huart2, Data, size, 1000);
 8001c8a:	4b36      	ldr	r3, [pc, #216]	; (8001d64 <main+0x1ac>)
 8001c8c:	881a      	ldrh	r2, [r3, #0]
 8001c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c92:	4933      	ldr	r1, [pc, #204]	; (8001d60 <main+0x1a8>)
 8001c94:	4834      	ldr	r0, [pc, #208]	; (8001d68 <main+0x1b0>)
 8001c96:	f002 ff9a 	bl	8004bce <HAL_UART_Transmit>
		  HAL_Delay(2000);
 8001c9a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c9e:	f000 fdb9 	bl	8002814 <HAL_Delay>
	  while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 8001ca2:	4b36      	ldr	r3, [pc, #216]	; (8001d7c <main+0x1c4>)
 8001ca4:	4a36      	ldr	r2, [pc, #216]	; (8001d80 <main+0x1c8>)
 8001ca6:	4937      	ldr	r1, [pc, #220]	; (8001d84 <main+0x1cc>)
 8001ca8:	482a      	ldr	r0, [pc, #168]	; (8001d54 <main+0x19c>)
 8001caa:	f7ff ff39 	bl	8001b20 <bmp280_read_float>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	f083 0301 	eor.w	r3, r3, #1
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1df      	bne.n	8001c7a <main+0xc2>
	  }

	  size = sprintf((char *)Data,"T:%.2f,P:%.2f", temperature, pressure);
 8001cba:	4b32      	ldr	r3, [pc, #200]	; (8001d84 <main+0x1cc>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7fe fc4a 	bl	8000558 <__aeabi_f2d>
 8001cc4:	4604      	mov	r4, r0
 8001cc6:	460d      	mov	r5, r1
 8001cc8:	4b2d      	ldr	r3, [pc, #180]	; (8001d80 <main+0x1c8>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fc43 	bl	8000558 <__aeabi_f2d>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	e9cd 2300 	strd	r2, r3, [sp]
 8001cda:	4622      	mov	r2, r4
 8001cdc:	462b      	mov	r3, r5
 8001cde:	492a      	ldr	r1, [pc, #168]	; (8001d88 <main+0x1d0>)
 8001ce0:	481f      	ldr	r0, [pc, #124]	; (8001d60 <main+0x1a8>)
 8001ce2:	f003 ff85 	bl	8005bf0 <siprintf>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	4b1e      	ldr	r3, [pc, #120]	; (8001d64 <main+0x1ac>)
 8001cec:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, Data, size, 1000);
 8001cee:	4b1d      	ldr	r3, [pc, #116]	; (8001d64 <main+0x1ac>)
 8001cf0:	881a      	ldrh	r2, [r3, #0]
 8001cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cf6:	491a      	ldr	r1, [pc, #104]	; (8001d60 <main+0x1a8>)
 8001cf8:	481b      	ldr	r0, [pc, #108]	; (8001d68 <main+0x1b0>)
 8001cfa:	f002 ff68 	bl	8004bce <HAL_UART_Transmit>

	  LCD_Clear();
 8001cfe:	f000 fc35 	bl	800256c <LCD_Clear>
	  LCD_Write_String(0, 0, "Temperatura:");
 8001d02:	4a22      	ldr	r2, [pc, #136]	; (8001d8c <main+0x1d4>)
 8001d04:	2100      	movs	r1, #0
 8001d06:	2000      	movs	r0, #0
 8001d08:	f000 fc78 	bl	80025fc <LCD_Write_String>
	  sprintf(Temperature1, "%.2f C", temperature);
 8001d0c:	4b1d      	ldr	r3, [pc, #116]	; (8001d84 <main+0x1cc>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7fe fc21 	bl	8000558 <__aeabi_f2d>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	491d      	ldr	r1, [pc, #116]	; (8001d90 <main+0x1d8>)
 8001d1c:	481d      	ldr	r0, [pc, #116]	; (8001d94 <main+0x1dc>)
 8001d1e:	f003 ff67 	bl	8005bf0 <siprintf>
	  LCD_Write_String(0, 1, Temperature1);
 8001d22:	4a1c      	ldr	r2, [pc, #112]	; (8001d94 <main+0x1dc>)
 8001d24:	2101      	movs	r1, #1
 8001d26:	2000      	movs	r0, #0
 8001d28:	f000 fc68 	bl	80025fc <LCD_Write_String>
	  LCD_Write_String(0, 3, "Grupo: ");
 8001d2c:	4a1a      	ldr	r2, [pc, #104]	; (8001d98 <main+0x1e0>)
 8001d2e:	2103      	movs	r1, #3
 8001d30:	2000      	movs	r0, #0
 8001d32:	f000 fc63 	bl	80025fc <LCD_Write_String>
	  LCD_Write_String(0, 4, "Gabriel, Mauricio e Samuel ");
 8001d36:	4a19      	ldr	r2, [pc, #100]	; (8001d9c <main+0x1e4>)
 8001d38:	2104      	movs	r1, #4
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	f000 fc5e 	bl	80025fc <LCD_Write_String>

	  HAL_Delay(2000);
 8001d40:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001d44:	f000 fd66 	bl	8002814 <HAL_Delay>
	  HAL_Delay(100);
 8001d48:	e793      	b.n	8001c72 <main+0xba>
 8001d4a:	bf00      	nop
 8001d4c:	080080f8 	.word	0x080080f8
 8001d50:	20000314 	.word	0x20000314
 8001d54:	200002e8 	.word	0x200002e8
 8001d58:	200001f8 	.word	0x200001f8
 8001d5c:	0800810c 	.word	0x0800810c
 8001d60:	2000032c 	.word	0x2000032c
 8001d64:	20000328 	.word	0x20000328
 8001d68:	200002a4 	.word	0x200002a4
 8001d6c:	08008130 	.word	0x08008130
 8001d70:	08008138 	.word	0x08008138
 8001d74:	08008140 	.word	0x08008140
 8001d78:	08008158 	.word	0x08008158
 8001d7c:	20000324 	.word	0x20000324
 8001d80:	2000031c 	.word	0x2000031c
 8001d84:	20000320 	.word	0x20000320
 8001d88:	0800817c 	.word	0x0800817c
 8001d8c:	0800818c 	.word	0x0800818c
 8001d90:	0800819c 	.word	0x0800819c
 8001d94:	2000042c 	.word	0x2000042c
 8001d98:	080081a4 	.word	0x080081a4
 8001d9c:	080081ac 	.word	0x080081ac

08001da0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b094      	sub	sp, #80	; 0x50
 8001da4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001da6:	f107 0320 	add.w	r3, r7, #32
 8001daa:	2230      	movs	r2, #48	; 0x30
 8001dac:	2100      	movs	r1, #0
 8001dae:	4618      	mov	r0, r3
 8001db0:	f003 faac 	bl	800530c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001db4:	f107 030c 	add.w	r3, r7, #12
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60bb      	str	r3, [r7, #8]
 8001dc8:	4b28      	ldr	r3, [pc, #160]	; (8001e6c <SystemClock_Config+0xcc>)
 8001dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dcc:	4a27      	ldr	r2, [pc, #156]	; (8001e6c <SystemClock_Config+0xcc>)
 8001dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd4:	4b25      	ldr	r3, [pc, #148]	; (8001e6c <SystemClock_Config+0xcc>)
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001de0:	2300      	movs	r3, #0
 8001de2:	607b      	str	r3, [r7, #4]
 8001de4:	4b22      	ldr	r3, [pc, #136]	; (8001e70 <SystemClock_Config+0xd0>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a21      	ldr	r2, [pc, #132]	; (8001e70 <SystemClock_Config+0xd0>)
 8001dea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	4b1f      	ldr	r3, [pc, #124]	; (8001e70 <SystemClock_Config+0xd0>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001df8:	607b      	str	r3, [r7, #4]
 8001dfa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e00:	2301      	movs	r3, #1
 8001e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e04:	2310      	movs	r3, #16
 8001e06:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001e10:	2310      	movs	r3, #16
 8001e12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001e14:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001e18:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001e1a:	2304      	movs	r3, #4
 8001e1c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e1e:	2304      	movs	r3, #4
 8001e20:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e22:	f107 0320 	add.w	r3, r7, #32
 8001e26:	4618      	mov	r0, r3
 8001e28:	f001 ff5c 	bl	8003ce4 <HAL_RCC_OscConfig>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001e32:	f000 f931 	bl	8002098 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e36:	230f      	movs	r3, #15
 8001e38:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e46:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e4c:	f107 030c 	add.w	r3, r7, #12
 8001e50:	2102      	movs	r1, #2
 8001e52:	4618      	mov	r0, r3
 8001e54:	f002 f9be 	bl	80041d4 <HAL_RCC_ClockConfig>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001e5e:	f000 f91b 	bl	8002098 <Error_Handler>
  }
}
 8001e62:	bf00      	nop
 8001e64:	3750      	adds	r7, #80	; 0x50
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40007000 	.word	0x40007000

08001e74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e78:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <MX_I2C1_Init+0x50>)
 8001e7a:	4a13      	ldr	r2, [pc, #76]	; (8001ec8 <MX_I2C1_Init+0x54>)
 8001e7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001e7e:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <MX_I2C1_Init+0x50>)
 8001e80:	4a12      	ldr	r2, [pc, #72]	; (8001ecc <MX_I2C1_Init+0x58>)
 8001e82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e84:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <MX_I2C1_Init+0x50>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ec4 <MX_I2C1_Init+0x50>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e90:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <MX_I2C1_Init+0x50>)
 8001e92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e98:	4b0a      	ldr	r3, [pc, #40]	; (8001ec4 <MX_I2C1_Init+0x50>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e9e:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <MX_I2C1_Init+0x50>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ea4:	4b07      	ldr	r3, [pc, #28]	; (8001ec4 <MX_I2C1_Init+0x50>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001eaa:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <MX_I2C1_Init+0x50>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001eb0:	4804      	ldr	r0, [pc, #16]	; (8001ec4 <MX_I2C1_Init+0x50>)
 8001eb2:	f000 ff57 	bl	8002d64 <HAL_I2C_Init>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ebc:	f000 f8ec 	bl	8002098 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ec0:	bf00      	nop
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	200001f8 	.word	0x200001f8
 8001ec8:	40005400 	.word	0x40005400
 8001ecc:	000186a0 	.word	0x000186a0

08001ed0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001ed4:	4b17      	ldr	r3, [pc, #92]	; (8001f34 <MX_SPI2_Init+0x64>)
 8001ed6:	4a18      	ldr	r2, [pc, #96]	; (8001f38 <MX_SPI2_Init+0x68>)
 8001ed8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001eda:	4b16      	ldr	r3, [pc, #88]	; (8001f34 <MX_SPI2_Init+0x64>)
 8001edc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ee0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001ee2:	4b14      	ldr	r3, [pc, #80]	; (8001f34 <MX_SPI2_Init+0x64>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ee8:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <MX_SPI2_Init+0x64>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001eee:	4b11      	ldr	r3, [pc, #68]	; (8001f34 <MX_SPI2_Init+0x64>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ef4:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <MX_SPI2_Init+0x64>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001efa:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <MX_SPI2_Init+0x64>)
 8001efc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f00:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001f02:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <MX_SPI2_Init+0x64>)
 8001f04:	2228      	movs	r2, #40	; 0x28
 8001f06:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f08:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <MX_SPI2_Init+0x64>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f0e:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <MX_SPI2_Init+0x64>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f14:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <MX_SPI2_Init+0x64>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001f1a:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <MX_SPI2_Init+0x64>)
 8001f1c:	220a      	movs	r2, #10
 8001f1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001f20:	4804      	ldr	r0, [pc, #16]	; (8001f34 <MX_SPI2_Init+0x64>)
 8001f22:	f002 fb77 	bl	8004614 <HAL_SPI_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001f2c:	f000 f8b4 	bl	8002098 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001f30:	bf00      	nop
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	2000024c 	.word	0x2000024c
 8001f38:	40003800 	.word	0x40003800

08001f3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f40:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <MX_USART2_UART_Init+0x4c>)
 8001f42:	4a12      	ldr	r2, [pc, #72]	; (8001f8c <MX_USART2_UART_Init+0x50>)
 8001f44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f46:	4b10      	ldr	r3, [pc, #64]	; (8001f88 <MX_USART2_UART_Init+0x4c>)
 8001f48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f4e:	4b0e      	ldr	r3, [pc, #56]	; (8001f88 <MX_USART2_UART_Init+0x4c>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f54:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <MX_USART2_UART_Init+0x4c>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f5a:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <MX_USART2_UART_Init+0x4c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f60:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <MX_USART2_UART_Init+0x4c>)
 8001f62:	220c      	movs	r2, #12
 8001f64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f66:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <MX_USART2_UART_Init+0x4c>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <MX_USART2_UART_Init+0x4c>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f72:	4805      	ldr	r0, [pc, #20]	; (8001f88 <MX_USART2_UART_Init+0x4c>)
 8001f74:	f002 fdde 	bl	8004b34 <HAL_UART_Init>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f7e:	f000 f88b 	bl	8002098 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	200002a4 	.word	0x200002a4
 8001f8c:	40004400 	.word	0x40004400

08001f90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b08a      	sub	sp, #40	; 0x28
 8001f94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f96:	f107 0314 	add.w	r3, r7, #20
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	605a      	str	r2, [r3, #4]
 8001fa0:	609a      	str	r2, [r3, #8]
 8001fa2:	60da      	str	r2, [r3, #12]
 8001fa4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	4b37      	ldr	r3, [pc, #220]	; (8002088 <MX_GPIO_Init+0xf8>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	4a36      	ldr	r2, [pc, #216]	; (8002088 <MX_GPIO_Init+0xf8>)
 8001fb0:	f043 0304 	orr.w	r3, r3, #4
 8001fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb6:	4b34      	ldr	r3, [pc, #208]	; (8002088 <MX_GPIO_Init+0xf8>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	f003 0304 	and.w	r3, r3, #4
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	4b30      	ldr	r3, [pc, #192]	; (8002088 <MX_GPIO_Init+0xf8>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	4a2f      	ldr	r2, [pc, #188]	; (8002088 <MX_GPIO_Init+0xf8>)
 8001fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd2:	4b2d      	ldr	r3, [pc, #180]	; (8002088 <MX_GPIO_Init+0xf8>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60bb      	str	r3, [r7, #8]
 8001fe2:	4b29      	ldr	r3, [pc, #164]	; (8002088 <MX_GPIO_Init+0xf8>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	4a28      	ldr	r2, [pc, #160]	; (8002088 <MX_GPIO_Init+0xf8>)
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	6313      	str	r3, [r2, #48]	; 0x30
 8001fee:	4b26      	ldr	r3, [pc, #152]	; (8002088 <MX_GPIO_Init+0xf8>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	60bb      	str	r3, [r7, #8]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	607b      	str	r3, [r7, #4]
 8001ffe:	4b22      	ldr	r3, [pc, #136]	; (8002088 <MX_GPIO_Init+0xf8>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	4a21      	ldr	r2, [pc, #132]	; (8002088 <MX_GPIO_Init+0xf8>)
 8002004:	f043 0302 	orr.w	r3, r3, #2
 8002008:	6313      	str	r3, [r2, #48]	; 0x30
 800200a:	4b1f      	ldr	r3, [pc, #124]	; (8002088 <MX_GPIO_Init+0xf8>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	607b      	str	r3, [r7, #4]
 8002014:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002016:	2200      	movs	r2, #0
 8002018:	2120      	movs	r1, #32
 800201a:	481c      	ldr	r0, [pc, #112]	; (800208c <MX_GPIO_Init+0xfc>)
 800201c:	f000 fe88 	bl	8002d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_DC_Pin|LCD_CE_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8002020:	2200      	movs	r2, #0
 8002022:	2107      	movs	r1, #7
 8002024:	481a      	ldr	r0, [pc, #104]	; (8002090 <MX_GPIO_Init+0x100>)
 8002026:	f000 fe83 	bl	8002d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800202a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800202e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002030:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002034:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800203a:	f107 0314 	add.w	r3, r7, #20
 800203e:	4619      	mov	r1, r3
 8002040:	4814      	ldr	r0, [pc, #80]	; (8002094 <MX_GPIO_Init+0x104>)
 8002042:	f000 fcf1 	bl	8002a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002046:	2320      	movs	r3, #32
 8002048:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800204a:	2301      	movs	r3, #1
 800204c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002052:	2300      	movs	r3, #0
 8002054:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002056:	f107 0314 	add.w	r3, r7, #20
 800205a:	4619      	mov	r1, r3
 800205c:	480b      	ldr	r0, [pc, #44]	; (800208c <MX_GPIO_Init+0xfc>)
 800205e:	f000 fce3 	bl	8002a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_CE_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_CE_Pin|LCD_RST_Pin;
 8002062:	2307      	movs	r3, #7
 8002064:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002066:	2301      	movs	r3, #1
 8002068:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206e:	2300      	movs	r3, #0
 8002070:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002072:	f107 0314 	add.w	r3, r7, #20
 8002076:	4619      	mov	r1, r3
 8002078:	4805      	ldr	r0, [pc, #20]	; (8002090 <MX_GPIO_Init+0x100>)
 800207a:	f000 fcd5 	bl	8002a28 <HAL_GPIO_Init>

}
 800207e:	bf00      	nop
 8002080:	3728      	adds	r7, #40	; 0x28
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40023800 	.word	0x40023800
 800208c:	40020000 	.word	0x40020000
 8002090:	40020400 	.word	0x40020400
 8002094:	40020800 	.word	0x40020800

08002098 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800209c:	b672      	cpsid	i
}
 800209e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020a0:	e7fe      	b.n	80020a0 <Error_Handler+0x8>
	...

080020a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	607b      	str	r3, [r7, #4]
 80020ae:	4b10      	ldr	r3, [pc, #64]	; (80020f0 <HAL_MspInit+0x4c>)
 80020b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b2:	4a0f      	ldr	r2, [pc, #60]	; (80020f0 <HAL_MspInit+0x4c>)
 80020b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020b8:	6453      	str	r3, [r2, #68]	; 0x44
 80020ba:	4b0d      	ldr	r3, [pc, #52]	; (80020f0 <HAL_MspInit+0x4c>)
 80020bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020c2:	607b      	str	r3, [r7, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	603b      	str	r3, [r7, #0]
 80020ca:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <HAL_MspInit+0x4c>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	4a08      	ldr	r2, [pc, #32]	; (80020f0 <HAL_MspInit+0x4c>)
 80020d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d4:	6413      	str	r3, [r2, #64]	; 0x40
 80020d6:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <HAL_MspInit+0x4c>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020de:	603b      	str	r3, [r7, #0]
 80020e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80020e2:	2007      	movs	r0, #7
 80020e4:	f000 fc6c 	bl	80029c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020e8:	bf00      	nop
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40023800 	.word	0x40023800

080020f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b08a      	sub	sp, #40	; 0x28
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020fc:	f107 0314 	add.w	r3, r7, #20
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	60da      	str	r2, [r3, #12]
 800210a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a19      	ldr	r2, [pc, #100]	; (8002178 <HAL_I2C_MspInit+0x84>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d12b      	bne.n	800216e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	613b      	str	r3, [r7, #16]
 800211a:	4b18      	ldr	r3, [pc, #96]	; (800217c <HAL_I2C_MspInit+0x88>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	4a17      	ldr	r2, [pc, #92]	; (800217c <HAL_I2C_MspInit+0x88>)
 8002120:	f043 0302 	orr.w	r3, r3, #2
 8002124:	6313      	str	r3, [r2, #48]	; 0x30
 8002126:	4b15      	ldr	r3, [pc, #84]	; (800217c <HAL_I2C_MspInit+0x88>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	613b      	str	r3, [r7, #16]
 8002130:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002132:	23c0      	movs	r3, #192	; 0xc0
 8002134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002136:	2312      	movs	r3, #18
 8002138:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213e:	2303      	movs	r3, #3
 8002140:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002142:	2304      	movs	r3, #4
 8002144:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002146:	f107 0314 	add.w	r3, r7, #20
 800214a:	4619      	mov	r1, r3
 800214c:	480c      	ldr	r0, [pc, #48]	; (8002180 <HAL_I2C_MspInit+0x8c>)
 800214e:	f000 fc6b 	bl	8002a28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	4b09      	ldr	r3, [pc, #36]	; (800217c <HAL_I2C_MspInit+0x88>)
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	4a08      	ldr	r2, [pc, #32]	; (800217c <HAL_I2C_MspInit+0x88>)
 800215c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002160:	6413      	str	r3, [r2, #64]	; 0x40
 8002162:	4b06      	ldr	r3, [pc, #24]	; (800217c <HAL_I2C_MspInit+0x88>)
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800216e:	bf00      	nop
 8002170:	3728      	adds	r7, #40	; 0x28
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40005400 	.word	0x40005400
 800217c:	40023800 	.word	0x40023800
 8002180:	40020400 	.word	0x40020400

08002184 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b08a      	sub	sp, #40	; 0x28
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218c:	f107 0314 	add.w	r3, r7, #20
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]
 800219a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a28      	ldr	r2, [pc, #160]	; (8002244 <HAL_SPI_MspInit+0xc0>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d14a      	bne.n	800223c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	4b27      	ldr	r3, [pc, #156]	; (8002248 <HAL_SPI_MspInit+0xc4>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	4a26      	ldr	r2, [pc, #152]	; (8002248 <HAL_SPI_MspInit+0xc4>)
 80021b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021b4:	6413      	str	r3, [r2, #64]	; 0x40
 80021b6:	4b24      	ldr	r3, [pc, #144]	; (8002248 <HAL_SPI_MspInit+0xc4>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021be:	613b      	str	r3, [r7, #16]
 80021c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	4b20      	ldr	r3, [pc, #128]	; (8002248 <HAL_SPI_MspInit+0xc4>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	4a1f      	ldr	r2, [pc, #124]	; (8002248 <HAL_SPI_MspInit+0xc4>)
 80021cc:	f043 0304 	orr.w	r3, r3, #4
 80021d0:	6313      	str	r3, [r2, #48]	; 0x30
 80021d2:	4b1d      	ldr	r3, [pc, #116]	; (8002248 <HAL_SPI_MspInit+0xc4>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	f003 0304 	and.w	r3, r3, #4
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	4b19      	ldr	r3, [pc, #100]	; (8002248 <HAL_SPI_MspInit+0xc4>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	4a18      	ldr	r2, [pc, #96]	; (8002248 <HAL_SPI_MspInit+0xc4>)
 80021e8:	f043 0302 	orr.w	r3, r3, #2
 80021ec:	6313      	str	r3, [r2, #48]	; 0x30
 80021ee:	4b16      	ldr	r3, [pc, #88]	; (8002248 <HAL_SPI_MspInit+0xc4>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	60bb      	str	r3, [r7, #8]
 80021f8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80021fa:	2308      	movs	r3, #8
 80021fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fe:	2302      	movs	r3, #2
 8002200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002206:	2303      	movs	r3, #3
 8002208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800220a:	2305      	movs	r3, #5
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800220e:	f107 0314 	add.w	r3, r7, #20
 8002212:	4619      	mov	r1, r3
 8002214:	480d      	ldr	r0, [pc, #52]	; (800224c <HAL_SPI_MspInit+0xc8>)
 8002216:	f000 fc07 	bl	8002a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800221a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800221e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002220:	2302      	movs	r3, #2
 8002222:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002228:	2303      	movs	r3, #3
 800222a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800222c:	2305      	movs	r3, #5
 800222e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002230:	f107 0314 	add.w	r3, r7, #20
 8002234:	4619      	mov	r1, r3
 8002236:	4806      	ldr	r0, [pc, #24]	; (8002250 <HAL_SPI_MspInit+0xcc>)
 8002238:	f000 fbf6 	bl	8002a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800223c:	bf00      	nop
 800223e:	3728      	adds	r7, #40	; 0x28
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40003800 	.word	0x40003800
 8002248:	40023800 	.word	0x40023800
 800224c:	40020800 	.word	0x40020800
 8002250:	40020400 	.word	0x40020400

08002254 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08a      	sub	sp, #40	; 0x28
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800225c:	f107 0314 	add.w	r3, r7, #20
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	60da      	str	r2, [r3, #12]
 800226a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a19      	ldr	r2, [pc, #100]	; (80022d8 <HAL_UART_MspInit+0x84>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d12b      	bne.n	80022ce <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	613b      	str	r3, [r7, #16]
 800227a:	4b18      	ldr	r3, [pc, #96]	; (80022dc <HAL_UART_MspInit+0x88>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	4a17      	ldr	r2, [pc, #92]	; (80022dc <HAL_UART_MspInit+0x88>)
 8002280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002284:	6413      	str	r3, [r2, #64]	; 0x40
 8002286:	4b15      	ldr	r3, [pc, #84]	; (80022dc <HAL_UART_MspInit+0x88>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228e:	613b      	str	r3, [r7, #16]
 8002290:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	4b11      	ldr	r3, [pc, #68]	; (80022dc <HAL_UART_MspInit+0x88>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	4a10      	ldr	r2, [pc, #64]	; (80022dc <HAL_UART_MspInit+0x88>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	6313      	str	r3, [r2, #48]	; 0x30
 80022a2:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <HAL_UART_MspInit+0x88>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80022ae:	230c      	movs	r3, #12
 80022b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b2:	2302      	movs	r3, #2
 80022b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ba:	2303      	movs	r3, #3
 80022bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022be:	2307      	movs	r3, #7
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c2:	f107 0314 	add.w	r3, r7, #20
 80022c6:	4619      	mov	r1, r3
 80022c8:	4805      	ldr	r0, [pc, #20]	; (80022e0 <HAL_UART_MspInit+0x8c>)
 80022ca:	f000 fbad 	bl	8002a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80022ce:	bf00      	nop
 80022d0:	3728      	adds	r7, #40	; 0x28
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40004400 	.word	0x40004400
 80022dc:	40023800 	.word	0x40023800
 80022e0:	40020000 	.word	0x40020000

080022e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022e8:	e7fe      	b.n	80022e8 <NMI_Handler+0x4>

080022ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022ea:	b480      	push	{r7}
 80022ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ee:	e7fe      	b.n	80022ee <HardFault_Handler+0x4>

080022f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022f4:	e7fe      	b.n	80022f4 <MemManage_Handler+0x4>

080022f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022f6:	b480      	push	{r7}
 80022f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022fa:	e7fe      	b.n	80022fa <BusFault_Handler+0x4>

080022fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002300:	e7fe      	b.n	8002300 <UsageFault_Handler+0x4>

08002302 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002302:	b480      	push	{r7}
 8002304:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800231e:	b480      	push	{r7}
 8002320:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002322:	bf00      	nop
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002330:	f000 fa50 	bl	80027d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002334:	bf00      	nop
 8002336:	bd80      	pop	{r7, pc}

08002338 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
	return 1;
 800233c:	2301      	movs	r3, #1
}
 800233e:	4618      	mov	r0, r3
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <_kill>:

int _kill(int pid, int sig)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002352:	f002 ffb1 	bl	80052b8 <__errno>
 8002356:	4603      	mov	r3, r0
 8002358:	2216      	movs	r2, #22
 800235a:	601a      	str	r2, [r3, #0]
	return -1;
 800235c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002360:	4618      	mov	r0, r3
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <_exit>:

void _exit (int status)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002370:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7ff ffe7 	bl	8002348 <_kill>
	while (1) {}		/* Make sure we hang here */
 800237a:	e7fe      	b.n	800237a <_exit+0x12>

0800237c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	e00a      	b.n	80023a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800238e:	f3af 8000 	nop.w
 8002392:	4601      	mov	r1, r0
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	1c5a      	adds	r2, r3, #1
 8002398:	60ba      	str	r2, [r7, #8]
 800239a:	b2ca      	uxtb	r2, r1
 800239c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	3301      	adds	r3, #1
 80023a2:	617b      	str	r3, [r7, #20]
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	dbf0      	blt.n	800238e <_read+0x12>
	}

return len;
 80023ac:	687b      	ldr	r3, [r7, #4]
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3718      	adds	r7, #24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b086      	sub	sp, #24
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	60f8      	str	r0, [r7, #12]
 80023be:	60b9      	str	r1, [r7, #8]
 80023c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]
 80023c6:	e009      	b.n	80023dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	1c5a      	adds	r2, r3, #1
 80023cc:	60ba      	str	r2, [r7, #8]
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	3301      	adds	r3, #1
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	dbf1      	blt.n	80023c8 <_write+0x12>
	}
	return len;
 80023e4:	687b      	ldr	r3, [r7, #4]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <_close>:

int _close(int file)
{
 80023ee:	b480      	push	{r7}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
	return -1;
 80023f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
 800240e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002416:	605a      	str	r2, [r3, #4]
	return 0;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <_isatty>:

int _isatty(int file)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
	return 1;
 800242e:	2301      	movs	r3, #1
}
 8002430:	4618      	mov	r0, r3
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
	return 0;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
	...

08002458 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002460:	4a14      	ldr	r2, [pc, #80]	; (80024b4 <_sbrk+0x5c>)
 8002462:	4b15      	ldr	r3, [pc, #84]	; (80024b8 <_sbrk+0x60>)
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800246c:	4b13      	ldr	r3, [pc, #76]	; (80024bc <_sbrk+0x64>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d102      	bne.n	800247a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002474:	4b11      	ldr	r3, [pc, #68]	; (80024bc <_sbrk+0x64>)
 8002476:	4a12      	ldr	r2, [pc, #72]	; (80024c0 <_sbrk+0x68>)
 8002478:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800247a:	4b10      	ldr	r3, [pc, #64]	; (80024bc <_sbrk+0x64>)
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4413      	add	r3, r2
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	429a      	cmp	r2, r3
 8002486:	d207      	bcs.n	8002498 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002488:	f002 ff16 	bl	80052b8 <__errno>
 800248c:	4603      	mov	r3, r0
 800248e:	220c      	movs	r2, #12
 8002490:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002492:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002496:	e009      	b.n	80024ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002498:	4b08      	ldr	r3, [pc, #32]	; (80024bc <_sbrk+0x64>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800249e:	4b07      	ldr	r3, [pc, #28]	; (80024bc <_sbrk+0x64>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4413      	add	r3, r2
 80024a6:	4a05      	ldr	r2, [pc, #20]	; (80024bc <_sbrk+0x64>)
 80024a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024aa:	68fb      	ldr	r3, [r7, #12]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3718      	adds	r7, #24
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	20020000 	.word	0x20020000
 80024b8:	00000400 	.word	0x00000400
 80024bc:	20000438 	.word	0x20000438
 80024c0:	20000450 	.word	0x20000450

080024c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024c8:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <SystemInit+0x20>)
 80024ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ce:	4a05      	ldr	r2, [pc, #20]	; (80024e4 <SystemInit+0x20>)
 80024d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024d8:	bf00      	nop
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <LCD_Init>:
uint8_t spiOK = 0U;

/**
 * Initialize LCD.
 */
void LCD_Init(void) {
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  LCD_Reset();
 80024ec:	f000 f810 	bl	8002510 <LCD_Reset>
  LCD_Write_Command(0x21);
 80024f0:	2021      	movs	r0, #33	; 0x21
 80024f2:	f000 f8a3 	bl	800263c <LCD_Write_Command>
  LCD_Write_Command(0xD0);
 80024f6:	20d0      	movs	r0, #208	; 0xd0
 80024f8:	f000 f8a0 	bl	800263c <LCD_Write_Command>
  LCD_Write_Command(0x20);
 80024fc:	2020      	movs	r0, #32
 80024fe:	f000 f89d 	bl	800263c <LCD_Write_Command>
  LCD_Write_Command(0x0C);
 8002502:	200c      	movs	r0, #12
 8002504:	f000 f89a 	bl	800263c <LCD_Write_Command>
  LCD_Clear();
 8002508:	f000 f830 	bl	800256c <LCD_Clear>
}
 800250c:	bf00      	nop
 800250e:	bd80      	pop	{r7, pc}

08002510 <LCD_Reset>:

/**
 * Reset LCD.
 */
void LCD_Reset(void) {
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LCD_RESET_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8002514:	2200      	movs	r2, #0
 8002516:	2104      	movs	r1, #4
 8002518:	4806      	ldr	r0, [pc, #24]	; (8002534 <LCD_Reset+0x24>)
 800251a:	f000 fc09 	bl	8002d30 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 800251e:	2032      	movs	r0, #50	; 0x32
 8002520:	f000 f978 	bl	8002814 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8002524:	2201      	movs	r2, #1
 8002526:	2104      	movs	r1, #4
 8002528:	4802      	ldr	r0, [pc, #8]	; (8002534 <LCD_Reset+0x24>)
 800252a:	f000 fc01 	bl	8002d30 <HAL_GPIO_WritePin>
}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40020400 	.word	0x40020400

08002538 <LCD_Set_Postion>:
/**
 * Set LCD cursor position.
 * @param PosX X Position
 * @param PosY Y Position
 */
void LCD_Set_Postion(uint8_t PosX, uint8_t PosY) {
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	460a      	mov	r2, r1
 8002542:	71fb      	strb	r3, [r7, #7]
 8002544:	4613      	mov	r3, r2
 8002546:	71bb      	strb	r3, [r7, #6]
  LCD_Write_Command(0x40 | PosY);
 8002548:	79bb      	ldrb	r3, [r7, #6]
 800254a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800254e:	b2db      	uxtb	r3, r3
 8002550:	4618      	mov	r0, r3
 8002552:	f000 f873 	bl	800263c <LCD_Write_Command>
  LCD_Write_Command(0x80 | PosX);
 8002556:	79fb      	ldrb	r3, [r7, #7]
 8002558:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800255c:	b2db      	uxtb	r3, r3
 800255e:	4618      	mov	r0, r3
 8002560:	f000 f86c 	bl	800263c <LCD_Write_Command>
}
 8002564:	bf00      	nop
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <LCD_Clear>:

/**
 * Clear all contents on LCD.
 */
void LCD_Clear(void) {
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
  uint8_t t;
  uint8_t k;
  LCD_Set_Postion(0,0);
 8002572:	2100      	movs	r1, #0
 8002574:	2000      	movs	r0, #0
 8002576:	f7ff ffdf 	bl	8002538 <LCD_Set_Postion>
  for(t=0;t<6;t++)
 800257a:	2300      	movs	r3, #0
 800257c:	71fb      	strb	r3, [r7, #7]
 800257e:	e00e      	b.n	800259e <LCD_Clear+0x32>
  {
    for(k=0;k<84;k++)
 8002580:	2300      	movs	r3, #0
 8002582:	71bb      	strb	r3, [r7, #6]
 8002584:	e005      	b.n	8002592 <LCD_Clear+0x26>
    {
      LCD_Write_Data(0x00);
 8002586:	2000      	movs	r0, #0
 8002588:	f000 f880 	bl	800268c <LCD_Write_Data>
    for(k=0;k<84;k++)
 800258c:	79bb      	ldrb	r3, [r7, #6]
 800258e:	3301      	adds	r3, #1
 8002590:	71bb      	strb	r3, [r7, #6]
 8002592:	79bb      	ldrb	r3, [r7, #6]
 8002594:	2b53      	cmp	r3, #83	; 0x53
 8002596:	d9f6      	bls.n	8002586 <LCD_Clear+0x1a>
  for(t=0;t<6;t++)
 8002598:	79fb      	ldrb	r3, [r7, #7]
 800259a:	3301      	adds	r3, #1
 800259c:	71fb      	strb	r3, [r7, #7]
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	2b05      	cmp	r3, #5
 80025a2:	d9ed      	bls.n	8002580 <LCD_Clear+0x14>
    }
  }
}
 80025a4:	bf00      	nop
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
	...

080025b0 <LCD_Write_Char>:

/**
 * Write a single char to LCD.
 * @param ch char to write.
 */
void LCD_Write_Char(uint8_t ch) {
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	71fb      	strb	r3, [r7, #7]
  uint8_t line;
  ch -= 32;
 80025ba:	79fb      	ldrb	r3, [r7, #7]
 80025bc:	3b20      	subs	r3, #32
 80025be:	71fb      	strb	r3, [r7, #7]
  for (line=0; line<6; line++) LCD_Write_Data(font6x8[ch][line]);
 80025c0:	2300      	movs	r3, #0
 80025c2:	73fb      	strb	r3, [r7, #15]
 80025c4:	e00f      	b.n	80025e6 <LCD_Write_Char+0x36>
 80025c6:	79fa      	ldrb	r2, [r7, #7]
 80025c8:	7bf9      	ldrb	r1, [r7, #15]
 80025ca:	480b      	ldr	r0, [pc, #44]	; (80025f8 <LCD_Write_Char+0x48>)
 80025cc:	4613      	mov	r3, r2
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	4413      	add	r3, r2
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	4403      	add	r3, r0
 80025d6:	440b      	add	r3, r1
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 f856 	bl	800268c <LCD_Write_Data>
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	3301      	adds	r3, #1
 80025e4:	73fb      	strb	r3, [r7, #15]
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
 80025e8:	2b05      	cmp	r3, #5
 80025ea:	d9ec      	bls.n	80025c6 <LCD_Write_Char+0x16>
}
 80025ec:	bf00      	nop
 80025ee:	bf00      	nop
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	080081e0 	.word	0x080081e0

080025fc <LCD_Write_String>:
 * Write a string to LCD.
 * @param PosX X start point
 * @param PosY Y start point
 * @param str  string to write.
 */
void LCD_Write_String(uint8_t PosX, uint8_t PosY, char * str) {
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	603a      	str	r2, [r7, #0]
 8002606:	71fb      	strb	r3, [r7, #7]
 8002608:	460b      	mov	r3, r1
 800260a:	71bb      	strb	r3, [r7, #6]
  LCD_Set_Postion(PosX, PosY);
 800260c:	79ba      	ldrb	r2, [r7, #6]
 800260e:	79fb      	ldrb	r3, [r7, #7]
 8002610:	4611      	mov	r1, r2
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff ff90 	bl	8002538 <LCD_Set_Postion>
  while(* str) {
 8002618:	e007      	b.n	800262a <LCD_Write_String+0x2e>
    LCD_Write_Char(* str);
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff ffc6 	bl	80025b0 <LCD_Write_Char>
    str ++;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	3301      	adds	r3, #1
 8002628:	603b      	str	r3, [r7, #0]
  while(* str) {
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f3      	bne.n	800261a <LCD_Write_String+0x1e>
  }
}
 8002632:	bf00      	nop
 8002634:	bf00      	nop
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <LCD_Write_Command>:

/**
 * Write LCD command to SPI
 * @param cmd command to write.
 */
void LCD_Write_Command(uint8_t cmd) {
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_RESET);
 8002646:	2200      	movs	r2, #0
 8002648:	2102      	movs	r1, #2
 800264a:	480e      	ldr	r0, [pc, #56]	; (8002684 <LCD_Write_Command+0x48>)
 800264c:	f000 fb70 	bl	8002d30 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8002650:	2200      	movs	r2, #0
 8002652:	2101      	movs	r1, #1
 8002654:	480b      	ldr	r0, [pc, #44]	; (8002684 <LCD_Write_Command+0x48>)
 8002656:	f000 fb6b 	bl	8002d30 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&LCD_SPI_INTERFACE, &cmd, 0x01, 1000);
 800265a:	1df9      	adds	r1, r7, #7
 800265c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002660:	2201      	movs	r2, #1
 8002662:	4809      	ldr	r0, [pc, #36]	; (8002688 <LCD_Write_Command+0x4c>)
 8002664:	f002 f85f 	bl	8004726 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_SET);
 8002668:	2201      	movs	r2, #1
 800266a:	2102      	movs	r1, #2
 800266c:	4805      	ldr	r0, [pc, #20]	; (8002684 <LCD_Write_Command+0x48>)
 800266e:	f000 fb5f 	bl	8002d30 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8002672:	2201      	movs	r2, #1
 8002674:	2101      	movs	r1, #1
 8002676:	4803      	ldr	r0, [pc, #12]	; (8002684 <LCD_Write_Command+0x48>)
 8002678:	f000 fb5a 	bl	8002d30 <HAL_GPIO_WritePin>
}
 800267c:	bf00      	nop
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40020400 	.word	0x40020400
 8002688:	2000024c 	.word	0x2000024c

0800268c <LCD_Write_Data>:

/**
 * Write LCD data to SPI
 * @param data data to write.
 */
void LCD_Write_Data(uint8_t data) {
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_RESET);
 8002696:	2200      	movs	r2, #0
 8002698:	2102      	movs	r1, #2
 800269a:	480e      	ldr	r0, [pc, #56]	; (80026d4 <LCD_Write_Data+0x48>)
 800269c:	f000 fb48 	bl	8002d30 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80026a0:	2201      	movs	r2, #1
 80026a2:	2101      	movs	r1, #1
 80026a4:	480b      	ldr	r0, [pc, #44]	; (80026d4 <LCD_Write_Data+0x48>)
 80026a6:	f000 fb43 	bl	8002d30 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&LCD_SPI_INTERFACE, &data, 0x01, 1000);
 80026aa:	1df9      	adds	r1, r7, #7
 80026ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026b0:	2201      	movs	r2, #1
 80026b2:	4809      	ldr	r0, [pc, #36]	; (80026d8 <LCD_Write_Data+0x4c>)
 80026b4:	f002 f837 	bl	8004726 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LCD_CE_PORT, LCD_CE_PIN, GPIO_PIN_SET);
 80026b8:	2201      	movs	r2, #1
 80026ba:	2102      	movs	r1, #2
 80026bc:	4805      	ldr	r0, [pc, #20]	; (80026d4 <LCD_Write_Data+0x48>)
 80026be:	f000 fb37 	bl	8002d30 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 80026c2:	2200      	movs	r2, #0
 80026c4:	2101      	movs	r1, #1
 80026c6:	4803      	ldr	r0, [pc, #12]	; (80026d4 <LCD_Write_Data+0x48>)
 80026c8:	f000 fb32 	bl	8002d30 <HAL_GPIO_WritePin>
}
 80026cc:	bf00      	nop
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40020400 	.word	0x40020400
 80026d8:	2000024c 	.word	0x2000024c

080026dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80026dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002714 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026e0:	480d      	ldr	r0, [pc, #52]	; (8002718 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026e2:	490e      	ldr	r1, [pc, #56]	; (800271c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026e4:	4a0e      	ldr	r2, [pc, #56]	; (8002720 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026e8:	e002      	b.n	80026f0 <LoopCopyDataInit>

080026ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ee:	3304      	adds	r3, #4

080026f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026f4:	d3f9      	bcc.n	80026ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026f6:	4a0b      	ldr	r2, [pc, #44]	; (8002724 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026f8:	4c0b      	ldr	r4, [pc, #44]	; (8002728 <LoopFillZerobss+0x26>)
  movs r3, #0
 80026fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026fc:	e001      	b.n	8002702 <LoopFillZerobss>

080026fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002700:	3204      	adds	r2, #4

08002702 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002702:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002704:	d3fb      	bcc.n	80026fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002706:	f7ff fedd 	bl	80024c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800270a:	f002 fddb 	bl	80052c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800270e:	f7ff fa53 	bl	8001bb8 <main>
  bx  lr    
 8002712:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002714:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002718:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800271c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002720:	080087f4 	.word	0x080087f4
  ldr r2, =_sbss
 8002724:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002728:	20000450 	.word	0x20000450

0800272c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800272c:	e7fe      	b.n	800272c <ADC_IRQHandler>
	...

08002730 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002734:	4b0e      	ldr	r3, [pc, #56]	; (8002770 <HAL_Init+0x40>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a0d      	ldr	r2, [pc, #52]	; (8002770 <HAL_Init+0x40>)
 800273a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800273e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002740:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <HAL_Init+0x40>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a0a      	ldr	r2, [pc, #40]	; (8002770 <HAL_Init+0x40>)
 8002746:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800274a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800274c:	4b08      	ldr	r3, [pc, #32]	; (8002770 <HAL_Init+0x40>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a07      	ldr	r2, [pc, #28]	; (8002770 <HAL_Init+0x40>)
 8002752:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002756:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002758:	2003      	movs	r0, #3
 800275a:	f000 f931 	bl	80029c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800275e:	2000      	movs	r0, #0
 8002760:	f000 f808 	bl	8002774 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002764:	f7ff fc9e 	bl	80020a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40023c00 	.word	0x40023c00

08002774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800277c:	4b12      	ldr	r3, [pc, #72]	; (80027c8 <HAL_InitTick+0x54>)
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	4b12      	ldr	r3, [pc, #72]	; (80027cc <HAL_InitTick+0x58>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	4619      	mov	r1, r3
 8002786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800278a:	fbb3 f3f1 	udiv	r3, r3, r1
 800278e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002792:	4618      	mov	r0, r3
 8002794:	f000 f93b 	bl	8002a0e <HAL_SYSTICK_Config>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e00e      	b.n	80027c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b0f      	cmp	r3, #15
 80027a6:	d80a      	bhi.n	80027be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027a8:	2200      	movs	r2, #0
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027b0:	f000 f911 	bl	80029d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027b4:	4a06      	ldr	r2, [pc, #24]	; (80027d0 <HAL_InitTick+0x5c>)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
 80027bc:	e000      	b.n	80027c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	20000000 	.word	0x20000000
 80027cc:	20000008 	.word	0x20000008
 80027d0:	20000004 	.word	0x20000004

080027d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027d8:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <HAL_IncTick+0x20>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	461a      	mov	r2, r3
 80027de:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <HAL_IncTick+0x24>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4413      	add	r3, r2
 80027e4:	4a04      	ldr	r2, [pc, #16]	; (80027f8 <HAL_IncTick+0x24>)
 80027e6:	6013      	str	r3, [r2, #0]
}
 80027e8:	bf00      	nop
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	20000008 	.word	0x20000008
 80027f8:	2000043c 	.word	0x2000043c

080027fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002800:	4b03      	ldr	r3, [pc, #12]	; (8002810 <HAL_GetTick+0x14>)
 8002802:	681b      	ldr	r3, [r3, #0]
}
 8002804:	4618      	mov	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	2000043c 	.word	0x2000043c

08002814 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800281c:	f7ff ffee 	bl	80027fc <HAL_GetTick>
 8002820:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800282c:	d005      	beq.n	800283a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800282e:	4b0a      	ldr	r3, [pc, #40]	; (8002858 <HAL_Delay+0x44>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	461a      	mov	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4413      	add	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800283a:	bf00      	nop
 800283c:	f7ff ffde 	bl	80027fc <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	429a      	cmp	r2, r3
 800284a:	d8f7      	bhi.n	800283c <HAL_Delay+0x28>
  {
  }
}
 800284c:	bf00      	nop
 800284e:	bf00      	nop
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	20000008 	.word	0x20000008

0800285c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800286c:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <__NVIC_SetPriorityGrouping+0x44>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002878:	4013      	ands	r3, r2
 800287a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002884:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800288c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800288e:	4a04      	ldr	r2, [pc, #16]	; (80028a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	60d3      	str	r3, [r2, #12]
}
 8002894:	bf00      	nop
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	e000ed00 	.word	0xe000ed00

080028a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028a8:	4b04      	ldr	r3, [pc, #16]	; (80028bc <__NVIC_GetPriorityGrouping+0x18>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	0a1b      	lsrs	r3, r3, #8
 80028ae:	f003 0307 	and.w	r3, r3, #7
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	e000ed00 	.word	0xe000ed00

080028c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	6039      	str	r1, [r7, #0]
 80028ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	db0a      	blt.n	80028ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	b2da      	uxtb	r2, r3
 80028d8:	490c      	ldr	r1, [pc, #48]	; (800290c <__NVIC_SetPriority+0x4c>)
 80028da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028de:	0112      	lsls	r2, r2, #4
 80028e0:	b2d2      	uxtb	r2, r2
 80028e2:	440b      	add	r3, r1
 80028e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028e8:	e00a      	b.n	8002900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	4908      	ldr	r1, [pc, #32]	; (8002910 <__NVIC_SetPriority+0x50>)
 80028f0:	79fb      	ldrb	r3, [r7, #7]
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	3b04      	subs	r3, #4
 80028f8:	0112      	lsls	r2, r2, #4
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	440b      	add	r3, r1
 80028fe:	761a      	strb	r2, [r3, #24]
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	e000e100 	.word	0xe000e100
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002914:	b480      	push	{r7}
 8002916:	b089      	sub	sp, #36	; 0x24
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	f1c3 0307 	rsb	r3, r3, #7
 800292e:	2b04      	cmp	r3, #4
 8002930:	bf28      	it	cs
 8002932:	2304      	movcs	r3, #4
 8002934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	3304      	adds	r3, #4
 800293a:	2b06      	cmp	r3, #6
 800293c:	d902      	bls.n	8002944 <NVIC_EncodePriority+0x30>
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	3b03      	subs	r3, #3
 8002942:	e000      	b.n	8002946 <NVIC_EncodePriority+0x32>
 8002944:	2300      	movs	r3, #0
 8002946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002948:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	43da      	mvns	r2, r3
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	401a      	ands	r2, r3
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800295c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	fa01 f303 	lsl.w	r3, r1, r3
 8002966:	43d9      	mvns	r1, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800296c:	4313      	orrs	r3, r2
         );
}
 800296e:	4618      	mov	r0, r3
 8002970:	3724      	adds	r7, #36	; 0x24
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
	...

0800297c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3b01      	subs	r3, #1
 8002988:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800298c:	d301      	bcc.n	8002992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800298e:	2301      	movs	r3, #1
 8002990:	e00f      	b.n	80029b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002992:	4a0a      	ldr	r2, [pc, #40]	; (80029bc <SysTick_Config+0x40>)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3b01      	subs	r3, #1
 8002998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800299a:	210f      	movs	r1, #15
 800299c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029a0:	f7ff ff8e 	bl	80028c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029a4:	4b05      	ldr	r3, [pc, #20]	; (80029bc <SysTick_Config+0x40>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029aa:	4b04      	ldr	r3, [pc, #16]	; (80029bc <SysTick_Config+0x40>)
 80029ac:	2207      	movs	r2, #7
 80029ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	e000e010 	.word	0xe000e010

080029c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f7ff ff47 	bl	800285c <__NVIC_SetPriorityGrouping>
}
 80029ce:	bf00      	nop
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b086      	sub	sp, #24
 80029da:	af00      	add	r7, sp, #0
 80029dc:	4603      	mov	r3, r0
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	607a      	str	r2, [r7, #4]
 80029e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029e4:	2300      	movs	r3, #0
 80029e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029e8:	f7ff ff5c 	bl	80028a4 <__NVIC_GetPriorityGrouping>
 80029ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	68b9      	ldr	r1, [r7, #8]
 80029f2:	6978      	ldr	r0, [r7, #20]
 80029f4:	f7ff ff8e 	bl	8002914 <NVIC_EncodePriority>
 80029f8:	4602      	mov	r2, r0
 80029fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029fe:	4611      	mov	r1, r2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff ff5d 	bl	80028c0 <__NVIC_SetPriority>
}
 8002a06:	bf00      	nop
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b082      	sub	sp, #8
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7ff ffb0 	bl	800297c <SysTick_Config>
 8002a1c:	4603      	mov	r3, r0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
	...

08002a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b089      	sub	sp, #36	; 0x24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a36:	2300      	movs	r3, #0
 8002a38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61fb      	str	r3, [r7, #28]
 8002a42:	e159      	b.n	8002cf8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a44:	2201      	movs	r2, #1
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	4013      	ands	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	f040 8148 	bne.w	8002cf2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f003 0303 	and.w	r3, r3, #3
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d005      	beq.n	8002a7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d130      	bne.n	8002adc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	2203      	movs	r2, #3
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	68da      	ldr	r2, [r3, #12]
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4013      	ands	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	091b      	lsrs	r3, r3, #4
 8002ac6:	f003 0201 	and.w	r2, r3, #1
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f003 0303 	and.w	r3, r3, #3
 8002ae4:	2b03      	cmp	r3, #3
 8002ae6:	d017      	beq.n	8002b18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	2203      	movs	r2, #3
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	43db      	mvns	r3, r3
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4013      	ands	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f003 0303 	and.w	r3, r3, #3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d123      	bne.n	8002b6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	08da      	lsrs	r2, r3, #3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3208      	adds	r2, #8
 8002b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	220f      	movs	r2, #15
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	43db      	mvns	r3, r3
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4013      	ands	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	691a      	ldr	r2, [r3, #16]
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	08da      	lsrs	r2, r3, #3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	3208      	adds	r2, #8
 8002b66:	69b9      	ldr	r1, [r7, #24]
 8002b68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	2203      	movs	r2, #3
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	4013      	ands	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f003 0203 	and.w	r2, r3, #3
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 80a2 	beq.w	8002cf2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	4b57      	ldr	r3, [pc, #348]	; (8002d10 <HAL_GPIO_Init+0x2e8>)
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb6:	4a56      	ldr	r2, [pc, #344]	; (8002d10 <HAL_GPIO_Init+0x2e8>)
 8002bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8002bbe:	4b54      	ldr	r3, [pc, #336]	; (8002d10 <HAL_GPIO_Init+0x2e8>)
 8002bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bca:	4a52      	ldr	r2, [pc, #328]	; (8002d14 <HAL_GPIO_Init+0x2ec>)
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	089b      	lsrs	r3, r3, #2
 8002bd0:	3302      	adds	r3, #2
 8002bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	f003 0303 	and.w	r3, r3, #3
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	220f      	movs	r2, #15
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	43db      	mvns	r3, r3
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	4013      	ands	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a49      	ldr	r2, [pc, #292]	; (8002d18 <HAL_GPIO_Init+0x2f0>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d019      	beq.n	8002c2a <HAL_GPIO_Init+0x202>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a48      	ldr	r2, [pc, #288]	; (8002d1c <HAL_GPIO_Init+0x2f4>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d013      	beq.n	8002c26 <HAL_GPIO_Init+0x1fe>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a47      	ldr	r2, [pc, #284]	; (8002d20 <HAL_GPIO_Init+0x2f8>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d00d      	beq.n	8002c22 <HAL_GPIO_Init+0x1fa>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a46      	ldr	r2, [pc, #280]	; (8002d24 <HAL_GPIO_Init+0x2fc>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d007      	beq.n	8002c1e <HAL_GPIO_Init+0x1f6>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a45      	ldr	r2, [pc, #276]	; (8002d28 <HAL_GPIO_Init+0x300>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d101      	bne.n	8002c1a <HAL_GPIO_Init+0x1f2>
 8002c16:	2304      	movs	r3, #4
 8002c18:	e008      	b.n	8002c2c <HAL_GPIO_Init+0x204>
 8002c1a:	2307      	movs	r3, #7
 8002c1c:	e006      	b.n	8002c2c <HAL_GPIO_Init+0x204>
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e004      	b.n	8002c2c <HAL_GPIO_Init+0x204>
 8002c22:	2302      	movs	r3, #2
 8002c24:	e002      	b.n	8002c2c <HAL_GPIO_Init+0x204>
 8002c26:	2301      	movs	r3, #1
 8002c28:	e000      	b.n	8002c2c <HAL_GPIO_Init+0x204>
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	69fa      	ldr	r2, [r7, #28]
 8002c2e:	f002 0203 	and.w	r2, r2, #3
 8002c32:	0092      	lsls	r2, r2, #2
 8002c34:	4093      	lsls	r3, r2
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c3c:	4935      	ldr	r1, [pc, #212]	; (8002d14 <HAL_GPIO_Init+0x2ec>)
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	089b      	lsrs	r3, r3, #2
 8002c42:	3302      	adds	r3, #2
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c4a:	4b38      	ldr	r3, [pc, #224]	; (8002d2c <HAL_GPIO_Init+0x304>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	43db      	mvns	r3, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4013      	ands	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c6e:	4a2f      	ldr	r2, [pc, #188]	; (8002d2c <HAL_GPIO_Init+0x304>)
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c74:	4b2d      	ldr	r3, [pc, #180]	; (8002d2c <HAL_GPIO_Init+0x304>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4013      	ands	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c98:	4a24      	ldr	r2, [pc, #144]	; (8002d2c <HAL_GPIO_Init+0x304>)
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c9e:	4b23      	ldr	r3, [pc, #140]	; (8002d2c <HAL_GPIO_Init+0x304>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4013      	ands	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cc2:	4a1a      	ldr	r2, [pc, #104]	; (8002d2c <HAL_GPIO_Init+0x304>)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cc8:	4b18      	ldr	r3, [pc, #96]	; (8002d2c <HAL_GPIO_Init+0x304>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d003      	beq.n	8002cec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cec:	4a0f      	ldr	r2, [pc, #60]	; (8002d2c <HAL_GPIO_Init+0x304>)
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	61fb      	str	r3, [r7, #28]
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	2b0f      	cmp	r3, #15
 8002cfc:	f67f aea2 	bls.w	8002a44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d00:	bf00      	nop
 8002d02:	bf00      	nop
 8002d04:	3724      	adds	r7, #36	; 0x24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	40023800 	.word	0x40023800
 8002d14:	40013800 	.word	0x40013800
 8002d18:	40020000 	.word	0x40020000
 8002d1c:	40020400 	.word	0x40020400
 8002d20:	40020800 	.word	0x40020800
 8002d24:	40020c00 	.word	0x40020c00
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	40013c00 	.word	0x40013c00

08002d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	807b      	strh	r3, [r7, #2]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d40:	787b      	ldrb	r3, [r7, #1]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d46:	887a      	ldrh	r2, [r7, #2]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d4c:	e003      	b.n	8002d56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d4e:	887b      	ldrh	r3, [r7, #2]
 8002d50:	041a      	lsls	r2, r3, #16
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	619a      	str	r2, [r3, #24]
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
	...

08002d64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e12b      	b.n	8002fce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d106      	bne.n	8002d90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7ff f9b2 	bl	80020f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2224      	movs	r2, #36	; 0x24
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 0201 	bic.w	r2, r2, #1
 8002da6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002db6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dc6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002dc8:	f001 fbfc 	bl	80045c4 <HAL_RCC_GetPCLK1Freq>
 8002dcc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	4a81      	ldr	r2, [pc, #516]	; (8002fd8 <HAL_I2C_Init+0x274>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d807      	bhi.n	8002de8 <HAL_I2C_Init+0x84>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	4a80      	ldr	r2, [pc, #512]	; (8002fdc <HAL_I2C_Init+0x278>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	bf94      	ite	ls
 8002de0:	2301      	movls	r3, #1
 8002de2:	2300      	movhi	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	e006      	b.n	8002df6 <HAL_I2C_Init+0x92>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4a7d      	ldr	r2, [pc, #500]	; (8002fe0 <HAL_I2C_Init+0x27c>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	bf94      	ite	ls
 8002df0:	2301      	movls	r3, #1
 8002df2:	2300      	movhi	r3, #0
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e0e7      	b.n	8002fce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	4a78      	ldr	r2, [pc, #480]	; (8002fe4 <HAL_I2C_Init+0x280>)
 8002e02:	fba2 2303 	umull	r2, r3, r2, r3
 8002e06:	0c9b      	lsrs	r3, r3, #18
 8002e08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68ba      	ldr	r2, [r7, #8]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	4a6a      	ldr	r2, [pc, #424]	; (8002fd8 <HAL_I2C_Init+0x274>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d802      	bhi.n	8002e38 <HAL_I2C_Init+0xd4>
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	3301      	adds	r3, #1
 8002e36:	e009      	b.n	8002e4c <HAL_I2C_Init+0xe8>
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e3e:	fb02 f303 	mul.w	r3, r2, r3
 8002e42:	4a69      	ldr	r2, [pc, #420]	; (8002fe8 <HAL_I2C_Init+0x284>)
 8002e44:	fba2 2303 	umull	r2, r3, r2, r3
 8002e48:	099b      	lsrs	r3, r3, #6
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6812      	ldr	r2, [r2, #0]
 8002e50:	430b      	orrs	r3, r1
 8002e52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e5e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	495c      	ldr	r1, [pc, #368]	; (8002fd8 <HAL_I2C_Init+0x274>)
 8002e68:	428b      	cmp	r3, r1
 8002e6a:	d819      	bhi.n	8002ea0 <HAL_I2C_Init+0x13c>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	1e59      	subs	r1, r3, #1
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e7a:	1c59      	adds	r1, r3, #1
 8002e7c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e80:	400b      	ands	r3, r1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00a      	beq.n	8002e9c <HAL_I2C_Init+0x138>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	1e59      	subs	r1, r3, #1
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e94:	3301      	adds	r3, #1
 8002e96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e9a:	e051      	b.n	8002f40 <HAL_I2C_Init+0x1dc>
 8002e9c:	2304      	movs	r3, #4
 8002e9e:	e04f      	b.n	8002f40 <HAL_I2C_Init+0x1dc>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d111      	bne.n	8002ecc <HAL_I2C_Init+0x168>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	1e58      	subs	r0, r3, #1
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6859      	ldr	r1, [r3, #4]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	440b      	add	r3, r1
 8002eb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eba:	3301      	adds	r3, #1
 8002ebc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	bf0c      	ite	eq
 8002ec4:	2301      	moveq	r3, #1
 8002ec6:	2300      	movne	r3, #0
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	e012      	b.n	8002ef2 <HAL_I2C_Init+0x18e>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	1e58      	subs	r0, r3, #1
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6859      	ldr	r1, [r3, #4]
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	0099      	lsls	r1, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	bf0c      	ite	eq
 8002eec:	2301      	moveq	r3, #1
 8002eee:	2300      	movne	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_I2C_Init+0x196>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e022      	b.n	8002f40 <HAL_I2C_Init+0x1dc>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10e      	bne.n	8002f20 <HAL_I2C_Init+0x1bc>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	1e58      	subs	r0, r3, #1
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6859      	ldr	r1, [r3, #4]
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	440b      	add	r3, r1
 8002f10:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f14:	3301      	adds	r3, #1
 8002f16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f1e:	e00f      	b.n	8002f40 <HAL_I2C_Init+0x1dc>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	1e58      	subs	r0, r3, #1
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6859      	ldr	r1, [r3, #4]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	0099      	lsls	r1, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f36:	3301      	adds	r3, #1
 8002f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	6809      	ldr	r1, [r1, #0]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69da      	ldr	r2, [r3, #28]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	6911      	ldr	r1, [r2, #16]
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	68d2      	ldr	r2, [r2, #12]
 8002f7a:	4311      	orrs	r1, r2
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	6812      	ldr	r2, [r2, #0]
 8002f80:	430b      	orrs	r3, r1
 8002f82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	695a      	ldr	r2, [r3, #20]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0201 	orr.w	r2, r2, #1
 8002fae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2220      	movs	r2, #32
 8002fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	000186a0 	.word	0x000186a0
 8002fdc:	001e847f 	.word	0x001e847f
 8002fe0:	003d08ff 	.word	0x003d08ff
 8002fe4:	431bde83 	.word	0x431bde83
 8002fe8:	10624dd3 	.word	0x10624dd3

08002fec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b088      	sub	sp, #32
 8002ff0:	af02      	add	r7, sp, #8
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	4608      	mov	r0, r1
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	817b      	strh	r3, [r7, #10]
 8002ffe:	460b      	mov	r3, r1
 8003000:	813b      	strh	r3, [r7, #8]
 8003002:	4613      	mov	r3, r2
 8003004:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003006:	f7ff fbf9 	bl	80027fc <HAL_GetTick>
 800300a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b20      	cmp	r3, #32
 8003016:	f040 80d9 	bne.w	80031cc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	2319      	movs	r3, #25
 8003020:	2201      	movs	r2, #1
 8003022:	496d      	ldr	r1, [pc, #436]	; (80031d8 <HAL_I2C_Mem_Write+0x1ec>)
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 fc7f 	bl	8003928 <I2C_WaitOnFlagUntilTimeout>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003030:	2302      	movs	r3, #2
 8003032:	e0cc      	b.n	80031ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800303a:	2b01      	cmp	r3, #1
 800303c:	d101      	bne.n	8003042 <HAL_I2C_Mem_Write+0x56>
 800303e:	2302      	movs	r3, #2
 8003040:	e0c5      	b.n	80031ce <HAL_I2C_Mem_Write+0x1e2>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b01      	cmp	r3, #1
 8003056:	d007      	beq.n	8003068 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0201 	orr.w	r2, r2, #1
 8003066:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003076:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2221      	movs	r2, #33	; 0x21
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2240      	movs	r2, #64	; 0x40
 8003084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6a3a      	ldr	r2, [r7, #32]
 8003092:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003098:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309e:	b29a      	uxth	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4a4d      	ldr	r2, [pc, #308]	; (80031dc <HAL_I2C_Mem_Write+0x1f0>)
 80030a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030aa:	88f8      	ldrh	r0, [r7, #6]
 80030ac:	893a      	ldrh	r2, [r7, #8]
 80030ae:	8979      	ldrh	r1, [r7, #10]
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	9301      	str	r3, [sp, #4]
 80030b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	4603      	mov	r3, r0
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 fab6 	bl	800362c <I2C_RequestMemoryWrite>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d052      	beq.n	800316c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e081      	b.n	80031ce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 fd00 	bl	8003ad4 <I2C_WaitOnTXEFlagUntilTimeout>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00d      	beq.n	80030f6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d107      	bne.n	80030f2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e06b      	b.n	80031ce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fa:	781a      	ldrb	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	1c5a      	adds	r2, r3, #1
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003110:	3b01      	subs	r3, #1
 8003112:	b29a      	uxth	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800311c:	b29b      	uxth	r3, r3
 800311e:	3b01      	subs	r3, #1
 8003120:	b29a      	uxth	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b04      	cmp	r3, #4
 8003132:	d11b      	bne.n	800316c <HAL_I2C_Mem_Write+0x180>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003138:	2b00      	cmp	r3, #0
 800313a:	d017      	beq.n	800316c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	781a      	ldrb	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	1c5a      	adds	r2, r3, #1
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003156:	3b01      	subs	r3, #1
 8003158:	b29a      	uxth	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003162:	b29b      	uxth	r3, r3
 8003164:	3b01      	subs	r3, #1
 8003166:	b29a      	uxth	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1aa      	bne.n	80030ca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f000 fcec 	bl	8003b56 <I2C_WaitOnBTFFlagUntilTimeout>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00d      	beq.n	80031a0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003188:	2b04      	cmp	r3, #4
 800318a:	d107      	bne.n	800319c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800319a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e016      	b.n	80031ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2220      	movs	r2, #32
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031c8:	2300      	movs	r3, #0
 80031ca:	e000      	b.n	80031ce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80031cc:	2302      	movs	r3, #2
  }
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	00100002 	.word	0x00100002
 80031dc:	ffff0000 	.word	0xffff0000

080031e0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b08c      	sub	sp, #48	; 0x30
 80031e4:	af02      	add	r7, sp, #8
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	4608      	mov	r0, r1
 80031ea:	4611      	mov	r1, r2
 80031ec:	461a      	mov	r2, r3
 80031ee:	4603      	mov	r3, r0
 80031f0:	817b      	strh	r3, [r7, #10]
 80031f2:	460b      	mov	r3, r1
 80031f4:	813b      	strh	r3, [r7, #8]
 80031f6:	4613      	mov	r3, r2
 80031f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031fa:	f7ff faff 	bl	80027fc <HAL_GetTick>
 80031fe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b20      	cmp	r3, #32
 800320a:	f040 8208 	bne.w	800361e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	2319      	movs	r3, #25
 8003214:	2201      	movs	r2, #1
 8003216:	497b      	ldr	r1, [pc, #492]	; (8003404 <HAL_I2C_Mem_Read+0x224>)
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 fb85 	bl	8003928 <I2C_WaitOnFlagUntilTimeout>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003224:	2302      	movs	r3, #2
 8003226:	e1fb      	b.n	8003620 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <HAL_I2C_Mem_Read+0x56>
 8003232:	2302      	movs	r3, #2
 8003234:	e1f4      	b.n	8003620 <HAL_I2C_Mem_Read+0x440>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b01      	cmp	r3, #1
 800324a:	d007      	beq.n	800325c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f042 0201 	orr.w	r2, r2, #1
 800325a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800326a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2222      	movs	r2, #34	; 0x22
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2240      	movs	r2, #64	; 0x40
 8003278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003286:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800328c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003292:	b29a      	uxth	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4a5b      	ldr	r2, [pc, #364]	; (8003408 <HAL_I2C_Mem_Read+0x228>)
 800329c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800329e:	88f8      	ldrh	r0, [r7, #6]
 80032a0:	893a      	ldrh	r2, [r7, #8]
 80032a2:	8979      	ldrh	r1, [r7, #10]
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	9301      	str	r3, [sp, #4]
 80032a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	4603      	mov	r3, r0
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 fa52 	bl	8003758 <I2C_RequestMemoryRead>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e1b0      	b.n	8003620 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d113      	bne.n	80032ee <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032c6:	2300      	movs	r3, #0
 80032c8:	623b      	str	r3, [r7, #32]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	623b      	str	r3, [r7, #32]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	623b      	str	r3, [r7, #32]
 80032da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	e184      	b.n	80035f8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d11b      	bne.n	800332e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003304:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003306:	2300      	movs	r3, #0
 8003308:	61fb      	str	r3, [r7, #28]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	61fb      	str	r3, [r7, #28]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	61fb      	str	r3, [r7, #28]
 800331a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	e164      	b.n	80035f8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003332:	2b02      	cmp	r3, #2
 8003334:	d11b      	bne.n	800336e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003344:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003354:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003356:	2300      	movs	r3, #0
 8003358:	61bb      	str	r3, [r7, #24]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	61bb      	str	r3, [r7, #24]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	61bb      	str	r3, [r7, #24]
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	e144      	b.n	80035f8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800336e:	2300      	movs	r3, #0
 8003370:	617b      	str	r3, [r7, #20]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	617b      	str	r3, [r7, #20]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	617b      	str	r3, [r7, #20]
 8003382:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003384:	e138      	b.n	80035f8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800338a:	2b03      	cmp	r3, #3
 800338c:	f200 80f1 	bhi.w	8003572 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003394:	2b01      	cmp	r3, #1
 8003396:	d123      	bne.n	80033e0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800339a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	f000 fc1b 	bl	8003bd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e139      	b.n	8003620 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	691a      	ldr	r2, [r3, #16]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033be:	1c5a      	adds	r2, r3, #1
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c8:	3b01      	subs	r3, #1
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	3b01      	subs	r3, #1
 80033d8:	b29a      	uxth	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033de:	e10b      	b.n	80035f8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d14e      	bne.n	8003486 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ea:	9300      	str	r3, [sp, #0]
 80033ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ee:	2200      	movs	r2, #0
 80033f0:	4906      	ldr	r1, [pc, #24]	; (800340c <HAL_I2C_Mem_Read+0x22c>)
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 fa98 	bl	8003928 <I2C_WaitOnFlagUntilTimeout>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d008      	beq.n	8003410 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e10e      	b.n	8003620 <HAL_I2C_Mem_Read+0x440>
 8003402:	bf00      	nop
 8003404:	00100002 	.word	0x00100002
 8003408:	ffff0000 	.word	0xffff0000
 800340c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800341e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	691a      	ldr	r2, [r3, #16]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342a:	b2d2      	uxtb	r2, r2
 800342c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	1c5a      	adds	r2, r3, #1
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800343c:	3b01      	subs	r3, #1
 800343e:	b29a      	uxth	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003448:	b29b      	uxth	r3, r3
 800344a:	3b01      	subs	r3, #1
 800344c:	b29a      	uxth	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	691a      	ldr	r2, [r3, #16]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	b2d2      	uxtb	r2, r2
 800345e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	1c5a      	adds	r2, r3, #1
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346e:	3b01      	subs	r3, #1
 8003470:	b29a      	uxth	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800347a:	b29b      	uxth	r3, r3
 800347c:	3b01      	subs	r3, #1
 800347e:	b29a      	uxth	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003484:	e0b8      	b.n	80035f8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800348c:	2200      	movs	r2, #0
 800348e:	4966      	ldr	r1, [pc, #408]	; (8003628 <HAL_I2C_Mem_Read+0x448>)
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 fa49 	bl	8003928 <I2C_WaitOnFlagUntilTimeout>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e0bf      	b.n	8003620 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	691a      	ldr	r2, [r3, #16]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ba:	b2d2      	uxtb	r2, r2
 80034bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	1c5a      	adds	r2, r3, #1
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034cc:	3b01      	subs	r3, #1
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d8:	b29b      	uxth	r3, r3
 80034da:	3b01      	subs	r3, #1
 80034dc:	b29a      	uxth	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e8:	2200      	movs	r2, #0
 80034ea:	494f      	ldr	r1, [pc, #316]	; (8003628 <HAL_I2C_Mem_Read+0x448>)
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f000 fa1b 	bl	8003928 <I2C_WaitOnFlagUntilTimeout>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e091      	b.n	8003620 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800350a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	691a      	ldr	r2, [r3, #16]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	1c5a      	adds	r2, r3, #1
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003528:	3b01      	subs	r3, #1
 800352a:	b29a      	uxth	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003534:	b29b      	uxth	r3, r3
 8003536:	3b01      	subs	r3, #1
 8003538:	b29a      	uxth	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	691a      	ldr	r2, [r3, #16]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003550:	1c5a      	adds	r2, r3, #1
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800355a:	3b01      	subs	r3, #1
 800355c:	b29a      	uxth	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003566:	b29b      	uxth	r3, r3
 8003568:	3b01      	subs	r3, #1
 800356a:	b29a      	uxth	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003570:	e042      	b.n	80035f8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003574:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 fb2e 	bl	8003bd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e04c      	b.n	8003620 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	691a      	ldr	r2, [r3, #16]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003590:	b2d2      	uxtb	r2, r2
 8003592:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a2:	3b01      	subs	r3, #1
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	f003 0304 	and.w	r3, r3, #4
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	d118      	bne.n	80035f8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	691a      	ldr	r2, [r3, #16]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e2:	3b01      	subs	r3, #1
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	3b01      	subs	r3, #1
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f47f aec2 	bne.w	8003386 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2220      	movs	r2, #32
 8003606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800361a:	2300      	movs	r3, #0
 800361c:	e000      	b.n	8003620 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800361e:	2302      	movs	r3, #2
  }
}
 8003620:	4618      	mov	r0, r3
 8003622:	3728      	adds	r7, #40	; 0x28
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	00010004 	.word	0x00010004

0800362c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b088      	sub	sp, #32
 8003630:	af02      	add	r7, sp, #8
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	4608      	mov	r0, r1
 8003636:	4611      	mov	r1, r2
 8003638:	461a      	mov	r2, r3
 800363a:	4603      	mov	r3, r0
 800363c:	817b      	strh	r3, [r7, #10]
 800363e:	460b      	mov	r3, r1
 8003640:	813b      	strh	r3, [r7, #8]
 8003642:	4613      	mov	r3, r2
 8003644:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003654:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	2200      	movs	r2, #0
 800365e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 f960 	bl	8003928 <I2C_WaitOnFlagUntilTimeout>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00d      	beq.n	800368a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003678:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800367c:	d103      	bne.n	8003686 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003684:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e05f      	b.n	800374a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800368a:	897b      	ldrh	r3, [r7, #10]
 800368c:	b2db      	uxtb	r3, r3
 800368e:	461a      	mov	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003698:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	6a3a      	ldr	r2, [r7, #32]
 800369e:	492d      	ldr	r1, [pc, #180]	; (8003754 <I2C_RequestMemoryWrite+0x128>)
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 f998 	bl	80039d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e04c      	b.n	800374a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036b0:	2300      	movs	r3, #0
 80036b2:	617b      	str	r3, [r7, #20]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	617b      	str	r3, [r7, #20]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c8:	6a39      	ldr	r1, [r7, #32]
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 fa02 	bl	8003ad4 <I2C_WaitOnTXEFlagUntilTimeout>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00d      	beq.n	80036f2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	2b04      	cmp	r3, #4
 80036dc:	d107      	bne.n	80036ee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e02b      	b.n	800374a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036f2:	88fb      	ldrh	r3, [r7, #6]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d105      	bne.n	8003704 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036f8:	893b      	ldrh	r3, [r7, #8]
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	611a      	str	r2, [r3, #16]
 8003702:	e021      	b.n	8003748 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003704:	893b      	ldrh	r3, [r7, #8]
 8003706:	0a1b      	lsrs	r3, r3, #8
 8003708:	b29b      	uxth	r3, r3
 800370a:	b2da      	uxtb	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003714:	6a39      	ldr	r1, [r7, #32]
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 f9dc 	bl	8003ad4 <I2C_WaitOnTXEFlagUntilTimeout>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00d      	beq.n	800373e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	2b04      	cmp	r3, #4
 8003728:	d107      	bne.n	800373a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003738:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e005      	b.n	800374a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800373e:	893b      	ldrh	r3, [r7, #8]
 8003740:	b2da      	uxtb	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	00010002 	.word	0x00010002

08003758 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b088      	sub	sp, #32
 800375c:	af02      	add	r7, sp, #8
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	4608      	mov	r0, r1
 8003762:	4611      	mov	r1, r2
 8003764:	461a      	mov	r2, r3
 8003766:	4603      	mov	r3, r0
 8003768:	817b      	strh	r3, [r7, #10]
 800376a:	460b      	mov	r3, r1
 800376c:	813b      	strh	r3, [r7, #8]
 800376e:	4613      	mov	r3, r2
 8003770:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003780:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003790:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	6a3b      	ldr	r3, [r7, #32]
 8003798:	2200      	movs	r2, #0
 800379a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 f8c2 	bl	8003928 <I2C_WaitOnFlagUntilTimeout>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00d      	beq.n	80037c6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037b8:	d103      	bne.n	80037c2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e0aa      	b.n	800391c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037c6:	897b      	ldrh	r3, [r7, #10]
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	461a      	mov	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	6a3a      	ldr	r2, [r7, #32]
 80037da:	4952      	ldr	r1, [pc, #328]	; (8003924 <I2C_RequestMemoryRead+0x1cc>)
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 f8fa 	bl	80039d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e097      	b.n	800391c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ec:	2300      	movs	r3, #0
 80037ee:	617b      	str	r3, [r7, #20]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	617b      	str	r3, [r7, #20]
 8003800:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003804:	6a39      	ldr	r1, [r7, #32]
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 f964 	bl	8003ad4 <I2C_WaitOnTXEFlagUntilTimeout>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00d      	beq.n	800382e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	2b04      	cmp	r3, #4
 8003818:	d107      	bne.n	800382a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003828:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e076      	b.n	800391c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800382e:	88fb      	ldrh	r3, [r7, #6]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d105      	bne.n	8003840 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003834:	893b      	ldrh	r3, [r7, #8]
 8003836:	b2da      	uxtb	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	611a      	str	r2, [r3, #16]
 800383e:	e021      	b.n	8003884 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003840:	893b      	ldrh	r3, [r7, #8]
 8003842:	0a1b      	lsrs	r3, r3, #8
 8003844:	b29b      	uxth	r3, r3
 8003846:	b2da      	uxtb	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800384e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003850:	6a39      	ldr	r1, [r7, #32]
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 f93e 	bl	8003ad4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00d      	beq.n	800387a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	2b04      	cmp	r3, #4
 8003864:	d107      	bne.n	8003876 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003874:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e050      	b.n	800391c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800387a:	893b      	ldrh	r3, [r7, #8]
 800387c:	b2da      	uxtb	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003886:	6a39      	ldr	r1, [r7, #32]
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f000 f923 	bl	8003ad4 <I2C_WaitOnTXEFlagUntilTimeout>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00d      	beq.n	80038b0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	2b04      	cmp	r3, #4
 800389a:	d107      	bne.n	80038ac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e035      	b.n	800391c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 f82b 	bl	8003928 <I2C_WaitOnFlagUntilTimeout>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00d      	beq.n	80038f4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038e6:	d103      	bne.n	80038f0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e013      	b.n	800391c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80038f4:	897b      	ldrh	r3, [r7, #10]
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	f043 0301 	orr.w	r3, r3, #1
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	6a3a      	ldr	r2, [r7, #32]
 8003908:	4906      	ldr	r1, [pc, #24]	; (8003924 <I2C_RequestMemoryRead+0x1cc>)
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f000 f863 	bl	80039d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e000      	b.n	800391c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	00010002 	.word	0x00010002

08003928 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	603b      	str	r3, [r7, #0]
 8003934:	4613      	mov	r3, r2
 8003936:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003938:	e025      	b.n	8003986 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003940:	d021      	beq.n	8003986 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003942:	f7fe ff5b 	bl	80027fc <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	429a      	cmp	r2, r3
 8003950:	d302      	bcc.n	8003958 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d116      	bne.n	8003986 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2220      	movs	r2, #32
 8003962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	f043 0220 	orr.w	r2, r3, #32
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e023      	b.n	80039ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	0c1b      	lsrs	r3, r3, #16
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b01      	cmp	r3, #1
 800398e:	d10d      	bne.n	80039ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	43da      	mvns	r2, r3
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	4013      	ands	r3, r2
 800399c:	b29b      	uxth	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	bf0c      	ite	eq
 80039a2:	2301      	moveq	r3, #1
 80039a4:	2300      	movne	r3, #0
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	461a      	mov	r2, r3
 80039aa:	e00c      	b.n	80039c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	43da      	mvns	r2, r3
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	4013      	ands	r3, r2
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	bf0c      	ite	eq
 80039be:	2301      	moveq	r3, #1
 80039c0:	2300      	movne	r3, #0
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	461a      	mov	r2, r3
 80039c6:	79fb      	ldrb	r3, [r7, #7]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d0b6      	beq.n	800393a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b084      	sub	sp, #16
 80039da:	af00      	add	r7, sp, #0
 80039dc:	60f8      	str	r0, [r7, #12]
 80039de:	60b9      	str	r1, [r7, #8]
 80039e0:	607a      	str	r2, [r7, #4]
 80039e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039e4:	e051      	b.n	8003a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039f4:	d123      	bne.n	8003a3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a04:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a0e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2220      	movs	r2, #32
 8003a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	f043 0204 	orr.w	r2, r3, #4
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e046      	b.n	8003acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a44:	d021      	beq.n	8003a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a46:	f7fe fed9 	bl	80027fc <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d302      	bcc.n	8003a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d116      	bne.n	8003a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2220      	movs	r2, #32
 8003a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	f043 0220 	orr.w	r2, r3, #32
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e020      	b.n	8003acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	0c1b      	lsrs	r3, r3, #16
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d10c      	bne.n	8003aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	43da      	mvns	r2, r3
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	bf14      	ite	ne
 8003aa6:	2301      	movne	r3, #1
 8003aa8:	2300      	moveq	r3, #0
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	e00b      	b.n	8003ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	43da      	mvns	r2, r3
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	bf14      	ite	ne
 8003ac0:	2301      	movne	r3, #1
 8003ac2:	2300      	moveq	r3, #0
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d18d      	bne.n	80039e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ae0:	e02d      	b.n	8003b3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f000 f8ce 	bl	8003c84 <I2C_IsAcknowledgeFailed>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e02d      	b.n	8003b4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003af8:	d021      	beq.n	8003b3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003afa:	f7fe fe7f 	bl	80027fc <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d302      	bcc.n	8003b10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d116      	bne.n	8003b3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2220      	movs	r2, #32
 8003b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	f043 0220 	orr.w	r2, r3, #32
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e007      	b.n	8003b4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b48:	2b80      	cmp	r3, #128	; 0x80
 8003b4a:	d1ca      	bne.n	8003ae2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b084      	sub	sp, #16
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	60f8      	str	r0, [r7, #12]
 8003b5e:	60b9      	str	r1, [r7, #8]
 8003b60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b62:	e02d      	b.n	8003bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 f88d 	bl	8003c84 <I2C_IsAcknowledgeFailed>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e02d      	b.n	8003bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b7a:	d021      	beq.n	8003bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b7c:	f7fe fe3e 	bl	80027fc <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	68ba      	ldr	r2, [r7, #8]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d302      	bcc.n	8003b92 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d116      	bne.n	8003bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bac:	f043 0220 	orr.w	r2, r3, #32
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e007      	b.n	8003bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	f003 0304 	and.w	r3, r3, #4
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d1ca      	bne.n	8003b64 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003be4:	e042      	b.n	8003c6c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	f003 0310 	and.w	r3, r3, #16
 8003bf0:	2b10      	cmp	r3, #16
 8003bf2:	d119      	bne.n	8003c28 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f06f 0210 	mvn.w	r2, #16
 8003bfc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2220      	movs	r2, #32
 8003c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e029      	b.n	8003c7c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c28:	f7fe fde8 	bl	80027fc <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d302      	bcc.n	8003c3e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d116      	bne.n	8003c6c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2220      	movs	r2, #32
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	f043 0220 	orr.w	r2, r3, #32
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e007      	b.n	8003c7c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c76:	2b40      	cmp	r3, #64	; 0x40
 8003c78:	d1b5      	bne.n	8003be6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c9a:	d11b      	bne.n	8003cd4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ca4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc0:	f043 0204 	orr.w	r2, r3, #4
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e000      	b.n	8003cd6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
	...

08003ce4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e267      	b.n	80041c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d075      	beq.n	8003dee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d02:	4b88      	ldr	r3, [pc, #544]	; (8003f24 <HAL_RCC_OscConfig+0x240>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 030c 	and.w	r3, r3, #12
 8003d0a:	2b04      	cmp	r3, #4
 8003d0c:	d00c      	beq.n	8003d28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d0e:	4b85      	ldr	r3, [pc, #532]	; (8003f24 <HAL_RCC_OscConfig+0x240>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d16:	2b08      	cmp	r3, #8
 8003d18:	d112      	bne.n	8003d40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d1a:	4b82      	ldr	r3, [pc, #520]	; (8003f24 <HAL_RCC_OscConfig+0x240>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d26:	d10b      	bne.n	8003d40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d28:	4b7e      	ldr	r3, [pc, #504]	; (8003f24 <HAL_RCC_OscConfig+0x240>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d05b      	beq.n	8003dec <HAL_RCC_OscConfig+0x108>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d157      	bne.n	8003dec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e242      	b.n	80041c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d48:	d106      	bne.n	8003d58 <HAL_RCC_OscConfig+0x74>
 8003d4a:	4b76      	ldr	r3, [pc, #472]	; (8003f24 <HAL_RCC_OscConfig+0x240>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a75      	ldr	r2, [pc, #468]	; (8003f24 <HAL_RCC_OscConfig+0x240>)
 8003d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d54:	6013      	str	r3, [r2, #0]
 8003d56:	e01d      	b.n	8003d94 <HAL_RCC_OscConfig+0xb0>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d60:	d10c      	bne.n	8003d7c <HAL_RCC_OscConfig+0x98>
 8003d62:	4b70      	ldr	r3, [pc, #448]	; (8003f24 <HAL_RCC_OscConfig+0x240>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a6f      	ldr	r2, [pc, #444]	; (8003f24 <HAL_RCC_OscConfig+0x240>)
 8003d68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d6c:	6013      	str	r3, [r2, #0]
 8003d6e:	4b6d      	ldr	r3, [pc, #436]	; (8003f24 <HAL_RCC_OscConfig+0x240>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a6c      	ldr	r2, [pc, #432]	; (8003f24 <HAL_RCC_OscConfig+0x240>)
 8003d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d78:	6013      	str	r3, [r2, #0]
 8003d7a:	e00b      	b.n	8003d94 <HAL_RCC_OscConfig+0xb0>
 8003d7c:	4b69      	ldr	r3, [pc, #420]	; (8003f24 <HAL_RCC_OscConfig+0x240>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a68      	ldr	r2, [pc, #416]	; (8003f24 <HAL_RCC_OscConfig+0x240>)
 8003d82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d86:	6013      	str	r3, [r2, #0]
 8003d88:	4b66      	ldr	r3, [pc, #408]	; (8003f24 <HAL_RCC_OscConfig+0x240>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a65      	ldr	r2, [pc, #404]	; (8003f24 <HAL_RCC_OscConfig+0x240>)
 8003d8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d013      	beq.n	8003dc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d9c:	f7fe fd2e 	bl	80027fc <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003da4:	f7fe fd2a 	bl	80027fc <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b64      	cmp	r3, #100	; 0x64
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e207      	b.n	80041c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003db6:	4b5b      	ldr	r3, [pc, #364]	; (8003f24 <HAL_RCC_OscConfig+0x240>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d0f0      	beq.n	8003da4 <HAL_RCC_OscConfig+0xc0>
 8003dc2:	e014      	b.n	8003dee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc4:	f7fe fd1a 	bl	80027fc <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dcc:	f7fe fd16 	bl	80027fc <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b64      	cmp	r3, #100	; 0x64
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e1f3      	b.n	80041c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dde:	4b51      	ldr	r3, [pc, #324]	; (8003f24 <HAL_RCC_OscConfig+0x240>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1f0      	bne.n	8003dcc <HAL_RCC_OscConfig+0xe8>
 8003dea:	e000      	b.n	8003dee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d063      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dfa:	4b4a      	ldr	r3, [pc, #296]	; (8003f24 <HAL_RCC_OscConfig+0x240>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f003 030c 	and.w	r3, r3, #12
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00b      	beq.n	8003e1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e06:	4b47      	ldr	r3, [pc, #284]	; (8003f24 <HAL_RCC_OscConfig+0x240>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e0e:	2b08      	cmp	r3, #8
 8003e10:	d11c      	bne.n	8003e4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e12:	4b44      	ldr	r3, [pc, #272]	; (8003f24 <HAL_RCC_OscConfig+0x240>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d116      	bne.n	8003e4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e1e:	4b41      	ldr	r3, [pc, #260]	; (8003f24 <HAL_RCC_OscConfig+0x240>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d005      	beq.n	8003e36 <HAL_RCC_OscConfig+0x152>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d001      	beq.n	8003e36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e1c7      	b.n	80041c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e36:	4b3b      	ldr	r3, [pc, #236]	; (8003f24 <HAL_RCC_OscConfig+0x240>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	4937      	ldr	r1, [pc, #220]	; (8003f24 <HAL_RCC_OscConfig+0x240>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e4a:	e03a      	b.n	8003ec2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d020      	beq.n	8003e96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e54:	4b34      	ldr	r3, [pc, #208]	; (8003f28 <HAL_RCC_OscConfig+0x244>)
 8003e56:	2201      	movs	r2, #1
 8003e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e5a:	f7fe fccf 	bl	80027fc <HAL_GetTick>
 8003e5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e60:	e008      	b.n	8003e74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e62:	f7fe fccb 	bl	80027fc <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d901      	bls.n	8003e74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e1a8      	b.n	80041c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e74:	4b2b      	ldr	r3, [pc, #172]	; (8003f24 <HAL_RCC_OscConfig+0x240>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d0f0      	beq.n	8003e62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e80:	4b28      	ldr	r3, [pc, #160]	; (8003f24 <HAL_RCC_OscConfig+0x240>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	00db      	lsls	r3, r3, #3
 8003e8e:	4925      	ldr	r1, [pc, #148]	; (8003f24 <HAL_RCC_OscConfig+0x240>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	600b      	str	r3, [r1, #0]
 8003e94:	e015      	b.n	8003ec2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e96:	4b24      	ldr	r3, [pc, #144]	; (8003f28 <HAL_RCC_OscConfig+0x244>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e9c:	f7fe fcae 	bl	80027fc <HAL_GetTick>
 8003ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ea4:	f7fe fcaa 	bl	80027fc <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e187      	b.n	80041c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eb6:	4b1b      	ldr	r3, [pc, #108]	; (8003f24 <HAL_RCC_OscConfig+0x240>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1f0      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0308 	and.w	r3, r3, #8
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d036      	beq.n	8003f3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d016      	beq.n	8003f04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ed6:	4b15      	ldr	r3, [pc, #84]	; (8003f2c <HAL_RCC_OscConfig+0x248>)
 8003ed8:	2201      	movs	r2, #1
 8003eda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003edc:	f7fe fc8e 	bl	80027fc <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ee4:	f7fe fc8a 	bl	80027fc <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e167      	b.n	80041c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ef6:	4b0b      	ldr	r3, [pc, #44]	; (8003f24 <HAL_RCC_OscConfig+0x240>)
 8003ef8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d0f0      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x200>
 8003f02:	e01b      	b.n	8003f3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f04:	4b09      	ldr	r3, [pc, #36]	; (8003f2c <HAL_RCC_OscConfig+0x248>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f0a:	f7fe fc77 	bl	80027fc <HAL_GetTick>
 8003f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f10:	e00e      	b.n	8003f30 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f12:	f7fe fc73 	bl	80027fc <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d907      	bls.n	8003f30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e150      	b.n	80041c6 <HAL_RCC_OscConfig+0x4e2>
 8003f24:	40023800 	.word	0x40023800
 8003f28:	42470000 	.word	0x42470000
 8003f2c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f30:	4b88      	ldr	r3, [pc, #544]	; (8004154 <HAL_RCC_OscConfig+0x470>)
 8003f32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1ea      	bne.n	8003f12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0304 	and.w	r3, r3, #4
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f000 8097 	beq.w	8004078 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f4e:	4b81      	ldr	r3, [pc, #516]	; (8004154 <HAL_RCC_OscConfig+0x470>)
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10f      	bne.n	8003f7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	60bb      	str	r3, [r7, #8]
 8003f5e:	4b7d      	ldr	r3, [pc, #500]	; (8004154 <HAL_RCC_OscConfig+0x470>)
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	4a7c      	ldr	r2, [pc, #496]	; (8004154 <HAL_RCC_OscConfig+0x470>)
 8003f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f68:	6413      	str	r3, [r2, #64]	; 0x40
 8003f6a:	4b7a      	ldr	r3, [pc, #488]	; (8004154 <HAL_RCC_OscConfig+0x470>)
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f72:	60bb      	str	r3, [r7, #8]
 8003f74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f76:	2301      	movs	r3, #1
 8003f78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f7a:	4b77      	ldr	r3, [pc, #476]	; (8004158 <HAL_RCC_OscConfig+0x474>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d118      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f86:	4b74      	ldr	r3, [pc, #464]	; (8004158 <HAL_RCC_OscConfig+0x474>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a73      	ldr	r2, [pc, #460]	; (8004158 <HAL_RCC_OscConfig+0x474>)
 8003f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f92:	f7fe fc33 	bl	80027fc <HAL_GetTick>
 8003f96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f98:	e008      	b.n	8003fac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f9a:	f7fe fc2f 	bl	80027fc <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d901      	bls.n	8003fac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e10c      	b.n	80041c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fac:	4b6a      	ldr	r3, [pc, #424]	; (8004158 <HAL_RCC_OscConfig+0x474>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d0f0      	beq.n	8003f9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d106      	bne.n	8003fce <HAL_RCC_OscConfig+0x2ea>
 8003fc0:	4b64      	ldr	r3, [pc, #400]	; (8004154 <HAL_RCC_OscConfig+0x470>)
 8003fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc4:	4a63      	ldr	r2, [pc, #396]	; (8004154 <HAL_RCC_OscConfig+0x470>)
 8003fc6:	f043 0301 	orr.w	r3, r3, #1
 8003fca:	6713      	str	r3, [r2, #112]	; 0x70
 8003fcc:	e01c      	b.n	8004008 <HAL_RCC_OscConfig+0x324>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	2b05      	cmp	r3, #5
 8003fd4:	d10c      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x30c>
 8003fd6:	4b5f      	ldr	r3, [pc, #380]	; (8004154 <HAL_RCC_OscConfig+0x470>)
 8003fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fda:	4a5e      	ldr	r2, [pc, #376]	; (8004154 <HAL_RCC_OscConfig+0x470>)
 8003fdc:	f043 0304 	orr.w	r3, r3, #4
 8003fe0:	6713      	str	r3, [r2, #112]	; 0x70
 8003fe2:	4b5c      	ldr	r3, [pc, #368]	; (8004154 <HAL_RCC_OscConfig+0x470>)
 8003fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe6:	4a5b      	ldr	r2, [pc, #364]	; (8004154 <HAL_RCC_OscConfig+0x470>)
 8003fe8:	f043 0301 	orr.w	r3, r3, #1
 8003fec:	6713      	str	r3, [r2, #112]	; 0x70
 8003fee:	e00b      	b.n	8004008 <HAL_RCC_OscConfig+0x324>
 8003ff0:	4b58      	ldr	r3, [pc, #352]	; (8004154 <HAL_RCC_OscConfig+0x470>)
 8003ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff4:	4a57      	ldr	r2, [pc, #348]	; (8004154 <HAL_RCC_OscConfig+0x470>)
 8003ff6:	f023 0301 	bic.w	r3, r3, #1
 8003ffa:	6713      	str	r3, [r2, #112]	; 0x70
 8003ffc:	4b55      	ldr	r3, [pc, #340]	; (8004154 <HAL_RCC_OscConfig+0x470>)
 8003ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004000:	4a54      	ldr	r2, [pc, #336]	; (8004154 <HAL_RCC_OscConfig+0x470>)
 8004002:	f023 0304 	bic.w	r3, r3, #4
 8004006:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d015      	beq.n	800403c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004010:	f7fe fbf4 	bl	80027fc <HAL_GetTick>
 8004014:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004016:	e00a      	b.n	800402e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004018:	f7fe fbf0 	bl	80027fc <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	f241 3288 	movw	r2, #5000	; 0x1388
 8004026:	4293      	cmp	r3, r2
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e0cb      	b.n	80041c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800402e:	4b49      	ldr	r3, [pc, #292]	; (8004154 <HAL_RCC_OscConfig+0x470>)
 8004030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d0ee      	beq.n	8004018 <HAL_RCC_OscConfig+0x334>
 800403a:	e014      	b.n	8004066 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800403c:	f7fe fbde 	bl	80027fc <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004042:	e00a      	b.n	800405a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004044:	f7fe fbda 	bl	80027fc <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004052:	4293      	cmp	r3, r2
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e0b5      	b.n	80041c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800405a:	4b3e      	ldr	r3, [pc, #248]	; (8004154 <HAL_RCC_OscConfig+0x470>)
 800405c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1ee      	bne.n	8004044 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004066:	7dfb      	ldrb	r3, [r7, #23]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d105      	bne.n	8004078 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800406c:	4b39      	ldr	r3, [pc, #228]	; (8004154 <HAL_RCC_OscConfig+0x470>)
 800406e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004070:	4a38      	ldr	r2, [pc, #224]	; (8004154 <HAL_RCC_OscConfig+0x470>)
 8004072:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004076:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	2b00      	cmp	r3, #0
 800407e:	f000 80a1 	beq.w	80041c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004082:	4b34      	ldr	r3, [pc, #208]	; (8004154 <HAL_RCC_OscConfig+0x470>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 030c 	and.w	r3, r3, #12
 800408a:	2b08      	cmp	r3, #8
 800408c:	d05c      	beq.n	8004148 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	2b02      	cmp	r3, #2
 8004094:	d141      	bne.n	800411a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004096:	4b31      	ldr	r3, [pc, #196]	; (800415c <HAL_RCC_OscConfig+0x478>)
 8004098:	2200      	movs	r2, #0
 800409a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800409c:	f7fe fbae 	bl	80027fc <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040a4:	f7fe fbaa 	bl	80027fc <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e087      	b.n	80041c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040b6:	4b27      	ldr	r3, [pc, #156]	; (8004154 <HAL_RCC_OscConfig+0x470>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1f0      	bne.n	80040a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	69da      	ldr	r2, [r3, #28]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	431a      	orrs	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d0:	019b      	lsls	r3, r3, #6
 80040d2:	431a      	orrs	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d8:	085b      	lsrs	r3, r3, #1
 80040da:	3b01      	subs	r3, #1
 80040dc:	041b      	lsls	r3, r3, #16
 80040de:	431a      	orrs	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e4:	061b      	lsls	r3, r3, #24
 80040e6:	491b      	ldr	r1, [pc, #108]	; (8004154 <HAL_RCC_OscConfig+0x470>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040ec:	4b1b      	ldr	r3, [pc, #108]	; (800415c <HAL_RCC_OscConfig+0x478>)
 80040ee:	2201      	movs	r2, #1
 80040f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f2:	f7fe fb83 	bl	80027fc <HAL_GetTick>
 80040f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040f8:	e008      	b.n	800410c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040fa:	f7fe fb7f 	bl	80027fc <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b02      	cmp	r3, #2
 8004106:	d901      	bls.n	800410c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e05c      	b.n	80041c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800410c:	4b11      	ldr	r3, [pc, #68]	; (8004154 <HAL_RCC_OscConfig+0x470>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0f0      	beq.n	80040fa <HAL_RCC_OscConfig+0x416>
 8004118:	e054      	b.n	80041c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800411a:	4b10      	ldr	r3, [pc, #64]	; (800415c <HAL_RCC_OscConfig+0x478>)
 800411c:	2200      	movs	r2, #0
 800411e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004120:	f7fe fb6c 	bl	80027fc <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004128:	f7fe fb68 	bl	80027fc <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e045      	b.n	80041c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800413a:	4b06      	ldr	r3, [pc, #24]	; (8004154 <HAL_RCC_OscConfig+0x470>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1f0      	bne.n	8004128 <HAL_RCC_OscConfig+0x444>
 8004146:	e03d      	b.n	80041c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d107      	bne.n	8004160 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e038      	b.n	80041c6 <HAL_RCC_OscConfig+0x4e2>
 8004154:	40023800 	.word	0x40023800
 8004158:	40007000 	.word	0x40007000
 800415c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004160:	4b1b      	ldr	r3, [pc, #108]	; (80041d0 <HAL_RCC_OscConfig+0x4ec>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d028      	beq.n	80041c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004178:	429a      	cmp	r2, r3
 800417a:	d121      	bne.n	80041c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004186:	429a      	cmp	r2, r3
 8004188:	d11a      	bne.n	80041c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004190:	4013      	ands	r3, r2
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004196:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004198:	4293      	cmp	r3, r2
 800419a:	d111      	bne.n	80041c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a6:	085b      	lsrs	r3, r3, #1
 80041a8:	3b01      	subs	r3, #1
 80041aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d107      	bne.n	80041c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041bc:	429a      	cmp	r2, r3
 80041be:	d001      	beq.n	80041c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e000      	b.n	80041c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3718      	adds	r7, #24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	40023800 	.word	0x40023800

080041d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d101      	bne.n	80041e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e0cc      	b.n	8004382 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041e8:	4b68      	ldr	r3, [pc, #416]	; (800438c <HAL_RCC_ClockConfig+0x1b8>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0307 	and.w	r3, r3, #7
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d90c      	bls.n	8004210 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f6:	4b65      	ldr	r3, [pc, #404]	; (800438c <HAL_RCC_ClockConfig+0x1b8>)
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	b2d2      	uxtb	r2, r2
 80041fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041fe:	4b63      	ldr	r3, [pc, #396]	; (800438c <HAL_RCC_ClockConfig+0x1b8>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0307 	and.w	r3, r3, #7
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	429a      	cmp	r2, r3
 800420a:	d001      	beq.n	8004210 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e0b8      	b.n	8004382 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d020      	beq.n	800425e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0304 	and.w	r3, r3, #4
 8004224:	2b00      	cmp	r3, #0
 8004226:	d005      	beq.n	8004234 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004228:	4b59      	ldr	r3, [pc, #356]	; (8004390 <HAL_RCC_ClockConfig+0x1bc>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	4a58      	ldr	r2, [pc, #352]	; (8004390 <HAL_RCC_ClockConfig+0x1bc>)
 800422e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004232:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0308 	and.w	r3, r3, #8
 800423c:	2b00      	cmp	r3, #0
 800423e:	d005      	beq.n	800424c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004240:	4b53      	ldr	r3, [pc, #332]	; (8004390 <HAL_RCC_ClockConfig+0x1bc>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	4a52      	ldr	r2, [pc, #328]	; (8004390 <HAL_RCC_ClockConfig+0x1bc>)
 8004246:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800424a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800424c:	4b50      	ldr	r3, [pc, #320]	; (8004390 <HAL_RCC_ClockConfig+0x1bc>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	494d      	ldr	r1, [pc, #308]	; (8004390 <HAL_RCC_ClockConfig+0x1bc>)
 800425a:	4313      	orrs	r3, r2
 800425c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b00      	cmp	r3, #0
 8004268:	d044      	beq.n	80042f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d107      	bne.n	8004282 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004272:	4b47      	ldr	r3, [pc, #284]	; (8004390 <HAL_RCC_ClockConfig+0x1bc>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d119      	bne.n	80042b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e07f      	b.n	8004382 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	2b02      	cmp	r3, #2
 8004288:	d003      	beq.n	8004292 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800428e:	2b03      	cmp	r3, #3
 8004290:	d107      	bne.n	80042a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004292:	4b3f      	ldr	r3, [pc, #252]	; (8004390 <HAL_RCC_ClockConfig+0x1bc>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d109      	bne.n	80042b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e06f      	b.n	8004382 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042a2:	4b3b      	ldr	r3, [pc, #236]	; (8004390 <HAL_RCC_ClockConfig+0x1bc>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e067      	b.n	8004382 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042b2:	4b37      	ldr	r3, [pc, #220]	; (8004390 <HAL_RCC_ClockConfig+0x1bc>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f023 0203 	bic.w	r2, r3, #3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	4934      	ldr	r1, [pc, #208]	; (8004390 <HAL_RCC_ClockConfig+0x1bc>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042c4:	f7fe fa9a 	bl	80027fc <HAL_GetTick>
 80042c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ca:	e00a      	b.n	80042e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042cc:	f7fe fa96 	bl	80027fc <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042da:	4293      	cmp	r3, r2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e04f      	b.n	8004382 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042e2:	4b2b      	ldr	r3, [pc, #172]	; (8004390 <HAL_RCC_ClockConfig+0x1bc>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 020c 	and.w	r2, r3, #12
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d1eb      	bne.n	80042cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042f4:	4b25      	ldr	r3, [pc, #148]	; (800438c <HAL_RCC_ClockConfig+0x1b8>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0307 	and.w	r3, r3, #7
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d20c      	bcs.n	800431c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004302:	4b22      	ldr	r3, [pc, #136]	; (800438c <HAL_RCC_ClockConfig+0x1b8>)
 8004304:	683a      	ldr	r2, [r7, #0]
 8004306:	b2d2      	uxtb	r2, r2
 8004308:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800430a:	4b20      	ldr	r3, [pc, #128]	; (800438c <HAL_RCC_ClockConfig+0x1b8>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0307 	and.w	r3, r3, #7
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	429a      	cmp	r2, r3
 8004316:	d001      	beq.n	800431c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e032      	b.n	8004382 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0304 	and.w	r3, r3, #4
 8004324:	2b00      	cmp	r3, #0
 8004326:	d008      	beq.n	800433a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004328:	4b19      	ldr	r3, [pc, #100]	; (8004390 <HAL_RCC_ClockConfig+0x1bc>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	4916      	ldr	r1, [pc, #88]	; (8004390 <HAL_RCC_ClockConfig+0x1bc>)
 8004336:	4313      	orrs	r3, r2
 8004338:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0308 	and.w	r3, r3, #8
 8004342:	2b00      	cmp	r3, #0
 8004344:	d009      	beq.n	800435a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004346:	4b12      	ldr	r3, [pc, #72]	; (8004390 <HAL_RCC_ClockConfig+0x1bc>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	00db      	lsls	r3, r3, #3
 8004354:	490e      	ldr	r1, [pc, #56]	; (8004390 <HAL_RCC_ClockConfig+0x1bc>)
 8004356:	4313      	orrs	r3, r2
 8004358:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800435a:	f000 f821 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 800435e:	4602      	mov	r2, r0
 8004360:	4b0b      	ldr	r3, [pc, #44]	; (8004390 <HAL_RCC_ClockConfig+0x1bc>)
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	091b      	lsrs	r3, r3, #4
 8004366:	f003 030f 	and.w	r3, r3, #15
 800436a:	490a      	ldr	r1, [pc, #40]	; (8004394 <HAL_RCC_ClockConfig+0x1c0>)
 800436c:	5ccb      	ldrb	r3, [r1, r3]
 800436e:	fa22 f303 	lsr.w	r3, r2, r3
 8004372:	4a09      	ldr	r2, [pc, #36]	; (8004398 <HAL_RCC_ClockConfig+0x1c4>)
 8004374:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004376:	4b09      	ldr	r3, [pc, #36]	; (800439c <HAL_RCC_ClockConfig+0x1c8>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4618      	mov	r0, r3
 800437c:	f7fe f9fa 	bl	8002774 <HAL_InitTick>

  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	40023c00 	.word	0x40023c00
 8004390:	40023800 	.word	0x40023800
 8004394:	080081c8 	.word	0x080081c8
 8004398:	20000000 	.word	0x20000000
 800439c:	20000004 	.word	0x20000004

080043a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043a4:	b094      	sub	sp, #80	; 0x50
 80043a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043a8:	2300      	movs	r3, #0
 80043aa:	647b      	str	r3, [r7, #68]	; 0x44
 80043ac:	2300      	movs	r3, #0
 80043ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043b0:	2300      	movs	r3, #0
 80043b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80043b4:	2300      	movs	r3, #0
 80043b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043b8:	4b79      	ldr	r3, [pc, #484]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f003 030c 	and.w	r3, r3, #12
 80043c0:	2b08      	cmp	r3, #8
 80043c2:	d00d      	beq.n	80043e0 <HAL_RCC_GetSysClockFreq+0x40>
 80043c4:	2b08      	cmp	r3, #8
 80043c6:	f200 80e1 	bhi.w	800458c <HAL_RCC_GetSysClockFreq+0x1ec>
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d002      	beq.n	80043d4 <HAL_RCC_GetSysClockFreq+0x34>
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	d003      	beq.n	80043da <HAL_RCC_GetSysClockFreq+0x3a>
 80043d2:	e0db      	b.n	800458c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043d4:	4b73      	ldr	r3, [pc, #460]	; (80045a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80043d6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80043d8:	e0db      	b.n	8004592 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043da:	4b73      	ldr	r3, [pc, #460]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80043dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043de:	e0d8      	b.n	8004592 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043e0:	4b6f      	ldr	r3, [pc, #444]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043e8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043ea:	4b6d      	ldr	r3, [pc, #436]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d063      	beq.n	80044be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043f6:	4b6a      	ldr	r3, [pc, #424]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	099b      	lsrs	r3, r3, #6
 80043fc:	2200      	movs	r2, #0
 80043fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8004400:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004408:	633b      	str	r3, [r7, #48]	; 0x30
 800440a:	2300      	movs	r3, #0
 800440c:	637b      	str	r3, [r7, #52]	; 0x34
 800440e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004412:	4622      	mov	r2, r4
 8004414:	462b      	mov	r3, r5
 8004416:	f04f 0000 	mov.w	r0, #0
 800441a:	f04f 0100 	mov.w	r1, #0
 800441e:	0159      	lsls	r1, r3, #5
 8004420:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004424:	0150      	lsls	r0, r2, #5
 8004426:	4602      	mov	r2, r0
 8004428:	460b      	mov	r3, r1
 800442a:	4621      	mov	r1, r4
 800442c:	1a51      	subs	r1, r2, r1
 800442e:	6139      	str	r1, [r7, #16]
 8004430:	4629      	mov	r1, r5
 8004432:	eb63 0301 	sbc.w	r3, r3, r1
 8004436:	617b      	str	r3, [r7, #20]
 8004438:	f04f 0200 	mov.w	r2, #0
 800443c:	f04f 0300 	mov.w	r3, #0
 8004440:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004444:	4659      	mov	r1, fp
 8004446:	018b      	lsls	r3, r1, #6
 8004448:	4651      	mov	r1, sl
 800444a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800444e:	4651      	mov	r1, sl
 8004450:	018a      	lsls	r2, r1, #6
 8004452:	4651      	mov	r1, sl
 8004454:	ebb2 0801 	subs.w	r8, r2, r1
 8004458:	4659      	mov	r1, fp
 800445a:	eb63 0901 	sbc.w	r9, r3, r1
 800445e:	f04f 0200 	mov.w	r2, #0
 8004462:	f04f 0300 	mov.w	r3, #0
 8004466:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800446a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800446e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004472:	4690      	mov	r8, r2
 8004474:	4699      	mov	r9, r3
 8004476:	4623      	mov	r3, r4
 8004478:	eb18 0303 	adds.w	r3, r8, r3
 800447c:	60bb      	str	r3, [r7, #8]
 800447e:	462b      	mov	r3, r5
 8004480:	eb49 0303 	adc.w	r3, r9, r3
 8004484:	60fb      	str	r3, [r7, #12]
 8004486:	f04f 0200 	mov.w	r2, #0
 800448a:	f04f 0300 	mov.w	r3, #0
 800448e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004492:	4629      	mov	r1, r5
 8004494:	024b      	lsls	r3, r1, #9
 8004496:	4621      	mov	r1, r4
 8004498:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800449c:	4621      	mov	r1, r4
 800449e:	024a      	lsls	r2, r1, #9
 80044a0:	4610      	mov	r0, r2
 80044a2:	4619      	mov	r1, r3
 80044a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044a6:	2200      	movs	r2, #0
 80044a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80044aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044b0:	f7fc fbd2 	bl	8000c58 <__aeabi_uldivmod>
 80044b4:	4602      	mov	r2, r0
 80044b6:	460b      	mov	r3, r1
 80044b8:	4613      	mov	r3, r2
 80044ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044bc:	e058      	b.n	8004570 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044be:	4b38      	ldr	r3, [pc, #224]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	099b      	lsrs	r3, r3, #6
 80044c4:	2200      	movs	r2, #0
 80044c6:	4618      	mov	r0, r3
 80044c8:	4611      	mov	r1, r2
 80044ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044ce:	623b      	str	r3, [r7, #32]
 80044d0:	2300      	movs	r3, #0
 80044d2:	627b      	str	r3, [r7, #36]	; 0x24
 80044d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80044d8:	4642      	mov	r2, r8
 80044da:	464b      	mov	r3, r9
 80044dc:	f04f 0000 	mov.w	r0, #0
 80044e0:	f04f 0100 	mov.w	r1, #0
 80044e4:	0159      	lsls	r1, r3, #5
 80044e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044ea:	0150      	lsls	r0, r2, #5
 80044ec:	4602      	mov	r2, r0
 80044ee:	460b      	mov	r3, r1
 80044f0:	4641      	mov	r1, r8
 80044f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80044f6:	4649      	mov	r1, r9
 80044f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80044fc:	f04f 0200 	mov.w	r2, #0
 8004500:	f04f 0300 	mov.w	r3, #0
 8004504:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004508:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800450c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004510:	ebb2 040a 	subs.w	r4, r2, sl
 8004514:	eb63 050b 	sbc.w	r5, r3, fp
 8004518:	f04f 0200 	mov.w	r2, #0
 800451c:	f04f 0300 	mov.w	r3, #0
 8004520:	00eb      	lsls	r3, r5, #3
 8004522:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004526:	00e2      	lsls	r2, r4, #3
 8004528:	4614      	mov	r4, r2
 800452a:	461d      	mov	r5, r3
 800452c:	4643      	mov	r3, r8
 800452e:	18e3      	adds	r3, r4, r3
 8004530:	603b      	str	r3, [r7, #0]
 8004532:	464b      	mov	r3, r9
 8004534:	eb45 0303 	adc.w	r3, r5, r3
 8004538:	607b      	str	r3, [r7, #4]
 800453a:	f04f 0200 	mov.w	r2, #0
 800453e:	f04f 0300 	mov.w	r3, #0
 8004542:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004546:	4629      	mov	r1, r5
 8004548:	028b      	lsls	r3, r1, #10
 800454a:	4621      	mov	r1, r4
 800454c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004550:	4621      	mov	r1, r4
 8004552:	028a      	lsls	r2, r1, #10
 8004554:	4610      	mov	r0, r2
 8004556:	4619      	mov	r1, r3
 8004558:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800455a:	2200      	movs	r2, #0
 800455c:	61bb      	str	r3, [r7, #24]
 800455e:	61fa      	str	r2, [r7, #28]
 8004560:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004564:	f7fc fb78 	bl	8000c58 <__aeabi_uldivmod>
 8004568:	4602      	mov	r2, r0
 800456a:	460b      	mov	r3, r1
 800456c:	4613      	mov	r3, r2
 800456e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004570:	4b0b      	ldr	r3, [pc, #44]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	0c1b      	lsrs	r3, r3, #16
 8004576:	f003 0303 	and.w	r3, r3, #3
 800457a:	3301      	adds	r3, #1
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004580:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004584:	fbb2 f3f3 	udiv	r3, r2, r3
 8004588:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800458a:	e002      	b.n	8004592 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800458c:	4b05      	ldr	r3, [pc, #20]	; (80045a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800458e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004590:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004592:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004594:	4618      	mov	r0, r3
 8004596:	3750      	adds	r7, #80	; 0x50
 8004598:	46bd      	mov	sp, r7
 800459a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800459e:	bf00      	nop
 80045a0:	40023800 	.word	0x40023800
 80045a4:	00f42400 	.word	0x00f42400
 80045a8:	007a1200 	.word	0x007a1200

080045ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045b0:	4b03      	ldr	r3, [pc, #12]	; (80045c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80045b2:	681b      	ldr	r3, [r3, #0]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	20000000 	.word	0x20000000

080045c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045c8:	f7ff fff0 	bl	80045ac <HAL_RCC_GetHCLKFreq>
 80045cc:	4602      	mov	r2, r0
 80045ce:	4b05      	ldr	r3, [pc, #20]	; (80045e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	0a9b      	lsrs	r3, r3, #10
 80045d4:	f003 0307 	and.w	r3, r3, #7
 80045d8:	4903      	ldr	r1, [pc, #12]	; (80045e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045da:	5ccb      	ldrb	r3, [r1, r3]
 80045dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	40023800 	.word	0x40023800
 80045e8:	080081d8 	.word	0x080081d8

080045ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80045f0:	f7ff ffdc 	bl	80045ac <HAL_RCC_GetHCLKFreq>
 80045f4:	4602      	mov	r2, r0
 80045f6:	4b05      	ldr	r3, [pc, #20]	; (800460c <HAL_RCC_GetPCLK2Freq+0x20>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	0b5b      	lsrs	r3, r3, #13
 80045fc:	f003 0307 	and.w	r3, r3, #7
 8004600:	4903      	ldr	r1, [pc, #12]	; (8004610 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004602:	5ccb      	ldrb	r3, [r1, r3]
 8004604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004608:	4618      	mov	r0, r3
 800460a:	bd80      	pop	{r7, pc}
 800460c:	40023800 	.word	0x40023800
 8004610:	080081d8 	.word	0x080081d8

08004614 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e07b      	b.n	800471e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462a:	2b00      	cmp	r3, #0
 800462c:	d108      	bne.n	8004640 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004636:	d009      	beq.n	800464c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	61da      	str	r2, [r3, #28]
 800463e:	e005      	b.n	800464c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d106      	bne.n	800466c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7fd fd8c 	bl	8002184 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2202      	movs	r2, #2
 8004670:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004682:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004694:	431a      	orrs	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800469e:	431a      	orrs	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	431a      	orrs	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	431a      	orrs	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046bc:	431a      	orrs	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046c6:	431a      	orrs	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d0:	ea42 0103 	orr.w	r1, r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	430a      	orrs	r2, r1
 80046e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	0c1b      	lsrs	r3, r3, #16
 80046ea:	f003 0104 	and.w	r1, r3, #4
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	f003 0210 	and.w	r2, r3, #16
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	69da      	ldr	r2, [r3, #28]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800470c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b088      	sub	sp, #32
 800472a:	af00      	add	r7, sp, #0
 800472c:	60f8      	str	r0, [r7, #12]
 800472e:	60b9      	str	r1, [r7, #8]
 8004730:	603b      	str	r3, [r7, #0]
 8004732:	4613      	mov	r3, r2
 8004734:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004736:	2300      	movs	r3, #0
 8004738:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004740:	2b01      	cmp	r3, #1
 8004742:	d101      	bne.n	8004748 <HAL_SPI_Transmit+0x22>
 8004744:	2302      	movs	r3, #2
 8004746:	e126      	b.n	8004996 <HAL_SPI_Transmit+0x270>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004750:	f7fe f854 	bl	80027fc <HAL_GetTick>
 8004754:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004756:	88fb      	ldrh	r3, [r7, #6]
 8004758:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b01      	cmp	r3, #1
 8004764:	d002      	beq.n	800476c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004766:	2302      	movs	r3, #2
 8004768:	77fb      	strb	r3, [r7, #31]
    goto error;
 800476a:	e10b      	b.n	8004984 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d002      	beq.n	8004778 <HAL_SPI_Transmit+0x52>
 8004772:	88fb      	ldrh	r3, [r7, #6]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d102      	bne.n	800477e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800477c:	e102      	b.n	8004984 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2203      	movs	r2, #3
 8004782:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	88fa      	ldrh	r2, [r7, #6]
 8004796:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	88fa      	ldrh	r2, [r7, #6]
 800479c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047c4:	d10f      	bne.n	80047e6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f0:	2b40      	cmp	r3, #64	; 0x40
 80047f2:	d007      	beq.n	8004804 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004802:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800480c:	d14b      	bne.n	80048a6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d002      	beq.n	800481c <HAL_SPI_Transmit+0xf6>
 8004816:	8afb      	ldrh	r3, [r7, #22]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d13e      	bne.n	800489a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004820:	881a      	ldrh	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482c:	1c9a      	adds	r2, r3, #2
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004836:	b29b      	uxth	r3, r3
 8004838:	3b01      	subs	r3, #1
 800483a:	b29a      	uxth	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004840:	e02b      	b.n	800489a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b02      	cmp	r3, #2
 800484e:	d112      	bne.n	8004876 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004854:	881a      	ldrh	r2, [r3, #0]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004860:	1c9a      	adds	r2, r3, #2
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800486a:	b29b      	uxth	r3, r3
 800486c:	3b01      	subs	r3, #1
 800486e:	b29a      	uxth	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	86da      	strh	r2, [r3, #54]	; 0x36
 8004874:	e011      	b.n	800489a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004876:	f7fd ffc1 	bl	80027fc <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	429a      	cmp	r2, r3
 8004884:	d803      	bhi.n	800488e <HAL_SPI_Transmit+0x168>
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800488c:	d102      	bne.n	8004894 <HAL_SPI_Transmit+0x16e>
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d102      	bne.n	800489a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004898:	e074      	b.n	8004984 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800489e:	b29b      	uxth	r3, r3
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1ce      	bne.n	8004842 <HAL_SPI_Transmit+0x11c>
 80048a4:	e04c      	b.n	8004940 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d002      	beq.n	80048b4 <HAL_SPI_Transmit+0x18e>
 80048ae:	8afb      	ldrh	r3, [r7, #22]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d140      	bne.n	8004936 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	330c      	adds	r3, #12
 80048be:	7812      	ldrb	r2, [r2, #0]
 80048c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c6:	1c5a      	adds	r2, r3, #1
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	3b01      	subs	r3, #1
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80048da:	e02c      	b.n	8004936 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d113      	bne.n	8004912 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	330c      	adds	r3, #12
 80048f4:	7812      	ldrb	r2, [r2, #0]
 80048f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fc:	1c5a      	adds	r2, r3, #1
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004906:	b29b      	uxth	r3, r3
 8004908:	3b01      	subs	r3, #1
 800490a:	b29a      	uxth	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004910:	e011      	b.n	8004936 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004912:	f7fd ff73 	bl	80027fc <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	683a      	ldr	r2, [r7, #0]
 800491e:	429a      	cmp	r2, r3
 8004920:	d803      	bhi.n	800492a <HAL_SPI_Transmit+0x204>
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004928:	d102      	bne.n	8004930 <HAL_SPI_Transmit+0x20a>
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d102      	bne.n	8004936 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004934:	e026      	b.n	8004984 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800493a:	b29b      	uxth	r3, r3
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1cd      	bne.n	80048dc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004940:	69ba      	ldr	r2, [r7, #24]
 8004942:	6839      	ldr	r1, [r7, #0]
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f000 f8b3 	bl	8004ab0 <SPI_EndRxTxTransaction>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d002      	beq.n	8004956 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2220      	movs	r2, #32
 8004954:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10a      	bne.n	8004974 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800495e:	2300      	movs	r3, #0
 8004960:	613b      	str	r3, [r7, #16]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	613b      	str	r3, [r7, #16]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	613b      	str	r3, [r7, #16]
 8004972:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004978:	2b00      	cmp	r3, #0
 800497a:	d002      	beq.n	8004982 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	77fb      	strb	r3, [r7, #31]
 8004980:	e000      	b.n	8004984 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004982:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004994:	7ffb      	ldrb	r3, [r7, #31]
}
 8004996:	4618      	mov	r0, r3
 8004998:	3720      	adds	r7, #32
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
	...

080049a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b088      	sub	sp, #32
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	603b      	str	r3, [r7, #0]
 80049ac:	4613      	mov	r3, r2
 80049ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80049b0:	f7fd ff24 	bl	80027fc <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b8:	1a9b      	subs	r3, r3, r2
 80049ba:	683a      	ldr	r2, [r7, #0]
 80049bc:	4413      	add	r3, r2
 80049be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80049c0:	f7fd ff1c 	bl	80027fc <HAL_GetTick>
 80049c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80049c6:	4b39      	ldr	r3, [pc, #228]	; (8004aac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	015b      	lsls	r3, r3, #5
 80049cc:	0d1b      	lsrs	r3, r3, #20
 80049ce:	69fa      	ldr	r2, [r7, #28]
 80049d0:	fb02 f303 	mul.w	r3, r2, r3
 80049d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049d6:	e054      	b.n	8004a82 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049de:	d050      	beq.n	8004a82 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049e0:	f7fd ff0c 	bl	80027fc <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	69fa      	ldr	r2, [r7, #28]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d902      	bls.n	80049f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d13d      	bne.n	8004a72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a0e:	d111      	bne.n	8004a34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a18:	d004      	beq.n	8004a24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a22:	d107      	bne.n	8004a34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a3c:	d10f      	bne.n	8004a5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a4c:	601a      	str	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e017      	b.n	8004aa2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d101      	bne.n	8004a7c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	bf0c      	ite	eq
 8004a92:	2301      	moveq	r3, #1
 8004a94:	2300      	movne	r3, #0
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	461a      	mov	r2, r3
 8004a9a:	79fb      	ldrb	r3, [r7, #7]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d19b      	bne.n	80049d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3720      	adds	r7, #32
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	20000000 	.word	0x20000000

08004ab0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b088      	sub	sp, #32
 8004ab4:	af02      	add	r7, sp, #8
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004abc:	4b1b      	ldr	r3, [pc, #108]	; (8004b2c <SPI_EndRxTxTransaction+0x7c>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a1b      	ldr	r2, [pc, #108]	; (8004b30 <SPI_EndRxTxTransaction+0x80>)
 8004ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac6:	0d5b      	lsrs	r3, r3, #21
 8004ac8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004acc:	fb02 f303 	mul.w	r3, r2, r3
 8004ad0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ada:	d112      	bne.n	8004b02 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	9300      	str	r3, [sp, #0]
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	2180      	movs	r1, #128	; 0x80
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f7ff ff5a 	bl	80049a0 <SPI_WaitFlagStateUntilTimeout>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d016      	beq.n	8004b20 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af6:	f043 0220 	orr.w	r2, r3, #32
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e00f      	b.n	8004b22 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00a      	beq.n	8004b1e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b18:	2b80      	cmp	r3, #128	; 0x80
 8004b1a:	d0f2      	beq.n	8004b02 <SPI_EndRxTxTransaction+0x52>
 8004b1c:	e000      	b.n	8004b20 <SPI_EndRxTxTransaction+0x70>
        break;
 8004b1e:	bf00      	nop
  }

  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3718      	adds	r7, #24
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	20000000 	.word	0x20000000
 8004b30:	165e9f81 	.word	0x165e9f81

08004b34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e03f      	b.n	8004bc6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d106      	bne.n	8004b60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f7fd fb7a 	bl	8002254 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2224      	movs	r2, #36	; 0x24
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68da      	ldr	r2, [r3, #12]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 f929 	bl	8004dd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	691a      	ldr	r2, [r3, #16]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	695a      	ldr	r2, [r3, #20]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68da      	ldr	r2, [r3, #12]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b08a      	sub	sp, #40	; 0x28
 8004bd2:	af02      	add	r7, sp, #8
 8004bd4:	60f8      	str	r0, [r7, #12]
 8004bd6:	60b9      	str	r1, [r7, #8]
 8004bd8:	603b      	str	r3, [r7, #0]
 8004bda:	4613      	mov	r3, r2
 8004bdc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004bde:	2300      	movs	r3, #0
 8004be0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2b20      	cmp	r3, #32
 8004bec:	d17c      	bne.n	8004ce8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d002      	beq.n	8004bfa <HAL_UART_Transmit+0x2c>
 8004bf4:	88fb      	ldrh	r3, [r7, #6]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e075      	b.n	8004cea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d101      	bne.n	8004c0c <HAL_UART_Transmit+0x3e>
 8004c08:	2302      	movs	r3, #2
 8004c0a:	e06e      	b.n	8004cea <HAL_UART_Transmit+0x11c>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2221      	movs	r2, #33	; 0x21
 8004c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c22:	f7fd fdeb 	bl	80027fc <HAL_GetTick>
 8004c26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	88fa      	ldrh	r2, [r7, #6]
 8004c2c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	88fa      	ldrh	r2, [r7, #6]
 8004c32:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c3c:	d108      	bne.n	8004c50 <HAL_UART_Transmit+0x82>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d104      	bne.n	8004c50 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004c46:	2300      	movs	r3, #0
 8004c48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	61bb      	str	r3, [r7, #24]
 8004c4e:	e003      	b.n	8004c58 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c54:	2300      	movs	r3, #0
 8004c56:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004c60:	e02a      	b.n	8004cb8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	2180      	movs	r1, #128	; 0x80
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f000 f840 	bl	8004cf2 <UART_WaitOnFlagUntilTimeout>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d001      	beq.n	8004c7c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e036      	b.n	8004cea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10b      	bne.n	8004c9a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	881b      	ldrh	r3, [r3, #0]
 8004c86:	461a      	mov	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	3302      	adds	r3, #2
 8004c96:	61bb      	str	r3, [r7, #24]
 8004c98:	e007      	b.n	8004caa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	781a      	ldrb	r2, [r3, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1cf      	bne.n	8004c62 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	2140      	movs	r1, #64	; 0x40
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f000 f810 	bl	8004cf2 <UART_WaitOnFlagUntilTimeout>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d001      	beq.n	8004cdc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e006      	b.n	8004cea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	e000      	b.n	8004cea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004ce8:	2302      	movs	r3, #2
  }
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3720      	adds	r7, #32
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b090      	sub	sp, #64	; 0x40
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	60f8      	str	r0, [r7, #12]
 8004cfa:	60b9      	str	r1, [r7, #8]
 8004cfc:	603b      	str	r3, [r7, #0]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d02:	e050      	b.n	8004da6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d0a:	d04c      	beq.n	8004da6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004d0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d007      	beq.n	8004d22 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d12:	f7fd fd73 	bl	80027fc <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d241      	bcs.n	8004da6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	330c      	adds	r3, #12
 8004d28:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2c:	e853 3f00 	ldrex	r3, [r3]
 8004d30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	330c      	adds	r3, #12
 8004d40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d42:	637a      	str	r2, [r7, #52]	; 0x34
 8004d44:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d4a:	e841 2300 	strex	r3, r2, [r1]
 8004d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1e5      	bne.n	8004d22 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	3314      	adds	r3, #20
 8004d5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	e853 3f00 	ldrex	r3, [r3]
 8004d64:	613b      	str	r3, [r7, #16]
   return(result);
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	f023 0301 	bic.w	r3, r3, #1
 8004d6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	3314      	adds	r3, #20
 8004d74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d76:	623a      	str	r2, [r7, #32]
 8004d78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7a:	69f9      	ldr	r1, [r7, #28]
 8004d7c:	6a3a      	ldr	r2, [r7, #32]
 8004d7e:	e841 2300 	strex	r3, r2, [r1]
 8004d82:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1e5      	bne.n	8004d56 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2220      	movs	r2, #32
 8004d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2220      	movs	r2, #32
 8004d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e00f      	b.n	8004dc6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	4013      	ands	r3, r2
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	bf0c      	ite	eq
 8004db6:	2301      	moveq	r3, #1
 8004db8:	2300      	movne	r3, #0
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	79fb      	ldrb	r3, [r7, #7]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d09f      	beq.n	8004d04 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3740      	adds	r7, #64	; 0x40
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
	...

08004dd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dd4:	b0c0      	sub	sp, #256	; 0x100
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dec:	68d9      	ldr	r1, [r3, #12]
 8004dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	ea40 0301 	orr.w	r3, r0, r1
 8004df8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dfe:	689a      	ldr	r2, [r3, #8]
 8004e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	431a      	orrs	r2, r3
 8004e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004e28:	f021 010c 	bic.w	r1, r1, #12
 8004e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e36:	430b      	orrs	r3, r1
 8004e38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e4a:	6999      	ldr	r1, [r3, #24]
 8004e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	ea40 0301 	orr.w	r3, r0, r1
 8004e56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	4b8f      	ldr	r3, [pc, #572]	; (800509c <UART_SetConfig+0x2cc>)
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d005      	beq.n	8004e70 <UART_SetConfig+0xa0>
 8004e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	4b8d      	ldr	r3, [pc, #564]	; (80050a0 <UART_SetConfig+0x2d0>)
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d104      	bne.n	8004e7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e70:	f7ff fbbc 	bl	80045ec <HAL_RCC_GetPCLK2Freq>
 8004e74:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004e78:	e003      	b.n	8004e82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e7a:	f7ff fba3 	bl	80045c4 <HAL_RCC_GetPCLK1Freq>
 8004e7e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e86:	69db      	ldr	r3, [r3, #28]
 8004e88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e8c:	f040 810c 	bne.w	80050a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e94:	2200      	movs	r2, #0
 8004e96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e9a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004e9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004ea2:	4622      	mov	r2, r4
 8004ea4:	462b      	mov	r3, r5
 8004ea6:	1891      	adds	r1, r2, r2
 8004ea8:	65b9      	str	r1, [r7, #88]	; 0x58
 8004eaa:	415b      	adcs	r3, r3
 8004eac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004eae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004eb2:	4621      	mov	r1, r4
 8004eb4:	eb12 0801 	adds.w	r8, r2, r1
 8004eb8:	4629      	mov	r1, r5
 8004eba:	eb43 0901 	adc.w	r9, r3, r1
 8004ebe:	f04f 0200 	mov.w	r2, #0
 8004ec2:	f04f 0300 	mov.w	r3, #0
 8004ec6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004eca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ece:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ed2:	4690      	mov	r8, r2
 8004ed4:	4699      	mov	r9, r3
 8004ed6:	4623      	mov	r3, r4
 8004ed8:	eb18 0303 	adds.w	r3, r8, r3
 8004edc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ee0:	462b      	mov	r3, r5
 8004ee2:	eb49 0303 	adc.w	r3, r9, r3
 8004ee6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ef6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004efa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004efe:	460b      	mov	r3, r1
 8004f00:	18db      	adds	r3, r3, r3
 8004f02:	653b      	str	r3, [r7, #80]	; 0x50
 8004f04:	4613      	mov	r3, r2
 8004f06:	eb42 0303 	adc.w	r3, r2, r3
 8004f0a:	657b      	str	r3, [r7, #84]	; 0x54
 8004f0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004f10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004f14:	f7fb fea0 	bl	8000c58 <__aeabi_uldivmod>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	4b61      	ldr	r3, [pc, #388]	; (80050a4 <UART_SetConfig+0x2d4>)
 8004f1e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f22:	095b      	lsrs	r3, r3, #5
 8004f24:	011c      	lsls	r4, r3, #4
 8004f26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f30:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004f34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004f38:	4642      	mov	r2, r8
 8004f3a:	464b      	mov	r3, r9
 8004f3c:	1891      	adds	r1, r2, r2
 8004f3e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004f40:	415b      	adcs	r3, r3
 8004f42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f48:	4641      	mov	r1, r8
 8004f4a:	eb12 0a01 	adds.w	sl, r2, r1
 8004f4e:	4649      	mov	r1, r9
 8004f50:	eb43 0b01 	adc.w	fp, r3, r1
 8004f54:	f04f 0200 	mov.w	r2, #0
 8004f58:	f04f 0300 	mov.w	r3, #0
 8004f5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f68:	4692      	mov	sl, r2
 8004f6a:	469b      	mov	fp, r3
 8004f6c:	4643      	mov	r3, r8
 8004f6e:	eb1a 0303 	adds.w	r3, sl, r3
 8004f72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f76:	464b      	mov	r3, r9
 8004f78:	eb4b 0303 	adc.w	r3, fp, r3
 8004f7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f8c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004f90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004f94:	460b      	mov	r3, r1
 8004f96:	18db      	adds	r3, r3, r3
 8004f98:	643b      	str	r3, [r7, #64]	; 0x40
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	eb42 0303 	adc.w	r3, r2, r3
 8004fa0:	647b      	str	r3, [r7, #68]	; 0x44
 8004fa2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004fa6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004faa:	f7fb fe55 	bl	8000c58 <__aeabi_uldivmod>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	4611      	mov	r1, r2
 8004fb4:	4b3b      	ldr	r3, [pc, #236]	; (80050a4 <UART_SetConfig+0x2d4>)
 8004fb6:	fba3 2301 	umull	r2, r3, r3, r1
 8004fba:	095b      	lsrs	r3, r3, #5
 8004fbc:	2264      	movs	r2, #100	; 0x64
 8004fbe:	fb02 f303 	mul.w	r3, r2, r3
 8004fc2:	1acb      	subs	r3, r1, r3
 8004fc4:	00db      	lsls	r3, r3, #3
 8004fc6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004fca:	4b36      	ldr	r3, [pc, #216]	; (80050a4 <UART_SetConfig+0x2d4>)
 8004fcc:	fba3 2302 	umull	r2, r3, r3, r2
 8004fd0:	095b      	lsrs	r3, r3, #5
 8004fd2:	005b      	lsls	r3, r3, #1
 8004fd4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004fd8:	441c      	add	r4, r3
 8004fda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004fe4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004fe8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004fec:	4642      	mov	r2, r8
 8004fee:	464b      	mov	r3, r9
 8004ff0:	1891      	adds	r1, r2, r2
 8004ff2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ff4:	415b      	adcs	r3, r3
 8004ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ff8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ffc:	4641      	mov	r1, r8
 8004ffe:	1851      	adds	r1, r2, r1
 8005000:	6339      	str	r1, [r7, #48]	; 0x30
 8005002:	4649      	mov	r1, r9
 8005004:	414b      	adcs	r3, r1
 8005006:	637b      	str	r3, [r7, #52]	; 0x34
 8005008:	f04f 0200 	mov.w	r2, #0
 800500c:	f04f 0300 	mov.w	r3, #0
 8005010:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005014:	4659      	mov	r1, fp
 8005016:	00cb      	lsls	r3, r1, #3
 8005018:	4651      	mov	r1, sl
 800501a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800501e:	4651      	mov	r1, sl
 8005020:	00ca      	lsls	r2, r1, #3
 8005022:	4610      	mov	r0, r2
 8005024:	4619      	mov	r1, r3
 8005026:	4603      	mov	r3, r0
 8005028:	4642      	mov	r2, r8
 800502a:	189b      	adds	r3, r3, r2
 800502c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005030:	464b      	mov	r3, r9
 8005032:	460a      	mov	r2, r1
 8005034:	eb42 0303 	adc.w	r3, r2, r3
 8005038:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800503c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005048:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800504c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005050:	460b      	mov	r3, r1
 8005052:	18db      	adds	r3, r3, r3
 8005054:	62bb      	str	r3, [r7, #40]	; 0x28
 8005056:	4613      	mov	r3, r2
 8005058:	eb42 0303 	adc.w	r3, r2, r3
 800505c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800505e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005062:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005066:	f7fb fdf7 	bl	8000c58 <__aeabi_uldivmod>
 800506a:	4602      	mov	r2, r0
 800506c:	460b      	mov	r3, r1
 800506e:	4b0d      	ldr	r3, [pc, #52]	; (80050a4 <UART_SetConfig+0x2d4>)
 8005070:	fba3 1302 	umull	r1, r3, r3, r2
 8005074:	095b      	lsrs	r3, r3, #5
 8005076:	2164      	movs	r1, #100	; 0x64
 8005078:	fb01 f303 	mul.w	r3, r1, r3
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	00db      	lsls	r3, r3, #3
 8005080:	3332      	adds	r3, #50	; 0x32
 8005082:	4a08      	ldr	r2, [pc, #32]	; (80050a4 <UART_SetConfig+0x2d4>)
 8005084:	fba2 2303 	umull	r2, r3, r2, r3
 8005088:	095b      	lsrs	r3, r3, #5
 800508a:	f003 0207 	and.w	r2, r3, #7
 800508e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4422      	add	r2, r4
 8005096:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005098:	e105      	b.n	80052a6 <UART_SetConfig+0x4d6>
 800509a:	bf00      	nop
 800509c:	40011000 	.word	0x40011000
 80050a0:	40011400 	.word	0x40011400
 80050a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050ac:	2200      	movs	r2, #0
 80050ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80050b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80050b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80050ba:	4642      	mov	r2, r8
 80050bc:	464b      	mov	r3, r9
 80050be:	1891      	adds	r1, r2, r2
 80050c0:	6239      	str	r1, [r7, #32]
 80050c2:	415b      	adcs	r3, r3
 80050c4:	627b      	str	r3, [r7, #36]	; 0x24
 80050c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050ca:	4641      	mov	r1, r8
 80050cc:	1854      	adds	r4, r2, r1
 80050ce:	4649      	mov	r1, r9
 80050d0:	eb43 0501 	adc.w	r5, r3, r1
 80050d4:	f04f 0200 	mov.w	r2, #0
 80050d8:	f04f 0300 	mov.w	r3, #0
 80050dc:	00eb      	lsls	r3, r5, #3
 80050de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050e2:	00e2      	lsls	r2, r4, #3
 80050e4:	4614      	mov	r4, r2
 80050e6:	461d      	mov	r5, r3
 80050e8:	4643      	mov	r3, r8
 80050ea:	18e3      	adds	r3, r4, r3
 80050ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80050f0:	464b      	mov	r3, r9
 80050f2:	eb45 0303 	adc.w	r3, r5, r3
 80050f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80050fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005106:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800510a:	f04f 0200 	mov.w	r2, #0
 800510e:	f04f 0300 	mov.w	r3, #0
 8005112:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005116:	4629      	mov	r1, r5
 8005118:	008b      	lsls	r3, r1, #2
 800511a:	4621      	mov	r1, r4
 800511c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005120:	4621      	mov	r1, r4
 8005122:	008a      	lsls	r2, r1, #2
 8005124:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005128:	f7fb fd96 	bl	8000c58 <__aeabi_uldivmod>
 800512c:	4602      	mov	r2, r0
 800512e:	460b      	mov	r3, r1
 8005130:	4b60      	ldr	r3, [pc, #384]	; (80052b4 <UART_SetConfig+0x4e4>)
 8005132:	fba3 2302 	umull	r2, r3, r3, r2
 8005136:	095b      	lsrs	r3, r3, #5
 8005138:	011c      	lsls	r4, r3, #4
 800513a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800513e:	2200      	movs	r2, #0
 8005140:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005144:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005148:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800514c:	4642      	mov	r2, r8
 800514e:	464b      	mov	r3, r9
 8005150:	1891      	adds	r1, r2, r2
 8005152:	61b9      	str	r1, [r7, #24]
 8005154:	415b      	adcs	r3, r3
 8005156:	61fb      	str	r3, [r7, #28]
 8005158:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800515c:	4641      	mov	r1, r8
 800515e:	1851      	adds	r1, r2, r1
 8005160:	6139      	str	r1, [r7, #16]
 8005162:	4649      	mov	r1, r9
 8005164:	414b      	adcs	r3, r1
 8005166:	617b      	str	r3, [r7, #20]
 8005168:	f04f 0200 	mov.w	r2, #0
 800516c:	f04f 0300 	mov.w	r3, #0
 8005170:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005174:	4659      	mov	r1, fp
 8005176:	00cb      	lsls	r3, r1, #3
 8005178:	4651      	mov	r1, sl
 800517a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800517e:	4651      	mov	r1, sl
 8005180:	00ca      	lsls	r2, r1, #3
 8005182:	4610      	mov	r0, r2
 8005184:	4619      	mov	r1, r3
 8005186:	4603      	mov	r3, r0
 8005188:	4642      	mov	r2, r8
 800518a:	189b      	adds	r3, r3, r2
 800518c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005190:	464b      	mov	r3, r9
 8005192:	460a      	mov	r2, r1
 8005194:	eb42 0303 	adc.w	r3, r2, r3
 8005198:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800519c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80051a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80051a8:	f04f 0200 	mov.w	r2, #0
 80051ac:	f04f 0300 	mov.w	r3, #0
 80051b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80051b4:	4649      	mov	r1, r9
 80051b6:	008b      	lsls	r3, r1, #2
 80051b8:	4641      	mov	r1, r8
 80051ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051be:	4641      	mov	r1, r8
 80051c0:	008a      	lsls	r2, r1, #2
 80051c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80051c6:	f7fb fd47 	bl	8000c58 <__aeabi_uldivmod>
 80051ca:	4602      	mov	r2, r0
 80051cc:	460b      	mov	r3, r1
 80051ce:	4b39      	ldr	r3, [pc, #228]	; (80052b4 <UART_SetConfig+0x4e4>)
 80051d0:	fba3 1302 	umull	r1, r3, r3, r2
 80051d4:	095b      	lsrs	r3, r3, #5
 80051d6:	2164      	movs	r1, #100	; 0x64
 80051d8:	fb01 f303 	mul.w	r3, r1, r3
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	011b      	lsls	r3, r3, #4
 80051e0:	3332      	adds	r3, #50	; 0x32
 80051e2:	4a34      	ldr	r2, [pc, #208]	; (80052b4 <UART_SetConfig+0x4e4>)
 80051e4:	fba2 2303 	umull	r2, r3, r2, r3
 80051e8:	095b      	lsrs	r3, r3, #5
 80051ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051ee:	441c      	add	r4, r3
 80051f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051f4:	2200      	movs	r2, #0
 80051f6:	673b      	str	r3, [r7, #112]	; 0x70
 80051f8:	677a      	str	r2, [r7, #116]	; 0x74
 80051fa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80051fe:	4642      	mov	r2, r8
 8005200:	464b      	mov	r3, r9
 8005202:	1891      	adds	r1, r2, r2
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	415b      	adcs	r3, r3
 8005208:	60fb      	str	r3, [r7, #12]
 800520a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800520e:	4641      	mov	r1, r8
 8005210:	1851      	adds	r1, r2, r1
 8005212:	6039      	str	r1, [r7, #0]
 8005214:	4649      	mov	r1, r9
 8005216:	414b      	adcs	r3, r1
 8005218:	607b      	str	r3, [r7, #4]
 800521a:	f04f 0200 	mov.w	r2, #0
 800521e:	f04f 0300 	mov.w	r3, #0
 8005222:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005226:	4659      	mov	r1, fp
 8005228:	00cb      	lsls	r3, r1, #3
 800522a:	4651      	mov	r1, sl
 800522c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005230:	4651      	mov	r1, sl
 8005232:	00ca      	lsls	r2, r1, #3
 8005234:	4610      	mov	r0, r2
 8005236:	4619      	mov	r1, r3
 8005238:	4603      	mov	r3, r0
 800523a:	4642      	mov	r2, r8
 800523c:	189b      	adds	r3, r3, r2
 800523e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005240:	464b      	mov	r3, r9
 8005242:	460a      	mov	r2, r1
 8005244:	eb42 0303 	adc.w	r3, r2, r3
 8005248:	66fb      	str	r3, [r7, #108]	; 0x6c
 800524a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	663b      	str	r3, [r7, #96]	; 0x60
 8005254:	667a      	str	r2, [r7, #100]	; 0x64
 8005256:	f04f 0200 	mov.w	r2, #0
 800525a:	f04f 0300 	mov.w	r3, #0
 800525e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005262:	4649      	mov	r1, r9
 8005264:	008b      	lsls	r3, r1, #2
 8005266:	4641      	mov	r1, r8
 8005268:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800526c:	4641      	mov	r1, r8
 800526e:	008a      	lsls	r2, r1, #2
 8005270:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005274:	f7fb fcf0 	bl	8000c58 <__aeabi_uldivmod>
 8005278:	4602      	mov	r2, r0
 800527a:	460b      	mov	r3, r1
 800527c:	4b0d      	ldr	r3, [pc, #52]	; (80052b4 <UART_SetConfig+0x4e4>)
 800527e:	fba3 1302 	umull	r1, r3, r3, r2
 8005282:	095b      	lsrs	r3, r3, #5
 8005284:	2164      	movs	r1, #100	; 0x64
 8005286:	fb01 f303 	mul.w	r3, r1, r3
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	011b      	lsls	r3, r3, #4
 800528e:	3332      	adds	r3, #50	; 0x32
 8005290:	4a08      	ldr	r2, [pc, #32]	; (80052b4 <UART_SetConfig+0x4e4>)
 8005292:	fba2 2303 	umull	r2, r3, r2, r3
 8005296:	095b      	lsrs	r3, r3, #5
 8005298:	f003 020f 	and.w	r2, r3, #15
 800529c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4422      	add	r2, r4
 80052a4:	609a      	str	r2, [r3, #8]
}
 80052a6:	bf00      	nop
 80052a8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80052ac:	46bd      	mov	sp, r7
 80052ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052b2:	bf00      	nop
 80052b4:	51eb851f 	.word	0x51eb851f

080052b8 <__errno>:
 80052b8:	4b01      	ldr	r3, [pc, #4]	; (80052c0 <__errno+0x8>)
 80052ba:	6818      	ldr	r0, [r3, #0]
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	2000000c 	.word	0x2000000c

080052c4 <__libc_init_array>:
 80052c4:	b570      	push	{r4, r5, r6, lr}
 80052c6:	4d0d      	ldr	r5, [pc, #52]	; (80052fc <__libc_init_array+0x38>)
 80052c8:	4c0d      	ldr	r4, [pc, #52]	; (8005300 <__libc_init_array+0x3c>)
 80052ca:	1b64      	subs	r4, r4, r5
 80052cc:	10a4      	asrs	r4, r4, #2
 80052ce:	2600      	movs	r6, #0
 80052d0:	42a6      	cmp	r6, r4
 80052d2:	d109      	bne.n	80052e8 <__libc_init_array+0x24>
 80052d4:	4d0b      	ldr	r5, [pc, #44]	; (8005304 <__libc_init_array+0x40>)
 80052d6:	4c0c      	ldr	r4, [pc, #48]	; (8005308 <__libc_init_array+0x44>)
 80052d8:	f002 ff02 	bl	80080e0 <_init>
 80052dc:	1b64      	subs	r4, r4, r5
 80052de:	10a4      	asrs	r4, r4, #2
 80052e0:	2600      	movs	r6, #0
 80052e2:	42a6      	cmp	r6, r4
 80052e4:	d105      	bne.n	80052f2 <__libc_init_array+0x2e>
 80052e6:	bd70      	pop	{r4, r5, r6, pc}
 80052e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80052ec:	4798      	blx	r3
 80052ee:	3601      	adds	r6, #1
 80052f0:	e7ee      	b.n	80052d0 <__libc_init_array+0xc>
 80052f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80052f6:	4798      	blx	r3
 80052f8:	3601      	adds	r6, #1
 80052fa:	e7f2      	b.n	80052e2 <__libc_init_array+0x1e>
 80052fc:	080087ec 	.word	0x080087ec
 8005300:	080087ec 	.word	0x080087ec
 8005304:	080087ec 	.word	0x080087ec
 8005308:	080087f0 	.word	0x080087f0

0800530c <memset>:
 800530c:	4402      	add	r2, r0
 800530e:	4603      	mov	r3, r0
 8005310:	4293      	cmp	r3, r2
 8005312:	d100      	bne.n	8005316 <memset+0xa>
 8005314:	4770      	bx	lr
 8005316:	f803 1b01 	strb.w	r1, [r3], #1
 800531a:	e7f9      	b.n	8005310 <memset+0x4>

0800531c <__cvt>:
 800531c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005320:	ec55 4b10 	vmov	r4, r5, d0
 8005324:	2d00      	cmp	r5, #0
 8005326:	460e      	mov	r6, r1
 8005328:	4619      	mov	r1, r3
 800532a:	462b      	mov	r3, r5
 800532c:	bfbb      	ittet	lt
 800532e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005332:	461d      	movlt	r5, r3
 8005334:	2300      	movge	r3, #0
 8005336:	232d      	movlt	r3, #45	; 0x2d
 8005338:	700b      	strb	r3, [r1, #0]
 800533a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800533c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005340:	4691      	mov	r9, r2
 8005342:	f023 0820 	bic.w	r8, r3, #32
 8005346:	bfbc      	itt	lt
 8005348:	4622      	movlt	r2, r4
 800534a:	4614      	movlt	r4, r2
 800534c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005350:	d005      	beq.n	800535e <__cvt+0x42>
 8005352:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005356:	d100      	bne.n	800535a <__cvt+0x3e>
 8005358:	3601      	adds	r6, #1
 800535a:	2102      	movs	r1, #2
 800535c:	e000      	b.n	8005360 <__cvt+0x44>
 800535e:	2103      	movs	r1, #3
 8005360:	ab03      	add	r3, sp, #12
 8005362:	9301      	str	r3, [sp, #4]
 8005364:	ab02      	add	r3, sp, #8
 8005366:	9300      	str	r3, [sp, #0]
 8005368:	ec45 4b10 	vmov	d0, r4, r5
 800536c:	4653      	mov	r3, sl
 800536e:	4632      	mov	r2, r6
 8005370:	f000 fcea 	bl	8005d48 <_dtoa_r>
 8005374:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005378:	4607      	mov	r7, r0
 800537a:	d102      	bne.n	8005382 <__cvt+0x66>
 800537c:	f019 0f01 	tst.w	r9, #1
 8005380:	d022      	beq.n	80053c8 <__cvt+0xac>
 8005382:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005386:	eb07 0906 	add.w	r9, r7, r6
 800538a:	d110      	bne.n	80053ae <__cvt+0x92>
 800538c:	783b      	ldrb	r3, [r7, #0]
 800538e:	2b30      	cmp	r3, #48	; 0x30
 8005390:	d10a      	bne.n	80053a8 <__cvt+0x8c>
 8005392:	2200      	movs	r2, #0
 8005394:	2300      	movs	r3, #0
 8005396:	4620      	mov	r0, r4
 8005398:	4629      	mov	r1, r5
 800539a:	f7fb fb9d 	bl	8000ad8 <__aeabi_dcmpeq>
 800539e:	b918      	cbnz	r0, 80053a8 <__cvt+0x8c>
 80053a0:	f1c6 0601 	rsb	r6, r6, #1
 80053a4:	f8ca 6000 	str.w	r6, [sl]
 80053a8:	f8da 3000 	ldr.w	r3, [sl]
 80053ac:	4499      	add	r9, r3
 80053ae:	2200      	movs	r2, #0
 80053b0:	2300      	movs	r3, #0
 80053b2:	4620      	mov	r0, r4
 80053b4:	4629      	mov	r1, r5
 80053b6:	f7fb fb8f 	bl	8000ad8 <__aeabi_dcmpeq>
 80053ba:	b108      	cbz	r0, 80053c0 <__cvt+0xa4>
 80053bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80053c0:	2230      	movs	r2, #48	; 0x30
 80053c2:	9b03      	ldr	r3, [sp, #12]
 80053c4:	454b      	cmp	r3, r9
 80053c6:	d307      	bcc.n	80053d8 <__cvt+0xbc>
 80053c8:	9b03      	ldr	r3, [sp, #12]
 80053ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80053cc:	1bdb      	subs	r3, r3, r7
 80053ce:	4638      	mov	r0, r7
 80053d0:	6013      	str	r3, [r2, #0]
 80053d2:	b004      	add	sp, #16
 80053d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053d8:	1c59      	adds	r1, r3, #1
 80053da:	9103      	str	r1, [sp, #12]
 80053dc:	701a      	strb	r2, [r3, #0]
 80053de:	e7f0      	b.n	80053c2 <__cvt+0xa6>

080053e0 <__exponent>:
 80053e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053e2:	4603      	mov	r3, r0
 80053e4:	2900      	cmp	r1, #0
 80053e6:	bfb8      	it	lt
 80053e8:	4249      	neglt	r1, r1
 80053ea:	f803 2b02 	strb.w	r2, [r3], #2
 80053ee:	bfb4      	ite	lt
 80053f0:	222d      	movlt	r2, #45	; 0x2d
 80053f2:	222b      	movge	r2, #43	; 0x2b
 80053f4:	2909      	cmp	r1, #9
 80053f6:	7042      	strb	r2, [r0, #1]
 80053f8:	dd2a      	ble.n	8005450 <__exponent+0x70>
 80053fa:	f10d 0407 	add.w	r4, sp, #7
 80053fe:	46a4      	mov	ip, r4
 8005400:	270a      	movs	r7, #10
 8005402:	46a6      	mov	lr, r4
 8005404:	460a      	mov	r2, r1
 8005406:	fb91 f6f7 	sdiv	r6, r1, r7
 800540a:	fb07 1516 	mls	r5, r7, r6, r1
 800540e:	3530      	adds	r5, #48	; 0x30
 8005410:	2a63      	cmp	r2, #99	; 0x63
 8005412:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005416:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800541a:	4631      	mov	r1, r6
 800541c:	dcf1      	bgt.n	8005402 <__exponent+0x22>
 800541e:	3130      	adds	r1, #48	; 0x30
 8005420:	f1ae 0502 	sub.w	r5, lr, #2
 8005424:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005428:	1c44      	adds	r4, r0, #1
 800542a:	4629      	mov	r1, r5
 800542c:	4561      	cmp	r1, ip
 800542e:	d30a      	bcc.n	8005446 <__exponent+0x66>
 8005430:	f10d 0209 	add.w	r2, sp, #9
 8005434:	eba2 020e 	sub.w	r2, r2, lr
 8005438:	4565      	cmp	r5, ip
 800543a:	bf88      	it	hi
 800543c:	2200      	movhi	r2, #0
 800543e:	4413      	add	r3, r2
 8005440:	1a18      	subs	r0, r3, r0
 8005442:	b003      	add	sp, #12
 8005444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005446:	f811 2b01 	ldrb.w	r2, [r1], #1
 800544a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800544e:	e7ed      	b.n	800542c <__exponent+0x4c>
 8005450:	2330      	movs	r3, #48	; 0x30
 8005452:	3130      	adds	r1, #48	; 0x30
 8005454:	7083      	strb	r3, [r0, #2]
 8005456:	70c1      	strb	r1, [r0, #3]
 8005458:	1d03      	adds	r3, r0, #4
 800545a:	e7f1      	b.n	8005440 <__exponent+0x60>

0800545c <_printf_float>:
 800545c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005460:	ed2d 8b02 	vpush	{d8}
 8005464:	b08d      	sub	sp, #52	; 0x34
 8005466:	460c      	mov	r4, r1
 8005468:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800546c:	4616      	mov	r6, r2
 800546e:	461f      	mov	r7, r3
 8005470:	4605      	mov	r5, r0
 8005472:	f001 fa57 	bl	8006924 <_localeconv_r>
 8005476:	f8d0 a000 	ldr.w	sl, [r0]
 800547a:	4650      	mov	r0, sl
 800547c:	f7fa feb0 	bl	80001e0 <strlen>
 8005480:	2300      	movs	r3, #0
 8005482:	930a      	str	r3, [sp, #40]	; 0x28
 8005484:	6823      	ldr	r3, [r4, #0]
 8005486:	9305      	str	r3, [sp, #20]
 8005488:	f8d8 3000 	ldr.w	r3, [r8]
 800548c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005490:	3307      	adds	r3, #7
 8005492:	f023 0307 	bic.w	r3, r3, #7
 8005496:	f103 0208 	add.w	r2, r3, #8
 800549a:	f8c8 2000 	str.w	r2, [r8]
 800549e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80054a6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80054aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80054ae:	9307      	str	r3, [sp, #28]
 80054b0:	f8cd 8018 	str.w	r8, [sp, #24]
 80054b4:	ee08 0a10 	vmov	s16, r0
 80054b8:	4b9f      	ldr	r3, [pc, #636]	; (8005738 <_printf_float+0x2dc>)
 80054ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054c2:	f7fb fb3b 	bl	8000b3c <__aeabi_dcmpun>
 80054c6:	bb88      	cbnz	r0, 800552c <_printf_float+0xd0>
 80054c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054cc:	4b9a      	ldr	r3, [pc, #616]	; (8005738 <_printf_float+0x2dc>)
 80054ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054d2:	f7fb fb15 	bl	8000b00 <__aeabi_dcmple>
 80054d6:	bb48      	cbnz	r0, 800552c <_printf_float+0xd0>
 80054d8:	2200      	movs	r2, #0
 80054da:	2300      	movs	r3, #0
 80054dc:	4640      	mov	r0, r8
 80054de:	4649      	mov	r1, r9
 80054e0:	f7fb fb04 	bl	8000aec <__aeabi_dcmplt>
 80054e4:	b110      	cbz	r0, 80054ec <_printf_float+0x90>
 80054e6:	232d      	movs	r3, #45	; 0x2d
 80054e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054ec:	4b93      	ldr	r3, [pc, #588]	; (800573c <_printf_float+0x2e0>)
 80054ee:	4894      	ldr	r0, [pc, #592]	; (8005740 <_printf_float+0x2e4>)
 80054f0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80054f4:	bf94      	ite	ls
 80054f6:	4698      	movls	r8, r3
 80054f8:	4680      	movhi	r8, r0
 80054fa:	2303      	movs	r3, #3
 80054fc:	6123      	str	r3, [r4, #16]
 80054fe:	9b05      	ldr	r3, [sp, #20]
 8005500:	f023 0204 	bic.w	r2, r3, #4
 8005504:	6022      	str	r2, [r4, #0]
 8005506:	f04f 0900 	mov.w	r9, #0
 800550a:	9700      	str	r7, [sp, #0]
 800550c:	4633      	mov	r3, r6
 800550e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005510:	4621      	mov	r1, r4
 8005512:	4628      	mov	r0, r5
 8005514:	f000 f9d8 	bl	80058c8 <_printf_common>
 8005518:	3001      	adds	r0, #1
 800551a:	f040 8090 	bne.w	800563e <_printf_float+0x1e2>
 800551e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005522:	b00d      	add	sp, #52	; 0x34
 8005524:	ecbd 8b02 	vpop	{d8}
 8005528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800552c:	4642      	mov	r2, r8
 800552e:	464b      	mov	r3, r9
 8005530:	4640      	mov	r0, r8
 8005532:	4649      	mov	r1, r9
 8005534:	f7fb fb02 	bl	8000b3c <__aeabi_dcmpun>
 8005538:	b140      	cbz	r0, 800554c <_printf_float+0xf0>
 800553a:	464b      	mov	r3, r9
 800553c:	2b00      	cmp	r3, #0
 800553e:	bfbc      	itt	lt
 8005540:	232d      	movlt	r3, #45	; 0x2d
 8005542:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005546:	487f      	ldr	r0, [pc, #508]	; (8005744 <_printf_float+0x2e8>)
 8005548:	4b7f      	ldr	r3, [pc, #508]	; (8005748 <_printf_float+0x2ec>)
 800554a:	e7d1      	b.n	80054f0 <_printf_float+0x94>
 800554c:	6863      	ldr	r3, [r4, #4]
 800554e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005552:	9206      	str	r2, [sp, #24]
 8005554:	1c5a      	adds	r2, r3, #1
 8005556:	d13f      	bne.n	80055d8 <_printf_float+0x17c>
 8005558:	2306      	movs	r3, #6
 800555a:	6063      	str	r3, [r4, #4]
 800555c:	9b05      	ldr	r3, [sp, #20]
 800555e:	6861      	ldr	r1, [r4, #4]
 8005560:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005564:	2300      	movs	r3, #0
 8005566:	9303      	str	r3, [sp, #12]
 8005568:	ab0a      	add	r3, sp, #40	; 0x28
 800556a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800556e:	ab09      	add	r3, sp, #36	; 0x24
 8005570:	ec49 8b10 	vmov	d0, r8, r9
 8005574:	9300      	str	r3, [sp, #0]
 8005576:	6022      	str	r2, [r4, #0]
 8005578:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800557c:	4628      	mov	r0, r5
 800557e:	f7ff fecd 	bl	800531c <__cvt>
 8005582:	9b06      	ldr	r3, [sp, #24]
 8005584:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005586:	2b47      	cmp	r3, #71	; 0x47
 8005588:	4680      	mov	r8, r0
 800558a:	d108      	bne.n	800559e <_printf_float+0x142>
 800558c:	1cc8      	adds	r0, r1, #3
 800558e:	db02      	blt.n	8005596 <_printf_float+0x13a>
 8005590:	6863      	ldr	r3, [r4, #4]
 8005592:	4299      	cmp	r1, r3
 8005594:	dd41      	ble.n	800561a <_printf_float+0x1be>
 8005596:	f1ab 0b02 	sub.w	fp, fp, #2
 800559a:	fa5f fb8b 	uxtb.w	fp, fp
 800559e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80055a2:	d820      	bhi.n	80055e6 <_printf_float+0x18a>
 80055a4:	3901      	subs	r1, #1
 80055a6:	465a      	mov	r2, fp
 80055a8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80055ac:	9109      	str	r1, [sp, #36]	; 0x24
 80055ae:	f7ff ff17 	bl	80053e0 <__exponent>
 80055b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055b4:	1813      	adds	r3, r2, r0
 80055b6:	2a01      	cmp	r2, #1
 80055b8:	4681      	mov	r9, r0
 80055ba:	6123      	str	r3, [r4, #16]
 80055bc:	dc02      	bgt.n	80055c4 <_printf_float+0x168>
 80055be:	6822      	ldr	r2, [r4, #0]
 80055c0:	07d2      	lsls	r2, r2, #31
 80055c2:	d501      	bpl.n	80055c8 <_printf_float+0x16c>
 80055c4:	3301      	adds	r3, #1
 80055c6:	6123      	str	r3, [r4, #16]
 80055c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d09c      	beq.n	800550a <_printf_float+0xae>
 80055d0:	232d      	movs	r3, #45	; 0x2d
 80055d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055d6:	e798      	b.n	800550a <_printf_float+0xae>
 80055d8:	9a06      	ldr	r2, [sp, #24]
 80055da:	2a47      	cmp	r2, #71	; 0x47
 80055dc:	d1be      	bne.n	800555c <_printf_float+0x100>
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1bc      	bne.n	800555c <_printf_float+0x100>
 80055e2:	2301      	movs	r3, #1
 80055e4:	e7b9      	b.n	800555a <_printf_float+0xfe>
 80055e6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80055ea:	d118      	bne.n	800561e <_printf_float+0x1c2>
 80055ec:	2900      	cmp	r1, #0
 80055ee:	6863      	ldr	r3, [r4, #4]
 80055f0:	dd0b      	ble.n	800560a <_printf_float+0x1ae>
 80055f2:	6121      	str	r1, [r4, #16]
 80055f4:	b913      	cbnz	r3, 80055fc <_printf_float+0x1a0>
 80055f6:	6822      	ldr	r2, [r4, #0]
 80055f8:	07d0      	lsls	r0, r2, #31
 80055fa:	d502      	bpl.n	8005602 <_printf_float+0x1a6>
 80055fc:	3301      	adds	r3, #1
 80055fe:	440b      	add	r3, r1
 8005600:	6123      	str	r3, [r4, #16]
 8005602:	65a1      	str	r1, [r4, #88]	; 0x58
 8005604:	f04f 0900 	mov.w	r9, #0
 8005608:	e7de      	b.n	80055c8 <_printf_float+0x16c>
 800560a:	b913      	cbnz	r3, 8005612 <_printf_float+0x1b6>
 800560c:	6822      	ldr	r2, [r4, #0]
 800560e:	07d2      	lsls	r2, r2, #31
 8005610:	d501      	bpl.n	8005616 <_printf_float+0x1ba>
 8005612:	3302      	adds	r3, #2
 8005614:	e7f4      	b.n	8005600 <_printf_float+0x1a4>
 8005616:	2301      	movs	r3, #1
 8005618:	e7f2      	b.n	8005600 <_printf_float+0x1a4>
 800561a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800561e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005620:	4299      	cmp	r1, r3
 8005622:	db05      	blt.n	8005630 <_printf_float+0x1d4>
 8005624:	6823      	ldr	r3, [r4, #0]
 8005626:	6121      	str	r1, [r4, #16]
 8005628:	07d8      	lsls	r0, r3, #31
 800562a:	d5ea      	bpl.n	8005602 <_printf_float+0x1a6>
 800562c:	1c4b      	adds	r3, r1, #1
 800562e:	e7e7      	b.n	8005600 <_printf_float+0x1a4>
 8005630:	2900      	cmp	r1, #0
 8005632:	bfd4      	ite	le
 8005634:	f1c1 0202 	rsble	r2, r1, #2
 8005638:	2201      	movgt	r2, #1
 800563a:	4413      	add	r3, r2
 800563c:	e7e0      	b.n	8005600 <_printf_float+0x1a4>
 800563e:	6823      	ldr	r3, [r4, #0]
 8005640:	055a      	lsls	r2, r3, #21
 8005642:	d407      	bmi.n	8005654 <_printf_float+0x1f8>
 8005644:	6923      	ldr	r3, [r4, #16]
 8005646:	4642      	mov	r2, r8
 8005648:	4631      	mov	r1, r6
 800564a:	4628      	mov	r0, r5
 800564c:	47b8      	blx	r7
 800564e:	3001      	adds	r0, #1
 8005650:	d12c      	bne.n	80056ac <_printf_float+0x250>
 8005652:	e764      	b.n	800551e <_printf_float+0xc2>
 8005654:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005658:	f240 80e0 	bls.w	800581c <_printf_float+0x3c0>
 800565c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005660:	2200      	movs	r2, #0
 8005662:	2300      	movs	r3, #0
 8005664:	f7fb fa38 	bl	8000ad8 <__aeabi_dcmpeq>
 8005668:	2800      	cmp	r0, #0
 800566a:	d034      	beq.n	80056d6 <_printf_float+0x27a>
 800566c:	4a37      	ldr	r2, [pc, #220]	; (800574c <_printf_float+0x2f0>)
 800566e:	2301      	movs	r3, #1
 8005670:	4631      	mov	r1, r6
 8005672:	4628      	mov	r0, r5
 8005674:	47b8      	blx	r7
 8005676:	3001      	adds	r0, #1
 8005678:	f43f af51 	beq.w	800551e <_printf_float+0xc2>
 800567c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005680:	429a      	cmp	r2, r3
 8005682:	db02      	blt.n	800568a <_printf_float+0x22e>
 8005684:	6823      	ldr	r3, [r4, #0]
 8005686:	07d8      	lsls	r0, r3, #31
 8005688:	d510      	bpl.n	80056ac <_printf_float+0x250>
 800568a:	ee18 3a10 	vmov	r3, s16
 800568e:	4652      	mov	r2, sl
 8005690:	4631      	mov	r1, r6
 8005692:	4628      	mov	r0, r5
 8005694:	47b8      	blx	r7
 8005696:	3001      	adds	r0, #1
 8005698:	f43f af41 	beq.w	800551e <_printf_float+0xc2>
 800569c:	f04f 0800 	mov.w	r8, #0
 80056a0:	f104 091a 	add.w	r9, r4, #26
 80056a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056a6:	3b01      	subs	r3, #1
 80056a8:	4543      	cmp	r3, r8
 80056aa:	dc09      	bgt.n	80056c0 <_printf_float+0x264>
 80056ac:	6823      	ldr	r3, [r4, #0]
 80056ae:	079b      	lsls	r3, r3, #30
 80056b0:	f100 8105 	bmi.w	80058be <_printf_float+0x462>
 80056b4:	68e0      	ldr	r0, [r4, #12]
 80056b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056b8:	4298      	cmp	r0, r3
 80056ba:	bfb8      	it	lt
 80056bc:	4618      	movlt	r0, r3
 80056be:	e730      	b.n	8005522 <_printf_float+0xc6>
 80056c0:	2301      	movs	r3, #1
 80056c2:	464a      	mov	r2, r9
 80056c4:	4631      	mov	r1, r6
 80056c6:	4628      	mov	r0, r5
 80056c8:	47b8      	blx	r7
 80056ca:	3001      	adds	r0, #1
 80056cc:	f43f af27 	beq.w	800551e <_printf_float+0xc2>
 80056d0:	f108 0801 	add.w	r8, r8, #1
 80056d4:	e7e6      	b.n	80056a4 <_printf_float+0x248>
 80056d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056d8:	2b00      	cmp	r3, #0
 80056da:	dc39      	bgt.n	8005750 <_printf_float+0x2f4>
 80056dc:	4a1b      	ldr	r2, [pc, #108]	; (800574c <_printf_float+0x2f0>)
 80056de:	2301      	movs	r3, #1
 80056e0:	4631      	mov	r1, r6
 80056e2:	4628      	mov	r0, r5
 80056e4:	47b8      	blx	r7
 80056e6:	3001      	adds	r0, #1
 80056e8:	f43f af19 	beq.w	800551e <_printf_float+0xc2>
 80056ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056f0:	4313      	orrs	r3, r2
 80056f2:	d102      	bne.n	80056fa <_printf_float+0x29e>
 80056f4:	6823      	ldr	r3, [r4, #0]
 80056f6:	07d9      	lsls	r1, r3, #31
 80056f8:	d5d8      	bpl.n	80056ac <_printf_float+0x250>
 80056fa:	ee18 3a10 	vmov	r3, s16
 80056fe:	4652      	mov	r2, sl
 8005700:	4631      	mov	r1, r6
 8005702:	4628      	mov	r0, r5
 8005704:	47b8      	blx	r7
 8005706:	3001      	adds	r0, #1
 8005708:	f43f af09 	beq.w	800551e <_printf_float+0xc2>
 800570c:	f04f 0900 	mov.w	r9, #0
 8005710:	f104 0a1a 	add.w	sl, r4, #26
 8005714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005716:	425b      	negs	r3, r3
 8005718:	454b      	cmp	r3, r9
 800571a:	dc01      	bgt.n	8005720 <_printf_float+0x2c4>
 800571c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800571e:	e792      	b.n	8005646 <_printf_float+0x1ea>
 8005720:	2301      	movs	r3, #1
 8005722:	4652      	mov	r2, sl
 8005724:	4631      	mov	r1, r6
 8005726:	4628      	mov	r0, r5
 8005728:	47b8      	blx	r7
 800572a:	3001      	adds	r0, #1
 800572c:	f43f aef7 	beq.w	800551e <_printf_float+0xc2>
 8005730:	f109 0901 	add.w	r9, r9, #1
 8005734:	e7ee      	b.n	8005714 <_printf_float+0x2b8>
 8005736:	bf00      	nop
 8005738:	7fefffff 	.word	0x7fefffff
 800573c:	0800840c 	.word	0x0800840c
 8005740:	08008410 	.word	0x08008410
 8005744:	08008418 	.word	0x08008418
 8005748:	08008414 	.word	0x08008414
 800574c:	0800841c 	.word	0x0800841c
 8005750:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005752:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005754:	429a      	cmp	r2, r3
 8005756:	bfa8      	it	ge
 8005758:	461a      	movge	r2, r3
 800575a:	2a00      	cmp	r2, #0
 800575c:	4691      	mov	r9, r2
 800575e:	dc37      	bgt.n	80057d0 <_printf_float+0x374>
 8005760:	f04f 0b00 	mov.w	fp, #0
 8005764:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005768:	f104 021a 	add.w	r2, r4, #26
 800576c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800576e:	9305      	str	r3, [sp, #20]
 8005770:	eba3 0309 	sub.w	r3, r3, r9
 8005774:	455b      	cmp	r3, fp
 8005776:	dc33      	bgt.n	80057e0 <_printf_float+0x384>
 8005778:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800577c:	429a      	cmp	r2, r3
 800577e:	db3b      	blt.n	80057f8 <_printf_float+0x39c>
 8005780:	6823      	ldr	r3, [r4, #0]
 8005782:	07da      	lsls	r2, r3, #31
 8005784:	d438      	bmi.n	80057f8 <_printf_float+0x39c>
 8005786:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005788:	9a05      	ldr	r2, [sp, #20]
 800578a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800578c:	1a9a      	subs	r2, r3, r2
 800578e:	eba3 0901 	sub.w	r9, r3, r1
 8005792:	4591      	cmp	r9, r2
 8005794:	bfa8      	it	ge
 8005796:	4691      	movge	r9, r2
 8005798:	f1b9 0f00 	cmp.w	r9, #0
 800579c:	dc35      	bgt.n	800580a <_printf_float+0x3ae>
 800579e:	f04f 0800 	mov.w	r8, #0
 80057a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057a6:	f104 0a1a 	add.w	sl, r4, #26
 80057aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057ae:	1a9b      	subs	r3, r3, r2
 80057b0:	eba3 0309 	sub.w	r3, r3, r9
 80057b4:	4543      	cmp	r3, r8
 80057b6:	f77f af79 	ble.w	80056ac <_printf_float+0x250>
 80057ba:	2301      	movs	r3, #1
 80057bc:	4652      	mov	r2, sl
 80057be:	4631      	mov	r1, r6
 80057c0:	4628      	mov	r0, r5
 80057c2:	47b8      	blx	r7
 80057c4:	3001      	adds	r0, #1
 80057c6:	f43f aeaa 	beq.w	800551e <_printf_float+0xc2>
 80057ca:	f108 0801 	add.w	r8, r8, #1
 80057ce:	e7ec      	b.n	80057aa <_printf_float+0x34e>
 80057d0:	4613      	mov	r3, r2
 80057d2:	4631      	mov	r1, r6
 80057d4:	4642      	mov	r2, r8
 80057d6:	4628      	mov	r0, r5
 80057d8:	47b8      	blx	r7
 80057da:	3001      	adds	r0, #1
 80057dc:	d1c0      	bne.n	8005760 <_printf_float+0x304>
 80057de:	e69e      	b.n	800551e <_printf_float+0xc2>
 80057e0:	2301      	movs	r3, #1
 80057e2:	4631      	mov	r1, r6
 80057e4:	4628      	mov	r0, r5
 80057e6:	9205      	str	r2, [sp, #20]
 80057e8:	47b8      	blx	r7
 80057ea:	3001      	adds	r0, #1
 80057ec:	f43f ae97 	beq.w	800551e <_printf_float+0xc2>
 80057f0:	9a05      	ldr	r2, [sp, #20]
 80057f2:	f10b 0b01 	add.w	fp, fp, #1
 80057f6:	e7b9      	b.n	800576c <_printf_float+0x310>
 80057f8:	ee18 3a10 	vmov	r3, s16
 80057fc:	4652      	mov	r2, sl
 80057fe:	4631      	mov	r1, r6
 8005800:	4628      	mov	r0, r5
 8005802:	47b8      	blx	r7
 8005804:	3001      	adds	r0, #1
 8005806:	d1be      	bne.n	8005786 <_printf_float+0x32a>
 8005808:	e689      	b.n	800551e <_printf_float+0xc2>
 800580a:	9a05      	ldr	r2, [sp, #20]
 800580c:	464b      	mov	r3, r9
 800580e:	4442      	add	r2, r8
 8005810:	4631      	mov	r1, r6
 8005812:	4628      	mov	r0, r5
 8005814:	47b8      	blx	r7
 8005816:	3001      	adds	r0, #1
 8005818:	d1c1      	bne.n	800579e <_printf_float+0x342>
 800581a:	e680      	b.n	800551e <_printf_float+0xc2>
 800581c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800581e:	2a01      	cmp	r2, #1
 8005820:	dc01      	bgt.n	8005826 <_printf_float+0x3ca>
 8005822:	07db      	lsls	r3, r3, #31
 8005824:	d538      	bpl.n	8005898 <_printf_float+0x43c>
 8005826:	2301      	movs	r3, #1
 8005828:	4642      	mov	r2, r8
 800582a:	4631      	mov	r1, r6
 800582c:	4628      	mov	r0, r5
 800582e:	47b8      	blx	r7
 8005830:	3001      	adds	r0, #1
 8005832:	f43f ae74 	beq.w	800551e <_printf_float+0xc2>
 8005836:	ee18 3a10 	vmov	r3, s16
 800583a:	4652      	mov	r2, sl
 800583c:	4631      	mov	r1, r6
 800583e:	4628      	mov	r0, r5
 8005840:	47b8      	blx	r7
 8005842:	3001      	adds	r0, #1
 8005844:	f43f ae6b 	beq.w	800551e <_printf_float+0xc2>
 8005848:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800584c:	2200      	movs	r2, #0
 800584e:	2300      	movs	r3, #0
 8005850:	f7fb f942 	bl	8000ad8 <__aeabi_dcmpeq>
 8005854:	b9d8      	cbnz	r0, 800588e <_printf_float+0x432>
 8005856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005858:	f108 0201 	add.w	r2, r8, #1
 800585c:	3b01      	subs	r3, #1
 800585e:	4631      	mov	r1, r6
 8005860:	4628      	mov	r0, r5
 8005862:	47b8      	blx	r7
 8005864:	3001      	adds	r0, #1
 8005866:	d10e      	bne.n	8005886 <_printf_float+0x42a>
 8005868:	e659      	b.n	800551e <_printf_float+0xc2>
 800586a:	2301      	movs	r3, #1
 800586c:	4652      	mov	r2, sl
 800586e:	4631      	mov	r1, r6
 8005870:	4628      	mov	r0, r5
 8005872:	47b8      	blx	r7
 8005874:	3001      	adds	r0, #1
 8005876:	f43f ae52 	beq.w	800551e <_printf_float+0xc2>
 800587a:	f108 0801 	add.w	r8, r8, #1
 800587e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005880:	3b01      	subs	r3, #1
 8005882:	4543      	cmp	r3, r8
 8005884:	dcf1      	bgt.n	800586a <_printf_float+0x40e>
 8005886:	464b      	mov	r3, r9
 8005888:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800588c:	e6dc      	b.n	8005648 <_printf_float+0x1ec>
 800588e:	f04f 0800 	mov.w	r8, #0
 8005892:	f104 0a1a 	add.w	sl, r4, #26
 8005896:	e7f2      	b.n	800587e <_printf_float+0x422>
 8005898:	2301      	movs	r3, #1
 800589a:	4642      	mov	r2, r8
 800589c:	e7df      	b.n	800585e <_printf_float+0x402>
 800589e:	2301      	movs	r3, #1
 80058a0:	464a      	mov	r2, r9
 80058a2:	4631      	mov	r1, r6
 80058a4:	4628      	mov	r0, r5
 80058a6:	47b8      	blx	r7
 80058a8:	3001      	adds	r0, #1
 80058aa:	f43f ae38 	beq.w	800551e <_printf_float+0xc2>
 80058ae:	f108 0801 	add.w	r8, r8, #1
 80058b2:	68e3      	ldr	r3, [r4, #12]
 80058b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80058b6:	1a5b      	subs	r3, r3, r1
 80058b8:	4543      	cmp	r3, r8
 80058ba:	dcf0      	bgt.n	800589e <_printf_float+0x442>
 80058bc:	e6fa      	b.n	80056b4 <_printf_float+0x258>
 80058be:	f04f 0800 	mov.w	r8, #0
 80058c2:	f104 0919 	add.w	r9, r4, #25
 80058c6:	e7f4      	b.n	80058b2 <_printf_float+0x456>

080058c8 <_printf_common>:
 80058c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058cc:	4616      	mov	r6, r2
 80058ce:	4699      	mov	r9, r3
 80058d0:	688a      	ldr	r2, [r1, #8]
 80058d2:	690b      	ldr	r3, [r1, #16]
 80058d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058d8:	4293      	cmp	r3, r2
 80058da:	bfb8      	it	lt
 80058dc:	4613      	movlt	r3, r2
 80058de:	6033      	str	r3, [r6, #0]
 80058e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058e4:	4607      	mov	r7, r0
 80058e6:	460c      	mov	r4, r1
 80058e8:	b10a      	cbz	r2, 80058ee <_printf_common+0x26>
 80058ea:	3301      	adds	r3, #1
 80058ec:	6033      	str	r3, [r6, #0]
 80058ee:	6823      	ldr	r3, [r4, #0]
 80058f0:	0699      	lsls	r1, r3, #26
 80058f2:	bf42      	ittt	mi
 80058f4:	6833      	ldrmi	r3, [r6, #0]
 80058f6:	3302      	addmi	r3, #2
 80058f8:	6033      	strmi	r3, [r6, #0]
 80058fa:	6825      	ldr	r5, [r4, #0]
 80058fc:	f015 0506 	ands.w	r5, r5, #6
 8005900:	d106      	bne.n	8005910 <_printf_common+0x48>
 8005902:	f104 0a19 	add.w	sl, r4, #25
 8005906:	68e3      	ldr	r3, [r4, #12]
 8005908:	6832      	ldr	r2, [r6, #0]
 800590a:	1a9b      	subs	r3, r3, r2
 800590c:	42ab      	cmp	r3, r5
 800590e:	dc26      	bgt.n	800595e <_printf_common+0x96>
 8005910:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005914:	1e13      	subs	r3, r2, #0
 8005916:	6822      	ldr	r2, [r4, #0]
 8005918:	bf18      	it	ne
 800591a:	2301      	movne	r3, #1
 800591c:	0692      	lsls	r2, r2, #26
 800591e:	d42b      	bmi.n	8005978 <_printf_common+0xb0>
 8005920:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005924:	4649      	mov	r1, r9
 8005926:	4638      	mov	r0, r7
 8005928:	47c0      	blx	r8
 800592a:	3001      	adds	r0, #1
 800592c:	d01e      	beq.n	800596c <_printf_common+0xa4>
 800592e:	6823      	ldr	r3, [r4, #0]
 8005930:	68e5      	ldr	r5, [r4, #12]
 8005932:	6832      	ldr	r2, [r6, #0]
 8005934:	f003 0306 	and.w	r3, r3, #6
 8005938:	2b04      	cmp	r3, #4
 800593a:	bf08      	it	eq
 800593c:	1aad      	subeq	r5, r5, r2
 800593e:	68a3      	ldr	r3, [r4, #8]
 8005940:	6922      	ldr	r2, [r4, #16]
 8005942:	bf0c      	ite	eq
 8005944:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005948:	2500      	movne	r5, #0
 800594a:	4293      	cmp	r3, r2
 800594c:	bfc4      	itt	gt
 800594e:	1a9b      	subgt	r3, r3, r2
 8005950:	18ed      	addgt	r5, r5, r3
 8005952:	2600      	movs	r6, #0
 8005954:	341a      	adds	r4, #26
 8005956:	42b5      	cmp	r5, r6
 8005958:	d11a      	bne.n	8005990 <_printf_common+0xc8>
 800595a:	2000      	movs	r0, #0
 800595c:	e008      	b.n	8005970 <_printf_common+0xa8>
 800595e:	2301      	movs	r3, #1
 8005960:	4652      	mov	r2, sl
 8005962:	4649      	mov	r1, r9
 8005964:	4638      	mov	r0, r7
 8005966:	47c0      	blx	r8
 8005968:	3001      	adds	r0, #1
 800596a:	d103      	bne.n	8005974 <_printf_common+0xac>
 800596c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005974:	3501      	adds	r5, #1
 8005976:	e7c6      	b.n	8005906 <_printf_common+0x3e>
 8005978:	18e1      	adds	r1, r4, r3
 800597a:	1c5a      	adds	r2, r3, #1
 800597c:	2030      	movs	r0, #48	; 0x30
 800597e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005982:	4422      	add	r2, r4
 8005984:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005988:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800598c:	3302      	adds	r3, #2
 800598e:	e7c7      	b.n	8005920 <_printf_common+0x58>
 8005990:	2301      	movs	r3, #1
 8005992:	4622      	mov	r2, r4
 8005994:	4649      	mov	r1, r9
 8005996:	4638      	mov	r0, r7
 8005998:	47c0      	blx	r8
 800599a:	3001      	adds	r0, #1
 800599c:	d0e6      	beq.n	800596c <_printf_common+0xa4>
 800599e:	3601      	adds	r6, #1
 80059a0:	e7d9      	b.n	8005956 <_printf_common+0x8e>
	...

080059a4 <_printf_i>:
 80059a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059a8:	7e0f      	ldrb	r7, [r1, #24]
 80059aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80059ac:	2f78      	cmp	r7, #120	; 0x78
 80059ae:	4691      	mov	r9, r2
 80059b0:	4680      	mov	r8, r0
 80059b2:	460c      	mov	r4, r1
 80059b4:	469a      	mov	sl, r3
 80059b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80059ba:	d807      	bhi.n	80059cc <_printf_i+0x28>
 80059bc:	2f62      	cmp	r7, #98	; 0x62
 80059be:	d80a      	bhi.n	80059d6 <_printf_i+0x32>
 80059c0:	2f00      	cmp	r7, #0
 80059c2:	f000 80d8 	beq.w	8005b76 <_printf_i+0x1d2>
 80059c6:	2f58      	cmp	r7, #88	; 0x58
 80059c8:	f000 80a3 	beq.w	8005b12 <_printf_i+0x16e>
 80059cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80059d4:	e03a      	b.n	8005a4c <_printf_i+0xa8>
 80059d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80059da:	2b15      	cmp	r3, #21
 80059dc:	d8f6      	bhi.n	80059cc <_printf_i+0x28>
 80059de:	a101      	add	r1, pc, #4	; (adr r1, 80059e4 <_printf_i+0x40>)
 80059e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059e4:	08005a3d 	.word	0x08005a3d
 80059e8:	08005a51 	.word	0x08005a51
 80059ec:	080059cd 	.word	0x080059cd
 80059f0:	080059cd 	.word	0x080059cd
 80059f4:	080059cd 	.word	0x080059cd
 80059f8:	080059cd 	.word	0x080059cd
 80059fc:	08005a51 	.word	0x08005a51
 8005a00:	080059cd 	.word	0x080059cd
 8005a04:	080059cd 	.word	0x080059cd
 8005a08:	080059cd 	.word	0x080059cd
 8005a0c:	080059cd 	.word	0x080059cd
 8005a10:	08005b5d 	.word	0x08005b5d
 8005a14:	08005a81 	.word	0x08005a81
 8005a18:	08005b3f 	.word	0x08005b3f
 8005a1c:	080059cd 	.word	0x080059cd
 8005a20:	080059cd 	.word	0x080059cd
 8005a24:	08005b7f 	.word	0x08005b7f
 8005a28:	080059cd 	.word	0x080059cd
 8005a2c:	08005a81 	.word	0x08005a81
 8005a30:	080059cd 	.word	0x080059cd
 8005a34:	080059cd 	.word	0x080059cd
 8005a38:	08005b47 	.word	0x08005b47
 8005a3c:	682b      	ldr	r3, [r5, #0]
 8005a3e:	1d1a      	adds	r2, r3, #4
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	602a      	str	r2, [r5, #0]
 8005a44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e0a3      	b.n	8005b98 <_printf_i+0x1f4>
 8005a50:	6820      	ldr	r0, [r4, #0]
 8005a52:	6829      	ldr	r1, [r5, #0]
 8005a54:	0606      	lsls	r6, r0, #24
 8005a56:	f101 0304 	add.w	r3, r1, #4
 8005a5a:	d50a      	bpl.n	8005a72 <_printf_i+0xce>
 8005a5c:	680e      	ldr	r6, [r1, #0]
 8005a5e:	602b      	str	r3, [r5, #0]
 8005a60:	2e00      	cmp	r6, #0
 8005a62:	da03      	bge.n	8005a6c <_printf_i+0xc8>
 8005a64:	232d      	movs	r3, #45	; 0x2d
 8005a66:	4276      	negs	r6, r6
 8005a68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a6c:	485e      	ldr	r0, [pc, #376]	; (8005be8 <_printf_i+0x244>)
 8005a6e:	230a      	movs	r3, #10
 8005a70:	e019      	b.n	8005aa6 <_printf_i+0x102>
 8005a72:	680e      	ldr	r6, [r1, #0]
 8005a74:	602b      	str	r3, [r5, #0]
 8005a76:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a7a:	bf18      	it	ne
 8005a7c:	b236      	sxthne	r6, r6
 8005a7e:	e7ef      	b.n	8005a60 <_printf_i+0xbc>
 8005a80:	682b      	ldr	r3, [r5, #0]
 8005a82:	6820      	ldr	r0, [r4, #0]
 8005a84:	1d19      	adds	r1, r3, #4
 8005a86:	6029      	str	r1, [r5, #0]
 8005a88:	0601      	lsls	r1, r0, #24
 8005a8a:	d501      	bpl.n	8005a90 <_printf_i+0xec>
 8005a8c:	681e      	ldr	r6, [r3, #0]
 8005a8e:	e002      	b.n	8005a96 <_printf_i+0xf2>
 8005a90:	0646      	lsls	r6, r0, #25
 8005a92:	d5fb      	bpl.n	8005a8c <_printf_i+0xe8>
 8005a94:	881e      	ldrh	r6, [r3, #0]
 8005a96:	4854      	ldr	r0, [pc, #336]	; (8005be8 <_printf_i+0x244>)
 8005a98:	2f6f      	cmp	r7, #111	; 0x6f
 8005a9a:	bf0c      	ite	eq
 8005a9c:	2308      	moveq	r3, #8
 8005a9e:	230a      	movne	r3, #10
 8005aa0:	2100      	movs	r1, #0
 8005aa2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005aa6:	6865      	ldr	r5, [r4, #4]
 8005aa8:	60a5      	str	r5, [r4, #8]
 8005aaa:	2d00      	cmp	r5, #0
 8005aac:	bfa2      	ittt	ge
 8005aae:	6821      	ldrge	r1, [r4, #0]
 8005ab0:	f021 0104 	bicge.w	r1, r1, #4
 8005ab4:	6021      	strge	r1, [r4, #0]
 8005ab6:	b90e      	cbnz	r6, 8005abc <_printf_i+0x118>
 8005ab8:	2d00      	cmp	r5, #0
 8005aba:	d04d      	beq.n	8005b58 <_printf_i+0x1b4>
 8005abc:	4615      	mov	r5, r2
 8005abe:	fbb6 f1f3 	udiv	r1, r6, r3
 8005ac2:	fb03 6711 	mls	r7, r3, r1, r6
 8005ac6:	5dc7      	ldrb	r7, [r0, r7]
 8005ac8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005acc:	4637      	mov	r7, r6
 8005ace:	42bb      	cmp	r3, r7
 8005ad0:	460e      	mov	r6, r1
 8005ad2:	d9f4      	bls.n	8005abe <_printf_i+0x11a>
 8005ad4:	2b08      	cmp	r3, #8
 8005ad6:	d10b      	bne.n	8005af0 <_printf_i+0x14c>
 8005ad8:	6823      	ldr	r3, [r4, #0]
 8005ada:	07de      	lsls	r6, r3, #31
 8005adc:	d508      	bpl.n	8005af0 <_printf_i+0x14c>
 8005ade:	6923      	ldr	r3, [r4, #16]
 8005ae0:	6861      	ldr	r1, [r4, #4]
 8005ae2:	4299      	cmp	r1, r3
 8005ae4:	bfde      	ittt	le
 8005ae6:	2330      	movle	r3, #48	; 0x30
 8005ae8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005aec:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005af0:	1b52      	subs	r2, r2, r5
 8005af2:	6122      	str	r2, [r4, #16]
 8005af4:	f8cd a000 	str.w	sl, [sp]
 8005af8:	464b      	mov	r3, r9
 8005afa:	aa03      	add	r2, sp, #12
 8005afc:	4621      	mov	r1, r4
 8005afe:	4640      	mov	r0, r8
 8005b00:	f7ff fee2 	bl	80058c8 <_printf_common>
 8005b04:	3001      	adds	r0, #1
 8005b06:	d14c      	bne.n	8005ba2 <_printf_i+0x1fe>
 8005b08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b0c:	b004      	add	sp, #16
 8005b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b12:	4835      	ldr	r0, [pc, #212]	; (8005be8 <_printf_i+0x244>)
 8005b14:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005b18:	6829      	ldr	r1, [r5, #0]
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b20:	6029      	str	r1, [r5, #0]
 8005b22:	061d      	lsls	r5, r3, #24
 8005b24:	d514      	bpl.n	8005b50 <_printf_i+0x1ac>
 8005b26:	07df      	lsls	r7, r3, #31
 8005b28:	bf44      	itt	mi
 8005b2a:	f043 0320 	orrmi.w	r3, r3, #32
 8005b2e:	6023      	strmi	r3, [r4, #0]
 8005b30:	b91e      	cbnz	r6, 8005b3a <_printf_i+0x196>
 8005b32:	6823      	ldr	r3, [r4, #0]
 8005b34:	f023 0320 	bic.w	r3, r3, #32
 8005b38:	6023      	str	r3, [r4, #0]
 8005b3a:	2310      	movs	r3, #16
 8005b3c:	e7b0      	b.n	8005aa0 <_printf_i+0xfc>
 8005b3e:	6823      	ldr	r3, [r4, #0]
 8005b40:	f043 0320 	orr.w	r3, r3, #32
 8005b44:	6023      	str	r3, [r4, #0]
 8005b46:	2378      	movs	r3, #120	; 0x78
 8005b48:	4828      	ldr	r0, [pc, #160]	; (8005bec <_printf_i+0x248>)
 8005b4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b4e:	e7e3      	b.n	8005b18 <_printf_i+0x174>
 8005b50:	0659      	lsls	r1, r3, #25
 8005b52:	bf48      	it	mi
 8005b54:	b2b6      	uxthmi	r6, r6
 8005b56:	e7e6      	b.n	8005b26 <_printf_i+0x182>
 8005b58:	4615      	mov	r5, r2
 8005b5a:	e7bb      	b.n	8005ad4 <_printf_i+0x130>
 8005b5c:	682b      	ldr	r3, [r5, #0]
 8005b5e:	6826      	ldr	r6, [r4, #0]
 8005b60:	6961      	ldr	r1, [r4, #20]
 8005b62:	1d18      	adds	r0, r3, #4
 8005b64:	6028      	str	r0, [r5, #0]
 8005b66:	0635      	lsls	r5, r6, #24
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	d501      	bpl.n	8005b70 <_printf_i+0x1cc>
 8005b6c:	6019      	str	r1, [r3, #0]
 8005b6e:	e002      	b.n	8005b76 <_printf_i+0x1d2>
 8005b70:	0670      	lsls	r0, r6, #25
 8005b72:	d5fb      	bpl.n	8005b6c <_printf_i+0x1c8>
 8005b74:	8019      	strh	r1, [r3, #0]
 8005b76:	2300      	movs	r3, #0
 8005b78:	6123      	str	r3, [r4, #16]
 8005b7a:	4615      	mov	r5, r2
 8005b7c:	e7ba      	b.n	8005af4 <_printf_i+0x150>
 8005b7e:	682b      	ldr	r3, [r5, #0]
 8005b80:	1d1a      	adds	r2, r3, #4
 8005b82:	602a      	str	r2, [r5, #0]
 8005b84:	681d      	ldr	r5, [r3, #0]
 8005b86:	6862      	ldr	r2, [r4, #4]
 8005b88:	2100      	movs	r1, #0
 8005b8a:	4628      	mov	r0, r5
 8005b8c:	f7fa fb30 	bl	80001f0 <memchr>
 8005b90:	b108      	cbz	r0, 8005b96 <_printf_i+0x1f2>
 8005b92:	1b40      	subs	r0, r0, r5
 8005b94:	6060      	str	r0, [r4, #4]
 8005b96:	6863      	ldr	r3, [r4, #4]
 8005b98:	6123      	str	r3, [r4, #16]
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ba0:	e7a8      	b.n	8005af4 <_printf_i+0x150>
 8005ba2:	6923      	ldr	r3, [r4, #16]
 8005ba4:	462a      	mov	r2, r5
 8005ba6:	4649      	mov	r1, r9
 8005ba8:	4640      	mov	r0, r8
 8005baa:	47d0      	blx	sl
 8005bac:	3001      	adds	r0, #1
 8005bae:	d0ab      	beq.n	8005b08 <_printf_i+0x164>
 8005bb0:	6823      	ldr	r3, [r4, #0]
 8005bb2:	079b      	lsls	r3, r3, #30
 8005bb4:	d413      	bmi.n	8005bde <_printf_i+0x23a>
 8005bb6:	68e0      	ldr	r0, [r4, #12]
 8005bb8:	9b03      	ldr	r3, [sp, #12]
 8005bba:	4298      	cmp	r0, r3
 8005bbc:	bfb8      	it	lt
 8005bbe:	4618      	movlt	r0, r3
 8005bc0:	e7a4      	b.n	8005b0c <_printf_i+0x168>
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	4632      	mov	r2, r6
 8005bc6:	4649      	mov	r1, r9
 8005bc8:	4640      	mov	r0, r8
 8005bca:	47d0      	blx	sl
 8005bcc:	3001      	adds	r0, #1
 8005bce:	d09b      	beq.n	8005b08 <_printf_i+0x164>
 8005bd0:	3501      	adds	r5, #1
 8005bd2:	68e3      	ldr	r3, [r4, #12]
 8005bd4:	9903      	ldr	r1, [sp, #12]
 8005bd6:	1a5b      	subs	r3, r3, r1
 8005bd8:	42ab      	cmp	r3, r5
 8005bda:	dcf2      	bgt.n	8005bc2 <_printf_i+0x21e>
 8005bdc:	e7eb      	b.n	8005bb6 <_printf_i+0x212>
 8005bde:	2500      	movs	r5, #0
 8005be0:	f104 0619 	add.w	r6, r4, #25
 8005be4:	e7f5      	b.n	8005bd2 <_printf_i+0x22e>
 8005be6:	bf00      	nop
 8005be8:	0800841e 	.word	0x0800841e
 8005bec:	0800842f 	.word	0x0800842f

08005bf0 <siprintf>:
 8005bf0:	b40e      	push	{r1, r2, r3}
 8005bf2:	b500      	push	{lr}
 8005bf4:	b09c      	sub	sp, #112	; 0x70
 8005bf6:	ab1d      	add	r3, sp, #116	; 0x74
 8005bf8:	9002      	str	r0, [sp, #8]
 8005bfa:	9006      	str	r0, [sp, #24]
 8005bfc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c00:	4809      	ldr	r0, [pc, #36]	; (8005c28 <siprintf+0x38>)
 8005c02:	9107      	str	r1, [sp, #28]
 8005c04:	9104      	str	r1, [sp, #16]
 8005c06:	4909      	ldr	r1, [pc, #36]	; (8005c2c <siprintf+0x3c>)
 8005c08:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c0c:	9105      	str	r1, [sp, #20]
 8005c0e:	6800      	ldr	r0, [r0, #0]
 8005c10:	9301      	str	r3, [sp, #4]
 8005c12:	a902      	add	r1, sp, #8
 8005c14:	f001 fb76 	bl	8007304 <_svfiprintf_r>
 8005c18:	9b02      	ldr	r3, [sp, #8]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	701a      	strb	r2, [r3, #0]
 8005c1e:	b01c      	add	sp, #112	; 0x70
 8005c20:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c24:	b003      	add	sp, #12
 8005c26:	4770      	bx	lr
 8005c28:	2000000c 	.word	0x2000000c
 8005c2c:	ffff0208 	.word	0xffff0208

08005c30 <quorem>:
 8005c30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c34:	6903      	ldr	r3, [r0, #16]
 8005c36:	690c      	ldr	r4, [r1, #16]
 8005c38:	42a3      	cmp	r3, r4
 8005c3a:	4607      	mov	r7, r0
 8005c3c:	f2c0 8081 	blt.w	8005d42 <quorem+0x112>
 8005c40:	3c01      	subs	r4, #1
 8005c42:	f101 0814 	add.w	r8, r1, #20
 8005c46:	f100 0514 	add.w	r5, r0, #20
 8005c4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c4e:	9301      	str	r3, [sp, #4]
 8005c50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005c54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005c60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005c64:	fbb2 f6f3 	udiv	r6, r2, r3
 8005c68:	d331      	bcc.n	8005cce <quorem+0x9e>
 8005c6a:	f04f 0e00 	mov.w	lr, #0
 8005c6e:	4640      	mov	r0, r8
 8005c70:	46ac      	mov	ip, r5
 8005c72:	46f2      	mov	sl, lr
 8005c74:	f850 2b04 	ldr.w	r2, [r0], #4
 8005c78:	b293      	uxth	r3, r2
 8005c7a:	fb06 e303 	mla	r3, r6, r3, lr
 8005c7e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	ebaa 0303 	sub.w	r3, sl, r3
 8005c88:	f8dc a000 	ldr.w	sl, [ip]
 8005c8c:	0c12      	lsrs	r2, r2, #16
 8005c8e:	fa13 f38a 	uxtah	r3, r3, sl
 8005c92:	fb06 e202 	mla	r2, r6, r2, lr
 8005c96:	9300      	str	r3, [sp, #0]
 8005c98:	9b00      	ldr	r3, [sp, #0]
 8005c9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005c9e:	b292      	uxth	r2, r2
 8005ca0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005ca4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ca8:	f8bd 3000 	ldrh.w	r3, [sp]
 8005cac:	4581      	cmp	r9, r0
 8005cae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005cb2:	f84c 3b04 	str.w	r3, [ip], #4
 8005cb6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005cba:	d2db      	bcs.n	8005c74 <quorem+0x44>
 8005cbc:	f855 300b 	ldr.w	r3, [r5, fp]
 8005cc0:	b92b      	cbnz	r3, 8005cce <quorem+0x9e>
 8005cc2:	9b01      	ldr	r3, [sp, #4]
 8005cc4:	3b04      	subs	r3, #4
 8005cc6:	429d      	cmp	r5, r3
 8005cc8:	461a      	mov	r2, r3
 8005cca:	d32e      	bcc.n	8005d2a <quorem+0xfa>
 8005ccc:	613c      	str	r4, [r7, #16]
 8005cce:	4638      	mov	r0, r7
 8005cd0:	f001 f8c4 	bl	8006e5c <__mcmp>
 8005cd4:	2800      	cmp	r0, #0
 8005cd6:	db24      	blt.n	8005d22 <quorem+0xf2>
 8005cd8:	3601      	adds	r6, #1
 8005cda:	4628      	mov	r0, r5
 8005cdc:	f04f 0c00 	mov.w	ip, #0
 8005ce0:	f858 2b04 	ldr.w	r2, [r8], #4
 8005ce4:	f8d0 e000 	ldr.w	lr, [r0]
 8005ce8:	b293      	uxth	r3, r2
 8005cea:	ebac 0303 	sub.w	r3, ip, r3
 8005cee:	0c12      	lsrs	r2, r2, #16
 8005cf0:	fa13 f38e 	uxtah	r3, r3, lr
 8005cf4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005cf8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d02:	45c1      	cmp	r9, r8
 8005d04:	f840 3b04 	str.w	r3, [r0], #4
 8005d08:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005d0c:	d2e8      	bcs.n	8005ce0 <quorem+0xb0>
 8005d0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d16:	b922      	cbnz	r2, 8005d22 <quorem+0xf2>
 8005d18:	3b04      	subs	r3, #4
 8005d1a:	429d      	cmp	r5, r3
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	d30a      	bcc.n	8005d36 <quorem+0x106>
 8005d20:	613c      	str	r4, [r7, #16]
 8005d22:	4630      	mov	r0, r6
 8005d24:	b003      	add	sp, #12
 8005d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d2a:	6812      	ldr	r2, [r2, #0]
 8005d2c:	3b04      	subs	r3, #4
 8005d2e:	2a00      	cmp	r2, #0
 8005d30:	d1cc      	bne.n	8005ccc <quorem+0x9c>
 8005d32:	3c01      	subs	r4, #1
 8005d34:	e7c7      	b.n	8005cc6 <quorem+0x96>
 8005d36:	6812      	ldr	r2, [r2, #0]
 8005d38:	3b04      	subs	r3, #4
 8005d3a:	2a00      	cmp	r2, #0
 8005d3c:	d1f0      	bne.n	8005d20 <quorem+0xf0>
 8005d3e:	3c01      	subs	r4, #1
 8005d40:	e7eb      	b.n	8005d1a <quorem+0xea>
 8005d42:	2000      	movs	r0, #0
 8005d44:	e7ee      	b.n	8005d24 <quorem+0xf4>
	...

08005d48 <_dtoa_r>:
 8005d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d4c:	ed2d 8b04 	vpush	{d8-d9}
 8005d50:	ec57 6b10 	vmov	r6, r7, d0
 8005d54:	b093      	sub	sp, #76	; 0x4c
 8005d56:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005d58:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005d5c:	9106      	str	r1, [sp, #24]
 8005d5e:	ee10 aa10 	vmov	sl, s0
 8005d62:	4604      	mov	r4, r0
 8005d64:	9209      	str	r2, [sp, #36]	; 0x24
 8005d66:	930c      	str	r3, [sp, #48]	; 0x30
 8005d68:	46bb      	mov	fp, r7
 8005d6a:	b975      	cbnz	r5, 8005d8a <_dtoa_r+0x42>
 8005d6c:	2010      	movs	r0, #16
 8005d6e:	f000 fddd 	bl	800692c <malloc>
 8005d72:	4602      	mov	r2, r0
 8005d74:	6260      	str	r0, [r4, #36]	; 0x24
 8005d76:	b920      	cbnz	r0, 8005d82 <_dtoa_r+0x3a>
 8005d78:	4ba7      	ldr	r3, [pc, #668]	; (8006018 <_dtoa_r+0x2d0>)
 8005d7a:	21ea      	movs	r1, #234	; 0xea
 8005d7c:	48a7      	ldr	r0, [pc, #668]	; (800601c <_dtoa_r+0x2d4>)
 8005d7e:	f001 fbd1 	bl	8007524 <__assert_func>
 8005d82:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005d86:	6005      	str	r5, [r0, #0]
 8005d88:	60c5      	str	r5, [r0, #12]
 8005d8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d8c:	6819      	ldr	r1, [r3, #0]
 8005d8e:	b151      	cbz	r1, 8005da6 <_dtoa_r+0x5e>
 8005d90:	685a      	ldr	r2, [r3, #4]
 8005d92:	604a      	str	r2, [r1, #4]
 8005d94:	2301      	movs	r3, #1
 8005d96:	4093      	lsls	r3, r2
 8005d98:	608b      	str	r3, [r1, #8]
 8005d9a:	4620      	mov	r0, r4
 8005d9c:	f000 fe1c 	bl	80069d8 <_Bfree>
 8005da0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005da2:	2200      	movs	r2, #0
 8005da4:	601a      	str	r2, [r3, #0]
 8005da6:	1e3b      	subs	r3, r7, #0
 8005da8:	bfaa      	itet	ge
 8005daa:	2300      	movge	r3, #0
 8005dac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005db0:	f8c8 3000 	strge.w	r3, [r8]
 8005db4:	4b9a      	ldr	r3, [pc, #616]	; (8006020 <_dtoa_r+0x2d8>)
 8005db6:	bfbc      	itt	lt
 8005db8:	2201      	movlt	r2, #1
 8005dba:	f8c8 2000 	strlt.w	r2, [r8]
 8005dbe:	ea33 030b 	bics.w	r3, r3, fp
 8005dc2:	d11b      	bne.n	8005dfc <_dtoa_r+0xb4>
 8005dc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005dc6:	f242 730f 	movw	r3, #9999	; 0x270f
 8005dca:	6013      	str	r3, [r2, #0]
 8005dcc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005dd0:	4333      	orrs	r3, r6
 8005dd2:	f000 8592 	beq.w	80068fa <_dtoa_r+0xbb2>
 8005dd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005dd8:	b963      	cbnz	r3, 8005df4 <_dtoa_r+0xac>
 8005dda:	4b92      	ldr	r3, [pc, #584]	; (8006024 <_dtoa_r+0x2dc>)
 8005ddc:	e022      	b.n	8005e24 <_dtoa_r+0xdc>
 8005dde:	4b92      	ldr	r3, [pc, #584]	; (8006028 <_dtoa_r+0x2e0>)
 8005de0:	9301      	str	r3, [sp, #4]
 8005de2:	3308      	adds	r3, #8
 8005de4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005de6:	6013      	str	r3, [r2, #0]
 8005de8:	9801      	ldr	r0, [sp, #4]
 8005dea:	b013      	add	sp, #76	; 0x4c
 8005dec:	ecbd 8b04 	vpop	{d8-d9}
 8005df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005df4:	4b8b      	ldr	r3, [pc, #556]	; (8006024 <_dtoa_r+0x2dc>)
 8005df6:	9301      	str	r3, [sp, #4]
 8005df8:	3303      	adds	r3, #3
 8005dfa:	e7f3      	b.n	8005de4 <_dtoa_r+0x9c>
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	2300      	movs	r3, #0
 8005e00:	4650      	mov	r0, sl
 8005e02:	4659      	mov	r1, fp
 8005e04:	f7fa fe68 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e08:	ec4b ab19 	vmov	d9, sl, fp
 8005e0c:	4680      	mov	r8, r0
 8005e0e:	b158      	cbz	r0, 8005e28 <_dtoa_r+0xe0>
 8005e10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e12:	2301      	movs	r3, #1
 8005e14:	6013      	str	r3, [r2, #0]
 8005e16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f000 856b 	beq.w	80068f4 <_dtoa_r+0xbac>
 8005e1e:	4883      	ldr	r0, [pc, #524]	; (800602c <_dtoa_r+0x2e4>)
 8005e20:	6018      	str	r0, [r3, #0]
 8005e22:	1e43      	subs	r3, r0, #1
 8005e24:	9301      	str	r3, [sp, #4]
 8005e26:	e7df      	b.n	8005de8 <_dtoa_r+0xa0>
 8005e28:	ec4b ab10 	vmov	d0, sl, fp
 8005e2c:	aa10      	add	r2, sp, #64	; 0x40
 8005e2e:	a911      	add	r1, sp, #68	; 0x44
 8005e30:	4620      	mov	r0, r4
 8005e32:	f001 f8b9 	bl	8006fa8 <__d2b>
 8005e36:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005e3a:	ee08 0a10 	vmov	s16, r0
 8005e3e:	2d00      	cmp	r5, #0
 8005e40:	f000 8084 	beq.w	8005f4c <_dtoa_r+0x204>
 8005e44:	ee19 3a90 	vmov	r3, s19
 8005e48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e4c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005e50:	4656      	mov	r6, sl
 8005e52:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005e56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005e5a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005e5e:	4b74      	ldr	r3, [pc, #464]	; (8006030 <_dtoa_r+0x2e8>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	4630      	mov	r0, r6
 8005e64:	4639      	mov	r1, r7
 8005e66:	f7fa fa17 	bl	8000298 <__aeabi_dsub>
 8005e6a:	a365      	add	r3, pc, #404	; (adr r3, 8006000 <_dtoa_r+0x2b8>)
 8005e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e70:	f7fa fbca 	bl	8000608 <__aeabi_dmul>
 8005e74:	a364      	add	r3, pc, #400	; (adr r3, 8006008 <_dtoa_r+0x2c0>)
 8005e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7a:	f7fa fa0f 	bl	800029c <__adddf3>
 8005e7e:	4606      	mov	r6, r0
 8005e80:	4628      	mov	r0, r5
 8005e82:	460f      	mov	r7, r1
 8005e84:	f7fa fb56 	bl	8000534 <__aeabi_i2d>
 8005e88:	a361      	add	r3, pc, #388	; (adr r3, 8006010 <_dtoa_r+0x2c8>)
 8005e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8e:	f7fa fbbb 	bl	8000608 <__aeabi_dmul>
 8005e92:	4602      	mov	r2, r0
 8005e94:	460b      	mov	r3, r1
 8005e96:	4630      	mov	r0, r6
 8005e98:	4639      	mov	r1, r7
 8005e9a:	f7fa f9ff 	bl	800029c <__adddf3>
 8005e9e:	4606      	mov	r6, r0
 8005ea0:	460f      	mov	r7, r1
 8005ea2:	f7fa fe61 	bl	8000b68 <__aeabi_d2iz>
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	9000      	str	r0, [sp, #0]
 8005eaa:	2300      	movs	r3, #0
 8005eac:	4630      	mov	r0, r6
 8005eae:	4639      	mov	r1, r7
 8005eb0:	f7fa fe1c 	bl	8000aec <__aeabi_dcmplt>
 8005eb4:	b150      	cbz	r0, 8005ecc <_dtoa_r+0x184>
 8005eb6:	9800      	ldr	r0, [sp, #0]
 8005eb8:	f7fa fb3c 	bl	8000534 <__aeabi_i2d>
 8005ebc:	4632      	mov	r2, r6
 8005ebe:	463b      	mov	r3, r7
 8005ec0:	f7fa fe0a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ec4:	b910      	cbnz	r0, 8005ecc <_dtoa_r+0x184>
 8005ec6:	9b00      	ldr	r3, [sp, #0]
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	9300      	str	r3, [sp, #0]
 8005ecc:	9b00      	ldr	r3, [sp, #0]
 8005ece:	2b16      	cmp	r3, #22
 8005ed0:	d85a      	bhi.n	8005f88 <_dtoa_r+0x240>
 8005ed2:	9a00      	ldr	r2, [sp, #0]
 8005ed4:	4b57      	ldr	r3, [pc, #348]	; (8006034 <_dtoa_r+0x2ec>)
 8005ed6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ede:	ec51 0b19 	vmov	r0, r1, d9
 8005ee2:	f7fa fe03 	bl	8000aec <__aeabi_dcmplt>
 8005ee6:	2800      	cmp	r0, #0
 8005ee8:	d050      	beq.n	8005f8c <_dtoa_r+0x244>
 8005eea:	9b00      	ldr	r3, [sp, #0]
 8005eec:	3b01      	subs	r3, #1
 8005eee:	9300      	str	r3, [sp, #0]
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ef4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ef6:	1b5d      	subs	r5, r3, r5
 8005ef8:	1e6b      	subs	r3, r5, #1
 8005efa:	9305      	str	r3, [sp, #20]
 8005efc:	bf45      	ittet	mi
 8005efe:	f1c5 0301 	rsbmi	r3, r5, #1
 8005f02:	9304      	strmi	r3, [sp, #16]
 8005f04:	2300      	movpl	r3, #0
 8005f06:	2300      	movmi	r3, #0
 8005f08:	bf4c      	ite	mi
 8005f0a:	9305      	strmi	r3, [sp, #20]
 8005f0c:	9304      	strpl	r3, [sp, #16]
 8005f0e:	9b00      	ldr	r3, [sp, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	db3d      	blt.n	8005f90 <_dtoa_r+0x248>
 8005f14:	9b05      	ldr	r3, [sp, #20]
 8005f16:	9a00      	ldr	r2, [sp, #0]
 8005f18:	920a      	str	r2, [sp, #40]	; 0x28
 8005f1a:	4413      	add	r3, r2
 8005f1c:	9305      	str	r3, [sp, #20]
 8005f1e:	2300      	movs	r3, #0
 8005f20:	9307      	str	r3, [sp, #28]
 8005f22:	9b06      	ldr	r3, [sp, #24]
 8005f24:	2b09      	cmp	r3, #9
 8005f26:	f200 8089 	bhi.w	800603c <_dtoa_r+0x2f4>
 8005f2a:	2b05      	cmp	r3, #5
 8005f2c:	bfc4      	itt	gt
 8005f2e:	3b04      	subgt	r3, #4
 8005f30:	9306      	strgt	r3, [sp, #24]
 8005f32:	9b06      	ldr	r3, [sp, #24]
 8005f34:	f1a3 0302 	sub.w	r3, r3, #2
 8005f38:	bfcc      	ite	gt
 8005f3a:	2500      	movgt	r5, #0
 8005f3c:	2501      	movle	r5, #1
 8005f3e:	2b03      	cmp	r3, #3
 8005f40:	f200 8087 	bhi.w	8006052 <_dtoa_r+0x30a>
 8005f44:	e8df f003 	tbb	[pc, r3]
 8005f48:	59383a2d 	.word	0x59383a2d
 8005f4c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005f50:	441d      	add	r5, r3
 8005f52:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005f56:	2b20      	cmp	r3, #32
 8005f58:	bfc1      	itttt	gt
 8005f5a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005f5e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005f62:	fa0b f303 	lslgt.w	r3, fp, r3
 8005f66:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005f6a:	bfda      	itte	le
 8005f6c:	f1c3 0320 	rsble	r3, r3, #32
 8005f70:	fa06 f003 	lslle.w	r0, r6, r3
 8005f74:	4318      	orrgt	r0, r3
 8005f76:	f7fa facd 	bl	8000514 <__aeabi_ui2d>
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	4606      	mov	r6, r0
 8005f7e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005f82:	3d01      	subs	r5, #1
 8005f84:	930e      	str	r3, [sp, #56]	; 0x38
 8005f86:	e76a      	b.n	8005e5e <_dtoa_r+0x116>
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e7b2      	b.n	8005ef2 <_dtoa_r+0x1aa>
 8005f8c:	900b      	str	r0, [sp, #44]	; 0x2c
 8005f8e:	e7b1      	b.n	8005ef4 <_dtoa_r+0x1ac>
 8005f90:	9b04      	ldr	r3, [sp, #16]
 8005f92:	9a00      	ldr	r2, [sp, #0]
 8005f94:	1a9b      	subs	r3, r3, r2
 8005f96:	9304      	str	r3, [sp, #16]
 8005f98:	4253      	negs	r3, r2
 8005f9a:	9307      	str	r3, [sp, #28]
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	930a      	str	r3, [sp, #40]	; 0x28
 8005fa0:	e7bf      	b.n	8005f22 <_dtoa_r+0x1da>
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	9308      	str	r3, [sp, #32]
 8005fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	dc55      	bgt.n	8006058 <_dtoa_r+0x310>
 8005fac:	2301      	movs	r3, #1
 8005fae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	9209      	str	r2, [sp, #36]	; 0x24
 8005fb6:	e00c      	b.n	8005fd2 <_dtoa_r+0x28a>
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e7f3      	b.n	8005fa4 <_dtoa_r+0x25c>
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fc0:	9308      	str	r3, [sp, #32]
 8005fc2:	9b00      	ldr	r3, [sp, #0]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	9302      	str	r3, [sp, #8]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	9303      	str	r3, [sp, #12]
 8005fce:	bfb8      	it	lt
 8005fd0:	2301      	movlt	r3, #1
 8005fd2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	6042      	str	r2, [r0, #4]
 8005fd8:	2204      	movs	r2, #4
 8005fda:	f102 0614 	add.w	r6, r2, #20
 8005fde:	429e      	cmp	r6, r3
 8005fe0:	6841      	ldr	r1, [r0, #4]
 8005fe2:	d93d      	bls.n	8006060 <_dtoa_r+0x318>
 8005fe4:	4620      	mov	r0, r4
 8005fe6:	f000 fcb7 	bl	8006958 <_Balloc>
 8005fea:	9001      	str	r0, [sp, #4]
 8005fec:	2800      	cmp	r0, #0
 8005fee:	d13b      	bne.n	8006068 <_dtoa_r+0x320>
 8005ff0:	4b11      	ldr	r3, [pc, #68]	; (8006038 <_dtoa_r+0x2f0>)
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005ff8:	e6c0      	b.n	8005d7c <_dtoa_r+0x34>
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e7df      	b.n	8005fbe <_dtoa_r+0x276>
 8005ffe:	bf00      	nop
 8006000:	636f4361 	.word	0x636f4361
 8006004:	3fd287a7 	.word	0x3fd287a7
 8006008:	8b60c8b3 	.word	0x8b60c8b3
 800600c:	3fc68a28 	.word	0x3fc68a28
 8006010:	509f79fb 	.word	0x509f79fb
 8006014:	3fd34413 	.word	0x3fd34413
 8006018:	0800844d 	.word	0x0800844d
 800601c:	08008464 	.word	0x08008464
 8006020:	7ff00000 	.word	0x7ff00000
 8006024:	08008449 	.word	0x08008449
 8006028:	08008440 	.word	0x08008440
 800602c:	0800841d 	.word	0x0800841d
 8006030:	3ff80000 	.word	0x3ff80000
 8006034:	08008558 	.word	0x08008558
 8006038:	080084bf 	.word	0x080084bf
 800603c:	2501      	movs	r5, #1
 800603e:	2300      	movs	r3, #0
 8006040:	9306      	str	r3, [sp, #24]
 8006042:	9508      	str	r5, [sp, #32]
 8006044:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006048:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800604c:	2200      	movs	r2, #0
 800604e:	2312      	movs	r3, #18
 8006050:	e7b0      	b.n	8005fb4 <_dtoa_r+0x26c>
 8006052:	2301      	movs	r3, #1
 8006054:	9308      	str	r3, [sp, #32]
 8006056:	e7f5      	b.n	8006044 <_dtoa_r+0x2fc>
 8006058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800605a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800605e:	e7b8      	b.n	8005fd2 <_dtoa_r+0x28a>
 8006060:	3101      	adds	r1, #1
 8006062:	6041      	str	r1, [r0, #4]
 8006064:	0052      	lsls	r2, r2, #1
 8006066:	e7b8      	b.n	8005fda <_dtoa_r+0x292>
 8006068:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800606a:	9a01      	ldr	r2, [sp, #4]
 800606c:	601a      	str	r2, [r3, #0]
 800606e:	9b03      	ldr	r3, [sp, #12]
 8006070:	2b0e      	cmp	r3, #14
 8006072:	f200 809d 	bhi.w	80061b0 <_dtoa_r+0x468>
 8006076:	2d00      	cmp	r5, #0
 8006078:	f000 809a 	beq.w	80061b0 <_dtoa_r+0x468>
 800607c:	9b00      	ldr	r3, [sp, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	dd32      	ble.n	80060e8 <_dtoa_r+0x3a0>
 8006082:	4ab7      	ldr	r2, [pc, #732]	; (8006360 <_dtoa_r+0x618>)
 8006084:	f003 030f 	and.w	r3, r3, #15
 8006088:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800608c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006090:	9b00      	ldr	r3, [sp, #0]
 8006092:	05d8      	lsls	r0, r3, #23
 8006094:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006098:	d516      	bpl.n	80060c8 <_dtoa_r+0x380>
 800609a:	4bb2      	ldr	r3, [pc, #712]	; (8006364 <_dtoa_r+0x61c>)
 800609c:	ec51 0b19 	vmov	r0, r1, d9
 80060a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80060a4:	f7fa fbda 	bl	800085c <__aeabi_ddiv>
 80060a8:	f007 070f 	and.w	r7, r7, #15
 80060ac:	4682      	mov	sl, r0
 80060ae:	468b      	mov	fp, r1
 80060b0:	2503      	movs	r5, #3
 80060b2:	4eac      	ldr	r6, [pc, #688]	; (8006364 <_dtoa_r+0x61c>)
 80060b4:	b957      	cbnz	r7, 80060cc <_dtoa_r+0x384>
 80060b6:	4642      	mov	r2, r8
 80060b8:	464b      	mov	r3, r9
 80060ba:	4650      	mov	r0, sl
 80060bc:	4659      	mov	r1, fp
 80060be:	f7fa fbcd 	bl	800085c <__aeabi_ddiv>
 80060c2:	4682      	mov	sl, r0
 80060c4:	468b      	mov	fp, r1
 80060c6:	e028      	b.n	800611a <_dtoa_r+0x3d2>
 80060c8:	2502      	movs	r5, #2
 80060ca:	e7f2      	b.n	80060b2 <_dtoa_r+0x36a>
 80060cc:	07f9      	lsls	r1, r7, #31
 80060ce:	d508      	bpl.n	80060e2 <_dtoa_r+0x39a>
 80060d0:	4640      	mov	r0, r8
 80060d2:	4649      	mov	r1, r9
 80060d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80060d8:	f7fa fa96 	bl	8000608 <__aeabi_dmul>
 80060dc:	3501      	adds	r5, #1
 80060de:	4680      	mov	r8, r0
 80060e0:	4689      	mov	r9, r1
 80060e2:	107f      	asrs	r7, r7, #1
 80060e4:	3608      	adds	r6, #8
 80060e6:	e7e5      	b.n	80060b4 <_dtoa_r+0x36c>
 80060e8:	f000 809b 	beq.w	8006222 <_dtoa_r+0x4da>
 80060ec:	9b00      	ldr	r3, [sp, #0]
 80060ee:	4f9d      	ldr	r7, [pc, #628]	; (8006364 <_dtoa_r+0x61c>)
 80060f0:	425e      	negs	r6, r3
 80060f2:	4b9b      	ldr	r3, [pc, #620]	; (8006360 <_dtoa_r+0x618>)
 80060f4:	f006 020f 	and.w	r2, r6, #15
 80060f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006100:	ec51 0b19 	vmov	r0, r1, d9
 8006104:	f7fa fa80 	bl	8000608 <__aeabi_dmul>
 8006108:	1136      	asrs	r6, r6, #4
 800610a:	4682      	mov	sl, r0
 800610c:	468b      	mov	fp, r1
 800610e:	2300      	movs	r3, #0
 8006110:	2502      	movs	r5, #2
 8006112:	2e00      	cmp	r6, #0
 8006114:	d17a      	bne.n	800620c <_dtoa_r+0x4c4>
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1d3      	bne.n	80060c2 <_dtoa_r+0x37a>
 800611a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800611c:	2b00      	cmp	r3, #0
 800611e:	f000 8082 	beq.w	8006226 <_dtoa_r+0x4de>
 8006122:	4b91      	ldr	r3, [pc, #580]	; (8006368 <_dtoa_r+0x620>)
 8006124:	2200      	movs	r2, #0
 8006126:	4650      	mov	r0, sl
 8006128:	4659      	mov	r1, fp
 800612a:	f7fa fcdf 	bl	8000aec <__aeabi_dcmplt>
 800612e:	2800      	cmp	r0, #0
 8006130:	d079      	beq.n	8006226 <_dtoa_r+0x4de>
 8006132:	9b03      	ldr	r3, [sp, #12]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d076      	beq.n	8006226 <_dtoa_r+0x4de>
 8006138:	9b02      	ldr	r3, [sp, #8]
 800613a:	2b00      	cmp	r3, #0
 800613c:	dd36      	ble.n	80061ac <_dtoa_r+0x464>
 800613e:	9b00      	ldr	r3, [sp, #0]
 8006140:	4650      	mov	r0, sl
 8006142:	4659      	mov	r1, fp
 8006144:	1e5f      	subs	r7, r3, #1
 8006146:	2200      	movs	r2, #0
 8006148:	4b88      	ldr	r3, [pc, #544]	; (800636c <_dtoa_r+0x624>)
 800614a:	f7fa fa5d 	bl	8000608 <__aeabi_dmul>
 800614e:	9e02      	ldr	r6, [sp, #8]
 8006150:	4682      	mov	sl, r0
 8006152:	468b      	mov	fp, r1
 8006154:	3501      	adds	r5, #1
 8006156:	4628      	mov	r0, r5
 8006158:	f7fa f9ec 	bl	8000534 <__aeabi_i2d>
 800615c:	4652      	mov	r2, sl
 800615e:	465b      	mov	r3, fp
 8006160:	f7fa fa52 	bl	8000608 <__aeabi_dmul>
 8006164:	4b82      	ldr	r3, [pc, #520]	; (8006370 <_dtoa_r+0x628>)
 8006166:	2200      	movs	r2, #0
 8006168:	f7fa f898 	bl	800029c <__adddf3>
 800616c:	46d0      	mov	r8, sl
 800616e:	46d9      	mov	r9, fp
 8006170:	4682      	mov	sl, r0
 8006172:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006176:	2e00      	cmp	r6, #0
 8006178:	d158      	bne.n	800622c <_dtoa_r+0x4e4>
 800617a:	4b7e      	ldr	r3, [pc, #504]	; (8006374 <_dtoa_r+0x62c>)
 800617c:	2200      	movs	r2, #0
 800617e:	4640      	mov	r0, r8
 8006180:	4649      	mov	r1, r9
 8006182:	f7fa f889 	bl	8000298 <__aeabi_dsub>
 8006186:	4652      	mov	r2, sl
 8006188:	465b      	mov	r3, fp
 800618a:	4680      	mov	r8, r0
 800618c:	4689      	mov	r9, r1
 800618e:	f7fa fccb 	bl	8000b28 <__aeabi_dcmpgt>
 8006192:	2800      	cmp	r0, #0
 8006194:	f040 8295 	bne.w	80066c2 <_dtoa_r+0x97a>
 8006198:	4652      	mov	r2, sl
 800619a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800619e:	4640      	mov	r0, r8
 80061a0:	4649      	mov	r1, r9
 80061a2:	f7fa fca3 	bl	8000aec <__aeabi_dcmplt>
 80061a6:	2800      	cmp	r0, #0
 80061a8:	f040 8289 	bne.w	80066be <_dtoa_r+0x976>
 80061ac:	ec5b ab19 	vmov	sl, fp, d9
 80061b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	f2c0 8148 	blt.w	8006448 <_dtoa_r+0x700>
 80061b8:	9a00      	ldr	r2, [sp, #0]
 80061ba:	2a0e      	cmp	r2, #14
 80061bc:	f300 8144 	bgt.w	8006448 <_dtoa_r+0x700>
 80061c0:	4b67      	ldr	r3, [pc, #412]	; (8006360 <_dtoa_r+0x618>)
 80061c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80061ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f280 80d5 	bge.w	800637c <_dtoa_r+0x634>
 80061d2:	9b03      	ldr	r3, [sp, #12]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f300 80d1 	bgt.w	800637c <_dtoa_r+0x634>
 80061da:	f040 826f 	bne.w	80066bc <_dtoa_r+0x974>
 80061de:	4b65      	ldr	r3, [pc, #404]	; (8006374 <_dtoa_r+0x62c>)
 80061e0:	2200      	movs	r2, #0
 80061e2:	4640      	mov	r0, r8
 80061e4:	4649      	mov	r1, r9
 80061e6:	f7fa fa0f 	bl	8000608 <__aeabi_dmul>
 80061ea:	4652      	mov	r2, sl
 80061ec:	465b      	mov	r3, fp
 80061ee:	f7fa fc91 	bl	8000b14 <__aeabi_dcmpge>
 80061f2:	9e03      	ldr	r6, [sp, #12]
 80061f4:	4637      	mov	r7, r6
 80061f6:	2800      	cmp	r0, #0
 80061f8:	f040 8245 	bne.w	8006686 <_dtoa_r+0x93e>
 80061fc:	9d01      	ldr	r5, [sp, #4]
 80061fe:	2331      	movs	r3, #49	; 0x31
 8006200:	f805 3b01 	strb.w	r3, [r5], #1
 8006204:	9b00      	ldr	r3, [sp, #0]
 8006206:	3301      	adds	r3, #1
 8006208:	9300      	str	r3, [sp, #0]
 800620a:	e240      	b.n	800668e <_dtoa_r+0x946>
 800620c:	07f2      	lsls	r2, r6, #31
 800620e:	d505      	bpl.n	800621c <_dtoa_r+0x4d4>
 8006210:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006214:	f7fa f9f8 	bl	8000608 <__aeabi_dmul>
 8006218:	3501      	adds	r5, #1
 800621a:	2301      	movs	r3, #1
 800621c:	1076      	asrs	r6, r6, #1
 800621e:	3708      	adds	r7, #8
 8006220:	e777      	b.n	8006112 <_dtoa_r+0x3ca>
 8006222:	2502      	movs	r5, #2
 8006224:	e779      	b.n	800611a <_dtoa_r+0x3d2>
 8006226:	9f00      	ldr	r7, [sp, #0]
 8006228:	9e03      	ldr	r6, [sp, #12]
 800622a:	e794      	b.n	8006156 <_dtoa_r+0x40e>
 800622c:	9901      	ldr	r1, [sp, #4]
 800622e:	4b4c      	ldr	r3, [pc, #304]	; (8006360 <_dtoa_r+0x618>)
 8006230:	4431      	add	r1, r6
 8006232:	910d      	str	r1, [sp, #52]	; 0x34
 8006234:	9908      	ldr	r1, [sp, #32]
 8006236:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800623a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800623e:	2900      	cmp	r1, #0
 8006240:	d043      	beq.n	80062ca <_dtoa_r+0x582>
 8006242:	494d      	ldr	r1, [pc, #308]	; (8006378 <_dtoa_r+0x630>)
 8006244:	2000      	movs	r0, #0
 8006246:	f7fa fb09 	bl	800085c <__aeabi_ddiv>
 800624a:	4652      	mov	r2, sl
 800624c:	465b      	mov	r3, fp
 800624e:	f7fa f823 	bl	8000298 <__aeabi_dsub>
 8006252:	9d01      	ldr	r5, [sp, #4]
 8006254:	4682      	mov	sl, r0
 8006256:	468b      	mov	fp, r1
 8006258:	4649      	mov	r1, r9
 800625a:	4640      	mov	r0, r8
 800625c:	f7fa fc84 	bl	8000b68 <__aeabi_d2iz>
 8006260:	4606      	mov	r6, r0
 8006262:	f7fa f967 	bl	8000534 <__aeabi_i2d>
 8006266:	4602      	mov	r2, r0
 8006268:	460b      	mov	r3, r1
 800626a:	4640      	mov	r0, r8
 800626c:	4649      	mov	r1, r9
 800626e:	f7fa f813 	bl	8000298 <__aeabi_dsub>
 8006272:	3630      	adds	r6, #48	; 0x30
 8006274:	f805 6b01 	strb.w	r6, [r5], #1
 8006278:	4652      	mov	r2, sl
 800627a:	465b      	mov	r3, fp
 800627c:	4680      	mov	r8, r0
 800627e:	4689      	mov	r9, r1
 8006280:	f7fa fc34 	bl	8000aec <__aeabi_dcmplt>
 8006284:	2800      	cmp	r0, #0
 8006286:	d163      	bne.n	8006350 <_dtoa_r+0x608>
 8006288:	4642      	mov	r2, r8
 800628a:	464b      	mov	r3, r9
 800628c:	4936      	ldr	r1, [pc, #216]	; (8006368 <_dtoa_r+0x620>)
 800628e:	2000      	movs	r0, #0
 8006290:	f7fa f802 	bl	8000298 <__aeabi_dsub>
 8006294:	4652      	mov	r2, sl
 8006296:	465b      	mov	r3, fp
 8006298:	f7fa fc28 	bl	8000aec <__aeabi_dcmplt>
 800629c:	2800      	cmp	r0, #0
 800629e:	f040 80b5 	bne.w	800640c <_dtoa_r+0x6c4>
 80062a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062a4:	429d      	cmp	r5, r3
 80062a6:	d081      	beq.n	80061ac <_dtoa_r+0x464>
 80062a8:	4b30      	ldr	r3, [pc, #192]	; (800636c <_dtoa_r+0x624>)
 80062aa:	2200      	movs	r2, #0
 80062ac:	4650      	mov	r0, sl
 80062ae:	4659      	mov	r1, fp
 80062b0:	f7fa f9aa 	bl	8000608 <__aeabi_dmul>
 80062b4:	4b2d      	ldr	r3, [pc, #180]	; (800636c <_dtoa_r+0x624>)
 80062b6:	4682      	mov	sl, r0
 80062b8:	468b      	mov	fp, r1
 80062ba:	4640      	mov	r0, r8
 80062bc:	4649      	mov	r1, r9
 80062be:	2200      	movs	r2, #0
 80062c0:	f7fa f9a2 	bl	8000608 <__aeabi_dmul>
 80062c4:	4680      	mov	r8, r0
 80062c6:	4689      	mov	r9, r1
 80062c8:	e7c6      	b.n	8006258 <_dtoa_r+0x510>
 80062ca:	4650      	mov	r0, sl
 80062cc:	4659      	mov	r1, fp
 80062ce:	f7fa f99b 	bl	8000608 <__aeabi_dmul>
 80062d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062d4:	9d01      	ldr	r5, [sp, #4]
 80062d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80062d8:	4682      	mov	sl, r0
 80062da:	468b      	mov	fp, r1
 80062dc:	4649      	mov	r1, r9
 80062de:	4640      	mov	r0, r8
 80062e0:	f7fa fc42 	bl	8000b68 <__aeabi_d2iz>
 80062e4:	4606      	mov	r6, r0
 80062e6:	f7fa f925 	bl	8000534 <__aeabi_i2d>
 80062ea:	3630      	adds	r6, #48	; 0x30
 80062ec:	4602      	mov	r2, r0
 80062ee:	460b      	mov	r3, r1
 80062f0:	4640      	mov	r0, r8
 80062f2:	4649      	mov	r1, r9
 80062f4:	f7f9 ffd0 	bl	8000298 <__aeabi_dsub>
 80062f8:	f805 6b01 	strb.w	r6, [r5], #1
 80062fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062fe:	429d      	cmp	r5, r3
 8006300:	4680      	mov	r8, r0
 8006302:	4689      	mov	r9, r1
 8006304:	f04f 0200 	mov.w	r2, #0
 8006308:	d124      	bne.n	8006354 <_dtoa_r+0x60c>
 800630a:	4b1b      	ldr	r3, [pc, #108]	; (8006378 <_dtoa_r+0x630>)
 800630c:	4650      	mov	r0, sl
 800630e:	4659      	mov	r1, fp
 8006310:	f7f9 ffc4 	bl	800029c <__adddf3>
 8006314:	4602      	mov	r2, r0
 8006316:	460b      	mov	r3, r1
 8006318:	4640      	mov	r0, r8
 800631a:	4649      	mov	r1, r9
 800631c:	f7fa fc04 	bl	8000b28 <__aeabi_dcmpgt>
 8006320:	2800      	cmp	r0, #0
 8006322:	d173      	bne.n	800640c <_dtoa_r+0x6c4>
 8006324:	4652      	mov	r2, sl
 8006326:	465b      	mov	r3, fp
 8006328:	4913      	ldr	r1, [pc, #76]	; (8006378 <_dtoa_r+0x630>)
 800632a:	2000      	movs	r0, #0
 800632c:	f7f9 ffb4 	bl	8000298 <__aeabi_dsub>
 8006330:	4602      	mov	r2, r0
 8006332:	460b      	mov	r3, r1
 8006334:	4640      	mov	r0, r8
 8006336:	4649      	mov	r1, r9
 8006338:	f7fa fbd8 	bl	8000aec <__aeabi_dcmplt>
 800633c:	2800      	cmp	r0, #0
 800633e:	f43f af35 	beq.w	80061ac <_dtoa_r+0x464>
 8006342:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006344:	1e6b      	subs	r3, r5, #1
 8006346:	930f      	str	r3, [sp, #60]	; 0x3c
 8006348:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800634c:	2b30      	cmp	r3, #48	; 0x30
 800634e:	d0f8      	beq.n	8006342 <_dtoa_r+0x5fa>
 8006350:	9700      	str	r7, [sp, #0]
 8006352:	e049      	b.n	80063e8 <_dtoa_r+0x6a0>
 8006354:	4b05      	ldr	r3, [pc, #20]	; (800636c <_dtoa_r+0x624>)
 8006356:	f7fa f957 	bl	8000608 <__aeabi_dmul>
 800635a:	4680      	mov	r8, r0
 800635c:	4689      	mov	r9, r1
 800635e:	e7bd      	b.n	80062dc <_dtoa_r+0x594>
 8006360:	08008558 	.word	0x08008558
 8006364:	08008530 	.word	0x08008530
 8006368:	3ff00000 	.word	0x3ff00000
 800636c:	40240000 	.word	0x40240000
 8006370:	401c0000 	.word	0x401c0000
 8006374:	40140000 	.word	0x40140000
 8006378:	3fe00000 	.word	0x3fe00000
 800637c:	9d01      	ldr	r5, [sp, #4]
 800637e:	4656      	mov	r6, sl
 8006380:	465f      	mov	r7, fp
 8006382:	4642      	mov	r2, r8
 8006384:	464b      	mov	r3, r9
 8006386:	4630      	mov	r0, r6
 8006388:	4639      	mov	r1, r7
 800638a:	f7fa fa67 	bl	800085c <__aeabi_ddiv>
 800638e:	f7fa fbeb 	bl	8000b68 <__aeabi_d2iz>
 8006392:	4682      	mov	sl, r0
 8006394:	f7fa f8ce 	bl	8000534 <__aeabi_i2d>
 8006398:	4642      	mov	r2, r8
 800639a:	464b      	mov	r3, r9
 800639c:	f7fa f934 	bl	8000608 <__aeabi_dmul>
 80063a0:	4602      	mov	r2, r0
 80063a2:	460b      	mov	r3, r1
 80063a4:	4630      	mov	r0, r6
 80063a6:	4639      	mov	r1, r7
 80063a8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80063ac:	f7f9 ff74 	bl	8000298 <__aeabi_dsub>
 80063b0:	f805 6b01 	strb.w	r6, [r5], #1
 80063b4:	9e01      	ldr	r6, [sp, #4]
 80063b6:	9f03      	ldr	r7, [sp, #12]
 80063b8:	1bae      	subs	r6, r5, r6
 80063ba:	42b7      	cmp	r7, r6
 80063bc:	4602      	mov	r2, r0
 80063be:	460b      	mov	r3, r1
 80063c0:	d135      	bne.n	800642e <_dtoa_r+0x6e6>
 80063c2:	f7f9 ff6b 	bl	800029c <__adddf3>
 80063c6:	4642      	mov	r2, r8
 80063c8:	464b      	mov	r3, r9
 80063ca:	4606      	mov	r6, r0
 80063cc:	460f      	mov	r7, r1
 80063ce:	f7fa fbab 	bl	8000b28 <__aeabi_dcmpgt>
 80063d2:	b9d0      	cbnz	r0, 800640a <_dtoa_r+0x6c2>
 80063d4:	4642      	mov	r2, r8
 80063d6:	464b      	mov	r3, r9
 80063d8:	4630      	mov	r0, r6
 80063da:	4639      	mov	r1, r7
 80063dc:	f7fa fb7c 	bl	8000ad8 <__aeabi_dcmpeq>
 80063e0:	b110      	cbz	r0, 80063e8 <_dtoa_r+0x6a0>
 80063e2:	f01a 0f01 	tst.w	sl, #1
 80063e6:	d110      	bne.n	800640a <_dtoa_r+0x6c2>
 80063e8:	4620      	mov	r0, r4
 80063ea:	ee18 1a10 	vmov	r1, s16
 80063ee:	f000 faf3 	bl	80069d8 <_Bfree>
 80063f2:	2300      	movs	r3, #0
 80063f4:	9800      	ldr	r0, [sp, #0]
 80063f6:	702b      	strb	r3, [r5, #0]
 80063f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063fa:	3001      	adds	r0, #1
 80063fc:	6018      	str	r0, [r3, #0]
 80063fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006400:	2b00      	cmp	r3, #0
 8006402:	f43f acf1 	beq.w	8005de8 <_dtoa_r+0xa0>
 8006406:	601d      	str	r5, [r3, #0]
 8006408:	e4ee      	b.n	8005de8 <_dtoa_r+0xa0>
 800640a:	9f00      	ldr	r7, [sp, #0]
 800640c:	462b      	mov	r3, r5
 800640e:	461d      	mov	r5, r3
 8006410:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006414:	2a39      	cmp	r2, #57	; 0x39
 8006416:	d106      	bne.n	8006426 <_dtoa_r+0x6de>
 8006418:	9a01      	ldr	r2, [sp, #4]
 800641a:	429a      	cmp	r2, r3
 800641c:	d1f7      	bne.n	800640e <_dtoa_r+0x6c6>
 800641e:	9901      	ldr	r1, [sp, #4]
 8006420:	2230      	movs	r2, #48	; 0x30
 8006422:	3701      	adds	r7, #1
 8006424:	700a      	strb	r2, [r1, #0]
 8006426:	781a      	ldrb	r2, [r3, #0]
 8006428:	3201      	adds	r2, #1
 800642a:	701a      	strb	r2, [r3, #0]
 800642c:	e790      	b.n	8006350 <_dtoa_r+0x608>
 800642e:	4ba6      	ldr	r3, [pc, #664]	; (80066c8 <_dtoa_r+0x980>)
 8006430:	2200      	movs	r2, #0
 8006432:	f7fa f8e9 	bl	8000608 <__aeabi_dmul>
 8006436:	2200      	movs	r2, #0
 8006438:	2300      	movs	r3, #0
 800643a:	4606      	mov	r6, r0
 800643c:	460f      	mov	r7, r1
 800643e:	f7fa fb4b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006442:	2800      	cmp	r0, #0
 8006444:	d09d      	beq.n	8006382 <_dtoa_r+0x63a>
 8006446:	e7cf      	b.n	80063e8 <_dtoa_r+0x6a0>
 8006448:	9a08      	ldr	r2, [sp, #32]
 800644a:	2a00      	cmp	r2, #0
 800644c:	f000 80d7 	beq.w	80065fe <_dtoa_r+0x8b6>
 8006450:	9a06      	ldr	r2, [sp, #24]
 8006452:	2a01      	cmp	r2, #1
 8006454:	f300 80ba 	bgt.w	80065cc <_dtoa_r+0x884>
 8006458:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800645a:	2a00      	cmp	r2, #0
 800645c:	f000 80b2 	beq.w	80065c4 <_dtoa_r+0x87c>
 8006460:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006464:	9e07      	ldr	r6, [sp, #28]
 8006466:	9d04      	ldr	r5, [sp, #16]
 8006468:	9a04      	ldr	r2, [sp, #16]
 800646a:	441a      	add	r2, r3
 800646c:	9204      	str	r2, [sp, #16]
 800646e:	9a05      	ldr	r2, [sp, #20]
 8006470:	2101      	movs	r1, #1
 8006472:	441a      	add	r2, r3
 8006474:	4620      	mov	r0, r4
 8006476:	9205      	str	r2, [sp, #20]
 8006478:	f000 fb66 	bl	8006b48 <__i2b>
 800647c:	4607      	mov	r7, r0
 800647e:	2d00      	cmp	r5, #0
 8006480:	dd0c      	ble.n	800649c <_dtoa_r+0x754>
 8006482:	9b05      	ldr	r3, [sp, #20]
 8006484:	2b00      	cmp	r3, #0
 8006486:	dd09      	ble.n	800649c <_dtoa_r+0x754>
 8006488:	42ab      	cmp	r3, r5
 800648a:	9a04      	ldr	r2, [sp, #16]
 800648c:	bfa8      	it	ge
 800648e:	462b      	movge	r3, r5
 8006490:	1ad2      	subs	r2, r2, r3
 8006492:	9204      	str	r2, [sp, #16]
 8006494:	9a05      	ldr	r2, [sp, #20]
 8006496:	1aed      	subs	r5, r5, r3
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	9305      	str	r3, [sp, #20]
 800649c:	9b07      	ldr	r3, [sp, #28]
 800649e:	b31b      	cbz	r3, 80064e8 <_dtoa_r+0x7a0>
 80064a0:	9b08      	ldr	r3, [sp, #32]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f000 80af 	beq.w	8006606 <_dtoa_r+0x8be>
 80064a8:	2e00      	cmp	r6, #0
 80064aa:	dd13      	ble.n	80064d4 <_dtoa_r+0x78c>
 80064ac:	4639      	mov	r1, r7
 80064ae:	4632      	mov	r2, r6
 80064b0:	4620      	mov	r0, r4
 80064b2:	f000 fc09 	bl	8006cc8 <__pow5mult>
 80064b6:	ee18 2a10 	vmov	r2, s16
 80064ba:	4601      	mov	r1, r0
 80064bc:	4607      	mov	r7, r0
 80064be:	4620      	mov	r0, r4
 80064c0:	f000 fb58 	bl	8006b74 <__multiply>
 80064c4:	ee18 1a10 	vmov	r1, s16
 80064c8:	4680      	mov	r8, r0
 80064ca:	4620      	mov	r0, r4
 80064cc:	f000 fa84 	bl	80069d8 <_Bfree>
 80064d0:	ee08 8a10 	vmov	s16, r8
 80064d4:	9b07      	ldr	r3, [sp, #28]
 80064d6:	1b9a      	subs	r2, r3, r6
 80064d8:	d006      	beq.n	80064e8 <_dtoa_r+0x7a0>
 80064da:	ee18 1a10 	vmov	r1, s16
 80064de:	4620      	mov	r0, r4
 80064e0:	f000 fbf2 	bl	8006cc8 <__pow5mult>
 80064e4:	ee08 0a10 	vmov	s16, r0
 80064e8:	2101      	movs	r1, #1
 80064ea:	4620      	mov	r0, r4
 80064ec:	f000 fb2c 	bl	8006b48 <__i2b>
 80064f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	4606      	mov	r6, r0
 80064f6:	f340 8088 	ble.w	800660a <_dtoa_r+0x8c2>
 80064fa:	461a      	mov	r2, r3
 80064fc:	4601      	mov	r1, r0
 80064fe:	4620      	mov	r0, r4
 8006500:	f000 fbe2 	bl	8006cc8 <__pow5mult>
 8006504:	9b06      	ldr	r3, [sp, #24]
 8006506:	2b01      	cmp	r3, #1
 8006508:	4606      	mov	r6, r0
 800650a:	f340 8081 	ble.w	8006610 <_dtoa_r+0x8c8>
 800650e:	f04f 0800 	mov.w	r8, #0
 8006512:	6933      	ldr	r3, [r6, #16]
 8006514:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006518:	6918      	ldr	r0, [r3, #16]
 800651a:	f000 fac5 	bl	8006aa8 <__hi0bits>
 800651e:	f1c0 0020 	rsb	r0, r0, #32
 8006522:	9b05      	ldr	r3, [sp, #20]
 8006524:	4418      	add	r0, r3
 8006526:	f010 001f 	ands.w	r0, r0, #31
 800652a:	f000 8092 	beq.w	8006652 <_dtoa_r+0x90a>
 800652e:	f1c0 0320 	rsb	r3, r0, #32
 8006532:	2b04      	cmp	r3, #4
 8006534:	f340 808a 	ble.w	800664c <_dtoa_r+0x904>
 8006538:	f1c0 001c 	rsb	r0, r0, #28
 800653c:	9b04      	ldr	r3, [sp, #16]
 800653e:	4403      	add	r3, r0
 8006540:	9304      	str	r3, [sp, #16]
 8006542:	9b05      	ldr	r3, [sp, #20]
 8006544:	4403      	add	r3, r0
 8006546:	4405      	add	r5, r0
 8006548:	9305      	str	r3, [sp, #20]
 800654a:	9b04      	ldr	r3, [sp, #16]
 800654c:	2b00      	cmp	r3, #0
 800654e:	dd07      	ble.n	8006560 <_dtoa_r+0x818>
 8006550:	ee18 1a10 	vmov	r1, s16
 8006554:	461a      	mov	r2, r3
 8006556:	4620      	mov	r0, r4
 8006558:	f000 fc10 	bl	8006d7c <__lshift>
 800655c:	ee08 0a10 	vmov	s16, r0
 8006560:	9b05      	ldr	r3, [sp, #20]
 8006562:	2b00      	cmp	r3, #0
 8006564:	dd05      	ble.n	8006572 <_dtoa_r+0x82a>
 8006566:	4631      	mov	r1, r6
 8006568:	461a      	mov	r2, r3
 800656a:	4620      	mov	r0, r4
 800656c:	f000 fc06 	bl	8006d7c <__lshift>
 8006570:	4606      	mov	r6, r0
 8006572:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006574:	2b00      	cmp	r3, #0
 8006576:	d06e      	beq.n	8006656 <_dtoa_r+0x90e>
 8006578:	ee18 0a10 	vmov	r0, s16
 800657c:	4631      	mov	r1, r6
 800657e:	f000 fc6d 	bl	8006e5c <__mcmp>
 8006582:	2800      	cmp	r0, #0
 8006584:	da67      	bge.n	8006656 <_dtoa_r+0x90e>
 8006586:	9b00      	ldr	r3, [sp, #0]
 8006588:	3b01      	subs	r3, #1
 800658a:	ee18 1a10 	vmov	r1, s16
 800658e:	9300      	str	r3, [sp, #0]
 8006590:	220a      	movs	r2, #10
 8006592:	2300      	movs	r3, #0
 8006594:	4620      	mov	r0, r4
 8006596:	f000 fa41 	bl	8006a1c <__multadd>
 800659a:	9b08      	ldr	r3, [sp, #32]
 800659c:	ee08 0a10 	vmov	s16, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f000 81b1 	beq.w	8006908 <_dtoa_r+0xbc0>
 80065a6:	2300      	movs	r3, #0
 80065a8:	4639      	mov	r1, r7
 80065aa:	220a      	movs	r2, #10
 80065ac:	4620      	mov	r0, r4
 80065ae:	f000 fa35 	bl	8006a1c <__multadd>
 80065b2:	9b02      	ldr	r3, [sp, #8]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	4607      	mov	r7, r0
 80065b8:	f300 808e 	bgt.w	80066d8 <_dtoa_r+0x990>
 80065bc:	9b06      	ldr	r3, [sp, #24]
 80065be:	2b02      	cmp	r3, #2
 80065c0:	dc51      	bgt.n	8006666 <_dtoa_r+0x91e>
 80065c2:	e089      	b.n	80066d8 <_dtoa_r+0x990>
 80065c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80065c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80065ca:	e74b      	b.n	8006464 <_dtoa_r+0x71c>
 80065cc:	9b03      	ldr	r3, [sp, #12]
 80065ce:	1e5e      	subs	r6, r3, #1
 80065d0:	9b07      	ldr	r3, [sp, #28]
 80065d2:	42b3      	cmp	r3, r6
 80065d4:	bfbf      	itttt	lt
 80065d6:	9b07      	ldrlt	r3, [sp, #28]
 80065d8:	9607      	strlt	r6, [sp, #28]
 80065da:	1af2      	sublt	r2, r6, r3
 80065dc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80065de:	bfb6      	itet	lt
 80065e0:	189b      	addlt	r3, r3, r2
 80065e2:	1b9e      	subge	r6, r3, r6
 80065e4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80065e6:	9b03      	ldr	r3, [sp, #12]
 80065e8:	bfb8      	it	lt
 80065ea:	2600      	movlt	r6, #0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	bfb7      	itett	lt
 80065f0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80065f4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80065f8:	1a9d      	sublt	r5, r3, r2
 80065fa:	2300      	movlt	r3, #0
 80065fc:	e734      	b.n	8006468 <_dtoa_r+0x720>
 80065fe:	9e07      	ldr	r6, [sp, #28]
 8006600:	9d04      	ldr	r5, [sp, #16]
 8006602:	9f08      	ldr	r7, [sp, #32]
 8006604:	e73b      	b.n	800647e <_dtoa_r+0x736>
 8006606:	9a07      	ldr	r2, [sp, #28]
 8006608:	e767      	b.n	80064da <_dtoa_r+0x792>
 800660a:	9b06      	ldr	r3, [sp, #24]
 800660c:	2b01      	cmp	r3, #1
 800660e:	dc18      	bgt.n	8006642 <_dtoa_r+0x8fa>
 8006610:	f1ba 0f00 	cmp.w	sl, #0
 8006614:	d115      	bne.n	8006642 <_dtoa_r+0x8fa>
 8006616:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800661a:	b993      	cbnz	r3, 8006642 <_dtoa_r+0x8fa>
 800661c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006620:	0d1b      	lsrs	r3, r3, #20
 8006622:	051b      	lsls	r3, r3, #20
 8006624:	b183      	cbz	r3, 8006648 <_dtoa_r+0x900>
 8006626:	9b04      	ldr	r3, [sp, #16]
 8006628:	3301      	adds	r3, #1
 800662a:	9304      	str	r3, [sp, #16]
 800662c:	9b05      	ldr	r3, [sp, #20]
 800662e:	3301      	adds	r3, #1
 8006630:	9305      	str	r3, [sp, #20]
 8006632:	f04f 0801 	mov.w	r8, #1
 8006636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006638:	2b00      	cmp	r3, #0
 800663a:	f47f af6a 	bne.w	8006512 <_dtoa_r+0x7ca>
 800663e:	2001      	movs	r0, #1
 8006640:	e76f      	b.n	8006522 <_dtoa_r+0x7da>
 8006642:	f04f 0800 	mov.w	r8, #0
 8006646:	e7f6      	b.n	8006636 <_dtoa_r+0x8ee>
 8006648:	4698      	mov	r8, r3
 800664a:	e7f4      	b.n	8006636 <_dtoa_r+0x8ee>
 800664c:	f43f af7d 	beq.w	800654a <_dtoa_r+0x802>
 8006650:	4618      	mov	r0, r3
 8006652:	301c      	adds	r0, #28
 8006654:	e772      	b.n	800653c <_dtoa_r+0x7f4>
 8006656:	9b03      	ldr	r3, [sp, #12]
 8006658:	2b00      	cmp	r3, #0
 800665a:	dc37      	bgt.n	80066cc <_dtoa_r+0x984>
 800665c:	9b06      	ldr	r3, [sp, #24]
 800665e:	2b02      	cmp	r3, #2
 8006660:	dd34      	ble.n	80066cc <_dtoa_r+0x984>
 8006662:	9b03      	ldr	r3, [sp, #12]
 8006664:	9302      	str	r3, [sp, #8]
 8006666:	9b02      	ldr	r3, [sp, #8]
 8006668:	b96b      	cbnz	r3, 8006686 <_dtoa_r+0x93e>
 800666a:	4631      	mov	r1, r6
 800666c:	2205      	movs	r2, #5
 800666e:	4620      	mov	r0, r4
 8006670:	f000 f9d4 	bl	8006a1c <__multadd>
 8006674:	4601      	mov	r1, r0
 8006676:	4606      	mov	r6, r0
 8006678:	ee18 0a10 	vmov	r0, s16
 800667c:	f000 fbee 	bl	8006e5c <__mcmp>
 8006680:	2800      	cmp	r0, #0
 8006682:	f73f adbb 	bgt.w	80061fc <_dtoa_r+0x4b4>
 8006686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006688:	9d01      	ldr	r5, [sp, #4]
 800668a:	43db      	mvns	r3, r3
 800668c:	9300      	str	r3, [sp, #0]
 800668e:	f04f 0800 	mov.w	r8, #0
 8006692:	4631      	mov	r1, r6
 8006694:	4620      	mov	r0, r4
 8006696:	f000 f99f 	bl	80069d8 <_Bfree>
 800669a:	2f00      	cmp	r7, #0
 800669c:	f43f aea4 	beq.w	80063e8 <_dtoa_r+0x6a0>
 80066a0:	f1b8 0f00 	cmp.w	r8, #0
 80066a4:	d005      	beq.n	80066b2 <_dtoa_r+0x96a>
 80066a6:	45b8      	cmp	r8, r7
 80066a8:	d003      	beq.n	80066b2 <_dtoa_r+0x96a>
 80066aa:	4641      	mov	r1, r8
 80066ac:	4620      	mov	r0, r4
 80066ae:	f000 f993 	bl	80069d8 <_Bfree>
 80066b2:	4639      	mov	r1, r7
 80066b4:	4620      	mov	r0, r4
 80066b6:	f000 f98f 	bl	80069d8 <_Bfree>
 80066ba:	e695      	b.n	80063e8 <_dtoa_r+0x6a0>
 80066bc:	2600      	movs	r6, #0
 80066be:	4637      	mov	r7, r6
 80066c0:	e7e1      	b.n	8006686 <_dtoa_r+0x93e>
 80066c2:	9700      	str	r7, [sp, #0]
 80066c4:	4637      	mov	r7, r6
 80066c6:	e599      	b.n	80061fc <_dtoa_r+0x4b4>
 80066c8:	40240000 	.word	0x40240000
 80066cc:	9b08      	ldr	r3, [sp, #32]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f000 80ca 	beq.w	8006868 <_dtoa_r+0xb20>
 80066d4:	9b03      	ldr	r3, [sp, #12]
 80066d6:	9302      	str	r3, [sp, #8]
 80066d8:	2d00      	cmp	r5, #0
 80066da:	dd05      	ble.n	80066e8 <_dtoa_r+0x9a0>
 80066dc:	4639      	mov	r1, r7
 80066de:	462a      	mov	r2, r5
 80066e0:	4620      	mov	r0, r4
 80066e2:	f000 fb4b 	bl	8006d7c <__lshift>
 80066e6:	4607      	mov	r7, r0
 80066e8:	f1b8 0f00 	cmp.w	r8, #0
 80066ec:	d05b      	beq.n	80067a6 <_dtoa_r+0xa5e>
 80066ee:	6879      	ldr	r1, [r7, #4]
 80066f0:	4620      	mov	r0, r4
 80066f2:	f000 f931 	bl	8006958 <_Balloc>
 80066f6:	4605      	mov	r5, r0
 80066f8:	b928      	cbnz	r0, 8006706 <_dtoa_r+0x9be>
 80066fa:	4b87      	ldr	r3, [pc, #540]	; (8006918 <_dtoa_r+0xbd0>)
 80066fc:	4602      	mov	r2, r0
 80066fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006702:	f7ff bb3b 	b.w	8005d7c <_dtoa_r+0x34>
 8006706:	693a      	ldr	r2, [r7, #16]
 8006708:	3202      	adds	r2, #2
 800670a:	0092      	lsls	r2, r2, #2
 800670c:	f107 010c 	add.w	r1, r7, #12
 8006710:	300c      	adds	r0, #12
 8006712:	f000 f913 	bl	800693c <memcpy>
 8006716:	2201      	movs	r2, #1
 8006718:	4629      	mov	r1, r5
 800671a:	4620      	mov	r0, r4
 800671c:	f000 fb2e 	bl	8006d7c <__lshift>
 8006720:	9b01      	ldr	r3, [sp, #4]
 8006722:	f103 0901 	add.w	r9, r3, #1
 8006726:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800672a:	4413      	add	r3, r2
 800672c:	9305      	str	r3, [sp, #20]
 800672e:	f00a 0301 	and.w	r3, sl, #1
 8006732:	46b8      	mov	r8, r7
 8006734:	9304      	str	r3, [sp, #16]
 8006736:	4607      	mov	r7, r0
 8006738:	4631      	mov	r1, r6
 800673a:	ee18 0a10 	vmov	r0, s16
 800673e:	f7ff fa77 	bl	8005c30 <quorem>
 8006742:	4641      	mov	r1, r8
 8006744:	9002      	str	r0, [sp, #8]
 8006746:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800674a:	ee18 0a10 	vmov	r0, s16
 800674e:	f000 fb85 	bl	8006e5c <__mcmp>
 8006752:	463a      	mov	r2, r7
 8006754:	9003      	str	r0, [sp, #12]
 8006756:	4631      	mov	r1, r6
 8006758:	4620      	mov	r0, r4
 800675a:	f000 fb9b 	bl	8006e94 <__mdiff>
 800675e:	68c2      	ldr	r2, [r0, #12]
 8006760:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8006764:	4605      	mov	r5, r0
 8006766:	bb02      	cbnz	r2, 80067aa <_dtoa_r+0xa62>
 8006768:	4601      	mov	r1, r0
 800676a:	ee18 0a10 	vmov	r0, s16
 800676e:	f000 fb75 	bl	8006e5c <__mcmp>
 8006772:	4602      	mov	r2, r0
 8006774:	4629      	mov	r1, r5
 8006776:	4620      	mov	r0, r4
 8006778:	9207      	str	r2, [sp, #28]
 800677a:	f000 f92d 	bl	80069d8 <_Bfree>
 800677e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006782:	ea43 0102 	orr.w	r1, r3, r2
 8006786:	9b04      	ldr	r3, [sp, #16]
 8006788:	430b      	orrs	r3, r1
 800678a:	464d      	mov	r5, r9
 800678c:	d10f      	bne.n	80067ae <_dtoa_r+0xa66>
 800678e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006792:	d02a      	beq.n	80067ea <_dtoa_r+0xaa2>
 8006794:	9b03      	ldr	r3, [sp, #12]
 8006796:	2b00      	cmp	r3, #0
 8006798:	dd02      	ble.n	80067a0 <_dtoa_r+0xa58>
 800679a:	9b02      	ldr	r3, [sp, #8]
 800679c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80067a0:	f88b a000 	strb.w	sl, [fp]
 80067a4:	e775      	b.n	8006692 <_dtoa_r+0x94a>
 80067a6:	4638      	mov	r0, r7
 80067a8:	e7ba      	b.n	8006720 <_dtoa_r+0x9d8>
 80067aa:	2201      	movs	r2, #1
 80067ac:	e7e2      	b.n	8006774 <_dtoa_r+0xa2c>
 80067ae:	9b03      	ldr	r3, [sp, #12]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	db04      	blt.n	80067be <_dtoa_r+0xa76>
 80067b4:	9906      	ldr	r1, [sp, #24]
 80067b6:	430b      	orrs	r3, r1
 80067b8:	9904      	ldr	r1, [sp, #16]
 80067ba:	430b      	orrs	r3, r1
 80067bc:	d122      	bne.n	8006804 <_dtoa_r+0xabc>
 80067be:	2a00      	cmp	r2, #0
 80067c0:	ddee      	ble.n	80067a0 <_dtoa_r+0xa58>
 80067c2:	ee18 1a10 	vmov	r1, s16
 80067c6:	2201      	movs	r2, #1
 80067c8:	4620      	mov	r0, r4
 80067ca:	f000 fad7 	bl	8006d7c <__lshift>
 80067ce:	4631      	mov	r1, r6
 80067d0:	ee08 0a10 	vmov	s16, r0
 80067d4:	f000 fb42 	bl	8006e5c <__mcmp>
 80067d8:	2800      	cmp	r0, #0
 80067da:	dc03      	bgt.n	80067e4 <_dtoa_r+0xa9c>
 80067dc:	d1e0      	bne.n	80067a0 <_dtoa_r+0xa58>
 80067de:	f01a 0f01 	tst.w	sl, #1
 80067e2:	d0dd      	beq.n	80067a0 <_dtoa_r+0xa58>
 80067e4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80067e8:	d1d7      	bne.n	800679a <_dtoa_r+0xa52>
 80067ea:	2339      	movs	r3, #57	; 0x39
 80067ec:	f88b 3000 	strb.w	r3, [fp]
 80067f0:	462b      	mov	r3, r5
 80067f2:	461d      	mov	r5, r3
 80067f4:	3b01      	subs	r3, #1
 80067f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80067fa:	2a39      	cmp	r2, #57	; 0x39
 80067fc:	d071      	beq.n	80068e2 <_dtoa_r+0xb9a>
 80067fe:	3201      	adds	r2, #1
 8006800:	701a      	strb	r2, [r3, #0]
 8006802:	e746      	b.n	8006692 <_dtoa_r+0x94a>
 8006804:	2a00      	cmp	r2, #0
 8006806:	dd07      	ble.n	8006818 <_dtoa_r+0xad0>
 8006808:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800680c:	d0ed      	beq.n	80067ea <_dtoa_r+0xaa2>
 800680e:	f10a 0301 	add.w	r3, sl, #1
 8006812:	f88b 3000 	strb.w	r3, [fp]
 8006816:	e73c      	b.n	8006692 <_dtoa_r+0x94a>
 8006818:	9b05      	ldr	r3, [sp, #20]
 800681a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800681e:	4599      	cmp	r9, r3
 8006820:	d047      	beq.n	80068b2 <_dtoa_r+0xb6a>
 8006822:	ee18 1a10 	vmov	r1, s16
 8006826:	2300      	movs	r3, #0
 8006828:	220a      	movs	r2, #10
 800682a:	4620      	mov	r0, r4
 800682c:	f000 f8f6 	bl	8006a1c <__multadd>
 8006830:	45b8      	cmp	r8, r7
 8006832:	ee08 0a10 	vmov	s16, r0
 8006836:	f04f 0300 	mov.w	r3, #0
 800683a:	f04f 020a 	mov.w	r2, #10
 800683e:	4641      	mov	r1, r8
 8006840:	4620      	mov	r0, r4
 8006842:	d106      	bne.n	8006852 <_dtoa_r+0xb0a>
 8006844:	f000 f8ea 	bl	8006a1c <__multadd>
 8006848:	4680      	mov	r8, r0
 800684a:	4607      	mov	r7, r0
 800684c:	f109 0901 	add.w	r9, r9, #1
 8006850:	e772      	b.n	8006738 <_dtoa_r+0x9f0>
 8006852:	f000 f8e3 	bl	8006a1c <__multadd>
 8006856:	4639      	mov	r1, r7
 8006858:	4680      	mov	r8, r0
 800685a:	2300      	movs	r3, #0
 800685c:	220a      	movs	r2, #10
 800685e:	4620      	mov	r0, r4
 8006860:	f000 f8dc 	bl	8006a1c <__multadd>
 8006864:	4607      	mov	r7, r0
 8006866:	e7f1      	b.n	800684c <_dtoa_r+0xb04>
 8006868:	9b03      	ldr	r3, [sp, #12]
 800686a:	9302      	str	r3, [sp, #8]
 800686c:	9d01      	ldr	r5, [sp, #4]
 800686e:	ee18 0a10 	vmov	r0, s16
 8006872:	4631      	mov	r1, r6
 8006874:	f7ff f9dc 	bl	8005c30 <quorem>
 8006878:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800687c:	9b01      	ldr	r3, [sp, #4]
 800687e:	f805 ab01 	strb.w	sl, [r5], #1
 8006882:	1aea      	subs	r2, r5, r3
 8006884:	9b02      	ldr	r3, [sp, #8]
 8006886:	4293      	cmp	r3, r2
 8006888:	dd09      	ble.n	800689e <_dtoa_r+0xb56>
 800688a:	ee18 1a10 	vmov	r1, s16
 800688e:	2300      	movs	r3, #0
 8006890:	220a      	movs	r2, #10
 8006892:	4620      	mov	r0, r4
 8006894:	f000 f8c2 	bl	8006a1c <__multadd>
 8006898:	ee08 0a10 	vmov	s16, r0
 800689c:	e7e7      	b.n	800686e <_dtoa_r+0xb26>
 800689e:	9b02      	ldr	r3, [sp, #8]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	bfc8      	it	gt
 80068a4:	461d      	movgt	r5, r3
 80068a6:	9b01      	ldr	r3, [sp, #4]
 80068a8:	bfd8      	it	le
 80068aa:	2501      	movle	r5, #1
 80068ac:	441d      	add	r5, r3
 80068ae:	f04f 0800 	mov.w	r8, #0
 80068b2:	ee18 1a10 	vmov	r1, s16
 80068b6:	2201      	movs	r2, #1
 80068b8:	4620      	mov	r0, r4
 80068ba:	f000 fa5f 	bl	8006d7c <__lshift>
 80068be:	4631      	mov	r1, r6
 80068c0:	ee08 0a10 	vmov	s16, r0
 80068c4:	f000 faca 	bl	8006e5c <__mcmp>
 80068c8:	2800      	cmp	r0, #0
 80068ca:	dc91      	bgt.n	80067f0 <_dtoa_r+0xaa8>
 80068cc:	d102      	bne.n	80068d4 <_dtoa_r+0xb8c>
 80068ce:	f01a 0f01 	tst.w	sl, #1
 80068d2:	d18d      	bne.n	80067f0 <_dtoa_r+0xaa8>
 80068d4:	462b      	mov	r3, r5
 80068d6:	461d      	mov	r5, r3
 80068d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068dc:	2a30      	cmp	r2, #48	; 0x30
 80068de:	d0fa      	beq.n	80068d6 <_dtoa_r+0xb8e>
 80068e0:	e6d7      	b.n	8006692 <_dtoa_r+0x94a>
 80068e2:	9a01      	ldr	r2, [sp, #4]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d184      	bne.n	80067f2 <_dtoa_r+0xaaa>
 80068e8:	9b00      	ldr	r3, [sp, #0]
 80068ea:	3301      	adds	r3, #1
 80068ec:	9300      	str	r3, [sp, #0]
 80068ee:	2331      	movs	r3, #49	; 0x31
 80068f0:	7013      	strb	r3, [r2, #0]
 80068f2:	e6ce      	b.n	8006692 <_dtoa_r+0x94a>
 80068f4:	4b09      	ldr	r3, [pc, #36]	; (800691c <_dtoa_r+0xbd4>)
 80068f6:	f7ff ba95 	b.w	8005e24 <_dtoa_r+0xdc>
 80068fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f47f aa6e 	bne.w	8005dde <_dtoa_r+0x96>
 8006902:	4b07      	ldr	r3, [pc, #28]	; (8006920 <_dtoa_r+0xbd8>)
 8006904:	f7ff ba8e 	b.w	8005e24 <_dtoa_r+0xdc>
 8006908:	9b02      	ldr	r3, [sp, #8]
 800690a:	2b00      	cmp	r3, #0
 800690c:	dcae      	bgt.n	800686c <_dtoa_r+0xb24>
 800690e:	9b06      	ldr	r3, [sp, #24]
 8006910:	2b02      	cmp	r3, #2
 8006912:	f73f aea8 	bgt.w	8006666 <_dtoa_r+0x91e>
 8006916:	e7a9      	b.n	800686c <_dtoa_r+0xb24>
 8006918:	080084bf 	.word	0x080084bf
 800691c:	0800841c 	.word	0x0800841c
 8006920:	08008440 	.word	0x08008440

08006924 <_localeconv_r>:
 8006924:	4800      	ldr	r0, [pc, #0]	; (8006928 <_localeconv_r+0x4>)
 8006926:	4770      	bx	lr
 8006928:	20000160 	.word	0x20000160

0800692c <malloc>:
 800692c:	4b02      	ldr	r3, [pc, #8]	; (8006938 <malloc+0xc>)
 800692e:	4601      	mov	r1, r0
 8006930:	6818      	ldr	r0, [r3, #0]
 8006932:	f000 bc17 	b.w	8007164 <_malloc_r>
 8006936:	bf00      	nop
 8006938:	2000000c 	.word	0x2000000c

0800693c <memcpy>:
 800693c:	440a      	add	r2, r1
 800693e:	4291      	cmp	r1, r2
 8006940:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006944:	d100      	bne.n	8006948 <memcpy+0xc>
 8006946:	4770      	bx	lr
 8006948:	b510      	push	{r4, lr}
 800694a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800694e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006952:	4291      	cmp	r1, r2
 8006954:	d1f9      	bne.n	800694a <memcpy+0xe>
 8006956:	bd10      	pop	{r4, pc}

08006958 <_Balloc>:
 8006958:	b570      	push	{r4, r5, r6, lr}
 800695a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800695c:	4604      	mov	r4, r0
 800695e:	460d      	mov	r5, r1
 8006960:	b976      	cbnz	r6, 8006980 <_Balloc+0x28>
 8006962:	2010      	movs	r0, #16
 8006964:	f7ff ffe2 	bl	800692c <malloc>
 8006968:	4602      	mov	r2, r0
 800696a:	6260      	str	r0, [r4, #36]	; 0x24
 800696c:	b920      	cbnz	r0, 8006978 <_Balloc+0x20>
 800696e:	4b18      	ldr	r3, [pc, #96]	; (80069d0 <_Balloc+0x78>)
 8006970:	4818      	ldr	r0, [pc, #96]	; (80069d4 <_Balloc+0x7c>)
 8006972:	2166      	movs	r1, #102	; 0x66
 8006974:	f000 fdd6 	bl	8007524 <__assert_func>
 8006978:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800697c:	6006      	str	r6, [r0, #0]
 800697e:	60c6      	str	r6, [r0, #12]
 8006980:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006982:	68f3      	ldr	r3, [r6, #12]
 8006984:	b183      	cbz	r3, 80069a8 <_Balloc+0x50>
 8006986:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800698e:	b9b8      	cbnz	r0, 80069c0 <_Balloc+0x68>
 8006990:	2101      	movs	r1, #1
 8006992:	fa01 f605 	lsl.w	r6, r1, r5
 8006996:	1d72      	adds	r2, r6, #5
 8006998:	0092      	lsls	r2, r2, #2
 800699a:	4620      	mov	r0, r4
 800699c:	f000 fb60 	bl	8007060 <_calloc_r>
 80069a0:	b160      	cbz	r0, 80069bc <_Balloc+0x64>
 80069a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80069a6:	e00e      	b.n	80069c6 <_Balloc+0x6e>
 80069a8:	2221      	movs	r2, #33	; 0x21
 80069aa:	2104      	movs	r1, #4
 80069ac:	4620      	mov	r0, r4
 80069ae:	f000 fb57 	bl	8007060 <_calloc_r>
 80069b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069b4:	60f0      	str	r0, [r6, #12]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d1e4      	bne.n	8006986 <_Balloc+0x2e>
 80069bc:	2000      	movs	r0, #0
 80069be:	bd70      	pop	{r4, r5, r6, pc}
 80069c0:	6802      	ldr	r2, [r0, #0]
 80069c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80069c6:	2300      	movs	r3, #0
 80069c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80069cc:	e7f7      	b.n	80069be <_Balloc+0x66>
 80069ce:	bf00      	nop
 80069d0:	0800844d 	.word	0x0800844d
 80069d4:	080084d0 	.word	0x080084d0

080069d8 <_Bfree>:
 80069d8:	b570      	push	{r4, r5, r6, lr}
 80069da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80069dc:	4605      	mov	r5, r0
 80069de:	460c      	mov	r4, r1
 80069e0:	b976      	cbnz	r6, 8006a00 <_Bfree+0x28>
 80069e2:	2010      	movs	r0, #16
 80069e4:	f7ff ffa2 	bl	800692c <malloc>
 80069e8:	4602      	mov	r2, r0
 80069ea:	6268      	str	r0, [r5, #36]	; 0x24
 80069ec:	b920      	cbnz	r0, 80069f8 <_Bfree+0x20>
 80069ee:	4b09      	ldr	r3, [pc, #36]	; (8006a14 <_Bfree+0x3c>)
 80069f0:	4809      	ldr	r0, [pc, #36]	; (8006a18 <_Bfree+0x40>)
 80069f2:	218a      	movs	r1, #138	; 0x8a
 80069f4:	f000 fd96 	bl	8007524 <__assert_func>
 80069f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069fc:	6006      	str	r6, [r0, #0]
 80069fe:	60c6      	str	r6, [r0, #12]
 8006a00:	b13c      	cbz	r4, 8006a12 <_Bfree+0x3a>
 8006a02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006a04:	6862      	ldr	r2, [r4, #4]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a0c:	6021      	str	r1, [r4, #0]
 8006a0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a12:	bd70      	pop	{r4, r5, r6, pc}
 8006a14:	0800844d 	.word	0x0800844d
 8006a18:	080084d0 	.word	0x080084d0

08006a1c <__multadd>:
 8006a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a20:	690d      	ldr	r5, [r1, #16]
 8006a22:	4607      	mov	r7, r0
 8006a24:	460c      	mov	r4, r1
 8006a26:	461e      	mov	r6, r3
 8006a28:	f101 0c14 	add.w	ip, r1, #20
 8006a2c:	2000      	movs	r0, #0
 8006a2e:	f8dc 3000 	ldr.w	r3, [ip]
 8006a32:	b299      	uxth	r1, r3
 8006a34:	fb02 6101 	mla	r1, r2, r1, r6
 8006a38:	0c1e      	lsrs	r6, r3, #16
 8006a3a:	0c0b      	lsrs	r3, r1, #16
 8006a3c:	fb02 3306 	mla	r3, r2, r6, r3
 8006a40:	b289      	uxth	r1, r1
 8006a42:	3001      	adds	r0, #1
 8006a44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006a48:	4285      	cmp	r5, r0
 8006a4a:	f84c 1b04 	str.w	r1, [ip], #4
 8006a4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006a52:	dcec      	bgt.n	8006a2e <__multadd+0x12>
 8006a54:	b30e      	cbz	r6, 8006a9a <__multadd+0x7e>
 8006a56:	68a3      	ldr	r3, [r4, #8]
 8006a58:	42ab      	cmp	r3, r5
 8006a5a:	dc19      	bgt.n	8006a90 <__multadd+0x74>
 8006a5c:	6861      	ldr	r1, [r4, #4]
 8006a5e:	4638      	mov	r0, r7
 8006a60:	3101      	adds	r1, #1
 8006a62:	f7ff ff79 	bl	8006958 <_Balloc>
 8006a66:	4680      	mov	r8, r0
 8006a68:	b928      	cbnz	r0, 8006a76 <__multadd+0x5a>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	4b0c      	ldr	r3, [pc, #48]	; (8006aa0 <__multadd+0x84>)
 8006a6e:	480d      	ldr	r0, [pc, #52]	; (8006aa4 <__multadd+0x88>)
 8006a70:	21b5      	movs	r1, #181	; 0xb5
 8006a72:	f000 fd57 	bl	8007524 <__assert_func>
 8006a76:	6922      	ldr	r2, [r4, #16]
 8006a78:	3202      	adds	r2, #2
 8006a7a:	f104 010c 	add.w	r1, r4, #12
 8006a7e:	0092      	lsls	r2, r2, #2
 8006a80:	300c      	adds	r0, #12
 8006a82:	f7ff ff5b 	bl	800693c <memcpy>
 8006a86:	4621      	mov	r1, r4
 8006a88:	4638      	mov	r0, r7
 8006a8a:	f7ff ffa5 	bl	80069d8 <_Bfree>
 8006a8e:	4644      	mov	r4, r8
 8006a90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006a94:	3501      	adds	r5, #1
 8006a96:	615e      	str	r6, [r3, #20]
 8006a98:	6125      	str	r5, [r4, #16]
 8006a9a:	4620      	mov	r0, r4
 8006a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006aa0:	080084bf 	.word	0x080084bf
 8006aa4:	080084d0 	.word	0x080084d0

08006aa8 <__hi0bits>:
 8006aa8:	0c03      	lsrs	r3, r0, #16
 8006aaa:	041b      	lsls	r3, r3, #16
 8006aac:	b9d3      	cbnz	r3, 8006ae4 <__hi0bits+0x3c>
 8006aae:	0400      	lsls	r0, r0, #16
 8006ab0:	2310      	movs	r3, #16
 8006ab2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006ab6:	bf04      	itt	eq
 8006ab8:	0200      	lsleq	r0, r0, #8
 8006aba:	3308      	addeq	r3, #8
 8006abc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006ac0:	bf04      	itt	eq
 8006ac2:	0100      	lsleq	r0, r0, #4
 8006ac4:	3304      	addeq	r3, #4
 8006ac6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006aca:	bf04      	itt	eq
 8006acc:	0080      	lsleq	r0, r0, #2
 8006ace:	3302      	addeq	r3, #2
 8006ad0:	2800      	cmp	r0, #0
 8006ad2:	db05      	blt.n	8006ae0 <__hi0bits+0x38>
 8006ad4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006ad8:	f103 0301 	add.w	r3, r3, #1
 8006adc:	bf08      	it	eq
 8006ade:	2320      	moveq	r3, #32
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	4770      	bx	lr
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	e7e4      	b.n	8006ab2 <__hi0bits+0xa>

08006ae8 <__lo0bits>:
 8006ae8:	6803      	ldr	r3, [r0, #0]
 8006aea:	f013 0207 	ands.w	r2, r3, #7
 8006aee:	4601      	mov	r1, r0
 8006af0:	d00b      	beq.n	8006b0a <__lo0bits+0x22>
 8006af2:	07da      	lsls	r2, r3, #31
 8006af4:	d423      	bmi.n	8006b3e <__lo0bits+0x56>
 8006af6:	0798      	lsls	r0, r3, #30
 8006af8:	bf49      	itett	mi
 8006afa:	085b      	lsrmi	r3, r3, #1
 8006afc:	089b      	lsrpl	r3, r3, #2
 8006afe:	2001      	movmi	r0, #1
 8006b00:	600b      	strmi	r3, [r1, #0]
 8006b02:	bf5c      	itt	pl
 8006b04:	600b      	strpl	r3, [r1, #0]
 8006b06:	2002      	movpl	r0, #2
 8006b08:	4770      	bx	lr
 8006b0a:	b298      	uxth	r0, r3
 8006b0c:	b9a8      	cbnz	r0, 8006b3a <__lo0bits+0x52>
 8006b0e:	0c1b      	lsrs	r3, r3, #16
 8006b10:	2010      	movs	r0, #16
 8006b12:	b2da      	uxtb	r2, r3
 8006b14:	b90a      	cbnz	r2, 8006b1a <__lo0bits+0x32>
 8006b16:	3008      	adds	r0, #8
 8006b18:	0a1b      	lsrs	r3, r3, #8
 8006b1a:	071a      	lsls	r2, r3, #28
 8006b1c:	bf04      	itt	eq
 8006b1e:	091b      	lsreq	r3, r3, #4
 8006b20:	3004      	addeq	r0, #4
 8006b22:	079a      	lsls	r2, r3, #30
 8006b24:	bf04      	itt	eq
 8006b26:	089b      	lsreq	r3, r3, #2
 8006b28:	3002      	addeq	r0, #2
 8006b2a:	07da      	lsls	r2, r3, #31
 8006b2c:	d403      	bmi.n	8006b36 <__lo0bits+0x4e>
 8006b2e:	085b      	lsrs	r3, r3, #1
 8006b30:	f100 0001 	add.w	r0, r0, #1
 8006b34:	d005      	beq.n	8006b42 <__lo0bits+0x5a>
 8006b36:	600b      	str	r3, [r1, #0]
 8006b38:	4770      	bx	lr
 8006b3a:	4610      	mov	r0, r2
 8006b3c:	e7e9      	b.n	8006b12 <__lo0bits+0x2a>
 8006b3e:	2000      	movs	r0, #0
 8006b40:	4770      	bx	lr
 8006b42:	2020      	movs	r0, #32
 8006b44:	4770      	bx	lr
	...

08006b48 <__i2b>:
 8006b48:	b510      	push	{r4, lr}
 8006b4a:	460c      	mov	r4, r1
 8006b4c:	2101      	movs	r1, #1
 8006b4e:	f7ff ff03 	bl	8006958 <_Balloc>
 8006b52:	4602      	mov	r2, r0
 8006b54:	b928      	cbnz	r0, 8006b62 <__i2b+0x1a>
 8006b56:	4b05      	ldr	r3, [pc, #20]	; (8006b6c <__i2b+0x24>)
 8006b58:	4805      	ldr	r0, [pc, #20]	; (8006b70 <__i2b+0x28>)
 8006b5a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006b5e:	f000 fce1 	bl	8007524 <__assert_func>
 8006b62:	2301      	movs	r3, #1
 8006b64:	6144      	str	r4, [r0, #20]
 8006b66:	6103      	str	r3, [r0, #16]
 8006b68:	bd10      	pop	{r4, pc}
 8006b6a:	bf00      	nop
 8006b6c:	080084bf 	.word	0x080084bf
 8006b70:	080084d0 	.word	0x080084d0

08006b74 <__multiply>:
 8006b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b78:	4691      	mov	r9, r2
 8006b7a:	690a      	ldr	r2, [r1, #16]
 8006b7c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	bfb8      	it	lt
 8006b84:	460b      	movlt	r3, r1
 8006b86:	460c      	mov	r4, r1
 8006b88:	bfbc      	itt	lt
 8006b8a:	464c      	movlt	r4, r9
 8006b8c:	4699      	movlt	r9, r3
 8006b8e:	6927      	ldr	r7, [r4, #16]
 8006b90:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006b94:	68a3      	ldr	r3, [r4, #8]
 8006b96:	6861      	ldr	r1, [r4, #4]
 8006b98:	eb07 060a 	add.w	r6, r7, sl
 8006b9c:	42b3      	cmp	r3, r6
 8006b9e:	b085      	sub	sp, #20
 8006ba0:	bfb8      	it	lt
 8006ba2:	3101      	addlt	r1, #1
 8006ba4:	f7ff fed8 	bl	8006958 <_Balloc>
 8006ba8:	b930      	cbnz	r0, 8006bb8 <__multiply+0x44>
 8006baa:	4602      	mov	r2, r0
 8006bac:	4b44      	ldr	r3, [pc, #272]	; (8006cc0 <__multiply+0x14c>)
 8006bae:	4845      	ldr	r0, [pc, #276]	; (8006cc4 <__multiply+0x150>)
 8006bb0:	f240 115d 	movw	r1, #349	; 0x15d
 8006bb4:	f000 fcb6 	bl	8007524 <__assert_func>
 8006bb8:	f100 0514 	add.w	r5, r0, #20
 8006bbc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006bc0:	462b      	mov	r3, r5
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	4543      	cmp	r3, r8
 8006bc6:	d321      	bcc.n	8006c0c <__multiply+0x98>
 8006bc8:	f104 0314 	add.w	r3, r4, #20
 8006bcc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006bd0:	f109 0314 	add.w	r3, r9, #20
 8006bd4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006bd8:	9202      	str	r2, [sp, #8]
 8006bda:	1b3a      	subs	r2, r7, r4
 8006bdc:	3a15      	subs	r2, #21
 8006bde:	f022 0203 	bic.w	r2, r2, #3
 8006be2:	3204      	adds	r2, #4
 8006be4:	f104 0115 	add.w	r1, r4, #21
 8006be8:	428f      	cmp	r7, r1
 8006bea:	bf38      	it	cc
 8006bec:	2204      	movcc	r2, #4
 8006bee:	9201      	str	r2, [sp, #4]
 8006bf0:	9a02      	ldr	r2, [sp, #8]
 8006bf2:	9303      	str	r3, [sp, #12]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d80c      	bhi.n	8006c12 <__multiply+0x9e>
 8006bf8:	2e00      	cmp	r6, #0
 8006bfa:	dd03      	ble.n	8006c04 <__multiply+0x90>
 8006bfc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d05a      	beq.n	8006cba <__multiply+0x146>
 8006c04:	6106      	str	r6, [r0, #16]
 8006c06:	b005      	add	sp, #20
 8006c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c0c:	f843 2b04 	str.w	r2, [r3], #4
 8006c10:	e7d8      	b.n	8006bc4 <__multiply+0x50>
 8006c12:	f8b3 a000 	ldrh.w	sl, [r3]
 8006c16:	f1ba 0f00 	cmp.w	sl, #0
 8006c1a:	d024      	beq.n	8006c66 <__multiply+0xf2>
 8006c1c:	f104 0e14 	add.w	lr, r4, #20
 8006c20:	46a9      	mov	r9, r5
 8006c22:	f04f 0c00 	mov.w	ip, #0
 8006c26:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006c2a:	f8d9 1000 	ldr.w	r1, [r9]
 8006c2e:	fa1f fb82 	uxth.w	fp, r2
 8006c32:	b289      	uxth	r1, r1
 8006c34:	fb0a 110b 	mla	r1, sl, fp, r1
 8006c38:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006c3c:	f8d9 2000 	ldr.w	r2, [r9]
 8006c40:	4461      	add	r1, ip
 8006c42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006c46:	fb0a c20b 	mla	r2, sl, fp, ip
 8006c4a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006c4e:	b289      	uxth	r1, r1
 8006c50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006c54:	4577      	cmp	r7, lr
 8006c56:	f849 1b04 	str.w	r1, [r9], #4
 8006c5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006c5e:	d8e2      	bhi.n	8006c26 <__multiply+0xb2>
 8006c60:	9a01      	ldr	r2, [sp, #4]
 8006c62:	f845 c002 	str.w	ip, [r5, r2]
 8006c66:	9a03      	ldr	r2, [sp, #12]
 8006c68:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006c6c:	3304      	adds	r3, #4
 8006c6e:	f1b9 0f00 	cmp.w	r9, #0
 8006c72:	d020      	beq.n	8006cb6 <__multiply+0x142>
 8006c74:	6829      	ldr	r1, [r5, #0]
 8006c76:	f104 0c14 	add.w	ip, r4, #20
 8006c7a:	46ae      	mov	lr, r5
 8006c7c:	f04f 0a00 	mov.w	sl, #0
 8006c80:	f8bc b000 	ldrh.w	fp, [ip]
 8006c84:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006c88:	fb09 220b 	mla	r2, r9, fp, r2
 8006c8c:	4492      	add	sl, r2
 8006c8e:	b289      	uxth	r1, r1
 8006c90:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006c94:	f84e 1b04 	str.w	r1, [lr], #4
 8006c98:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006c9c:	f8be 1000 	ldrh.w	r1, [lr]
 8006ca0:	0c12      	lsrs	r2, r2, #16
 8006ca2:	fb09 1102 	mla	r1, r9, r2, r1
 8006ca6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006caa:	4567      	cmp	r7, ip
 8006cac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006cb0:	d8e6      	bhi.n	8006c80 <__multiply+0x10c>
 8006cb2:	9a01      	ldr	r2, [sp, #4]
 8006cb4:	50a9      	str	r1, [r5, r2]
 8006cb6:	3504      	adds	r5, #4
 8006cb8:	e79a      	b.n	8006bf0 <__multiply+0x7c>
 8006cba:	3e01      	subs	r6, #1
 8006cbc:	e79c      	b.n	8006bf8 <__multiply+0x84>
 8006cbe:	bf00      	nop
 8006cc0:	080084bf 	.word	0x080084bf
 8006cc4:	080084d0 	.word	0x080084d0

08006cc8 <__pow5mult>:
 8006cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ccc:	4615      	mov	r5, r2
 8006cce:	f012 0203 	ands.w	r2, r2, #3
 8006cd2:	4606      	mov	r6, r0
 8006cd4:	460f      	mov	r7, r1
 8006cd6:	d007      	beq.n	8006ce8 <__pow5mult+0x20>
 8006cd8:	4c25      	ldr	r4, [pc, #148]	; (8006d70 <__pow5mult+0xa8>)
 8006cda:	3a01      	subs	r2, #1
 8006cdc:	2300      	movs	r3, #0
 8006cde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006ce2:	f7ff fe9b 	bl	8006a1c <__multadd>
 8006ce6:	4607      	mov	r7, r0
 8006ce8:	10ad      	asrs	r5, r5, #2
 8006cea:	d03d      	beq.n	8006d68 <__pow5mult+0xa0>
 8006cec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006cee:	b97c      	cbnz	r4, 8006d10 <__pow5mult+0x48>
 8006cf0:	2010      	movs	r0, #16
 8006cf2:	f7ff fe1b 	bl	800692c <malloc>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	6270      	str	r0, [r6, #36]	; 0x24
 8006cfa:	b928      	cbnz	r0, 8006d08 <__pow5mult+0x40>
 8006cfc:	4b1d      	ldr	r3, [pc, #116]	; (8006d74 <__pow5mult+0xac>)
 8006cfe:	481e      	ldr	r0, [pc, #120]	; (8006d78 <__pow5mult+0xb0>)
 8006d00:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006d04:	f000 fc0e 	bl	8007524 <__assert_func>
 8006d08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d0c:	6004      	str	r4, [r0, #0]
 8006d0e:	60c4      	str	r4, [r0, #12]
 8006d10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006d14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d18:	b94c      	cbnz	r4, 8006d2e <__pow5mult+0x66>
 8006d1a:	f240 2171 	movw	r1, #625	; 0x271
 8006d1e:	4630      	mov	r0, r6
 8006d20:	f7ff ff12 	bl	8006b48 <__i2b>
 8006d24:	2300      	movs	r3, #0
 8006d26:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d2a:	4604      	mov	r4, r0
 8006d2c:	6003      	str	r3, [r0, #0]
 8006d2e:	f04f 0900 	mov.w	r9, #0
 8006d32:	07eb      	lsls	r3, r5, #31
 8006d34:	d50a      	bpl.n	8006d4c <__pow5mult+0x84>
 8006d36:	4639      	mov	r1, r7
 8006d38:	4622      	mov	r2, r4
 8006d3a:	4630      	mov	r0, r6
 8006d3c:	f7ff ff1a 	bl	8006b74 <__multiply>
 8006d40:	4639      	mov	r1, r7
 8006d42:	4680      	mov	r8, r0
 8006d44:	4630      	mov	r0, r6
 8006d46:	f7ff fe47 	bl	80069d8 <_Bfree>
 8006d4a:	4647      	mov	r7, r8
 8006d4c:	106d      	asrs	r5, r5, #1
 8006d4e:	d00b      	beq.n	8006d68 <__pow5mult+0xa0>
 8006d50:	6820      	ldr	r0, [r4, #0]
 8006d52:	b938      	cbnz	r0, 8006d64 <__pow5mult+0x9c>
 8006d54:	4622      	mov	r2, r4
 8006d56:	4621      	mov	r1, r4
 8006d58:	4630      	mov	r0, r6
 8006d5a:	f7ff ff0b 	bl	8006b74 <__multiply>
 8006d5e:	6020      	str	r0, [r4, #0]
 8006d60:	f8c0 9000 	str.w	r9, [r0]
 8006d64:	4604      	mov	r4, r0
 8006d66:	e7e4      	b.n	8006d32 <__pow5mult+0x6a>
 8006d68:	4638      	mov	r0, r7
 8006d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d6e:	bf00      	nop
 8006d70:	08008620 	.word	0x08008620
 8006d74:	0800844d 	.word	0x0800844d
 8006d78:	080084d0 	.word	0x080084d0

08006d7c <__lshift>:
 8006d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d80:	460c      	mov	r4, r1
 8006d82:	6849      	ldr	r1, [r1, #4]
 8006d84:	6923      	ldr	r3, [r4, #16]
 8006d86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006d8a:	68a3      	ldr	r3, [r4, #8]
 8006d8c:	4607      	mov	r7, r0
 8006d8e:	4691      	mov	r9, r2
 8006d90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006d94:	f108 0601 	add.w	r6, r8, #1
 8006d98:	42b3      	cmp	r3, r6
 8006d9a:	db0b      	blt.n	8006db4 <__lshift+0x38>
 8006d9c:	4638      	mov	r0, r7
 8006d9e:	f7ff fddb 	bl	8006958 <_Balloc>
 8006da2:	4605      	mov	r5, r0
 8006da4:	b948      	cbnz	r0, 8006dba <__lshift+0x3e>
 8006da6:	4602      	mov	r2, r0
 8006da8:	4b2a      	ldr	r3, [pc, #168]	; (8006e54 <__lshift+0xd8>)
 8006daa:	482b      	ldr	r0, [pc, #172]	; (8006e58 <__lshift+0xdc>)
 8006dac:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006db0:	f000 fbb8 	bl	8007524 <__assert_func>
 8006db4:	3101      	adds	r1, #1
 8006db6:	005b      	lsls	r3, r3, #1
 8006db8:	e7ee      	b.n	8006d98 <__lshift+0x1c>
 8006dba:	2300      	movs	r3, #0
 8006dbc:	f100 0114 	add.w	r1, r0, #20
 8006dc0:	f100 0210 	add.w	r2, r0, #16
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	4553      	cmp	r3, sl
 8006dc8:	db37      	blt.n	8006e3a <__lshift+0xbe>
 8006dca:	6920      	ldr	r0, [r4, #16]
 8006dcc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006dd0:	f104 0314 	add.w	r3, r4, #20
 8006dd4:	f019 091f 	ands.w	r9, r9, #31
 8006dd8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ddc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006de0:	d02f      	beq.n	8006e42 <__lshift+0xc6>
 8006de2:	f1c9 0e20 	rsb	lr, r9, #32
 8006de6:	468a      	mov	sl, r1
 8006de8:	f04f 0c00 	mov.w	ip, #0
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	fa02 f209 	lsl.w	r2, r2, r9
 8006df2:	ea42 020c 	orr.w	r2, r2, ip
 8006df6:	f84a 2b04 	str.w	r2, [sl], #4
 8006dfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dfe:	4298      	cmp	r0, r3
 8006e00:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006e04:	d8f2      	bhi.n	8006dec <__lshift+0x70>
 8006e06:	1b03      	subs	r3, r0, r4
 8006e08:	3b15      	subs	r3, #21
 8006e0a:	f023 0303 	bic.w	r3, r3, #3
 8006e0e:	3304      	adds	r3, #4
 8006e10:	f104 0215 	add.w	r2, r4, #21
 8006e14:	4290      	cmp	r0, r2
 8006e16:	bf38      	it	cc
 8006e18:	2304      	movcc	r3, #4
 8006e1a:	f841 c003 	str.w	ip, [r1, r3]
 8006e1e:	f1bc 0f00 	cmp.w	ip, #0
 8006e22:	d001      	beq.n	8006e28 <__lshift+0xac>
 8006e24:	f108 0602 	add.w	r6, r8, #2
 8006e28:	3e01      	subs	r6, #1
 8006e2a:	4638      	mov	r0, r7
 8006e2c:	612e      	str	r6, [r5, #16]
 8006e2e:	4621      	mov	r1, r4
 8006e30:	f7ff fdd2 	bl	80069d8 <_Bfree>
 8006e34:	4628      	mov	r0, r5
 8006e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e3a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006e3e:	3301      	adds	r3, #1
 8006e40:	e7c1      	b.n	8006dc6 <__lshift+0x4a>
 8006e42:	3904      	subs	r1, #4
 8006e44:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e48:	f841 2f04 	str.w	r2, [r1, #4]!
 8006e4c:	4298      	cmp	r0, r3
 8006e4e:	d8f9      	bhi.n	8006e44 <__lshift+0xc8>
 8006e50:	e7ea      	b.n	8006e28 <__lshift+0xac>
 8006e52:	bf00      	nop
 8006e54:	080084bf 	.word	0x080084bf
 8006e58:	080084d0 	.word	0x080084d0

08006e5c <__mcmp>:
 8006e5c:	b530      	push	{r4, r5, lr}
 8006e5e:	6902      	ldr	r2, [r0, #16]
 8006e60:	690c      	ldr	r4, [r1, #16]
 8006e62:	1b12      	subs	r2, r2, r4
 8006e64:	d10e      	bne.n	8006e84 <__mcmp+0x28>
 8006e66:	f100 0314 	add.w	r3, r0, #20
 8006e6a:	3114      	adds	r1, #20
 8006e6c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006e70:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006e74:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006e78:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006e7c:	42a5      	cmp	r5, r4
 8006e7e:	d003      	beq.n	8006e88 <__mcmp+0x2c>
 8006e80:	d305      	bcc.n	8006e8e <__mcmp+0x32>
 8006e82:	2201      	movs	r2, #1
 8006e84:	4610      	mov	r0, r2
 8006e86:	bd30      	pop	{r4, r5, pc}
 8006e88:	4283      	cmp	r3, r0
 8006e8a:	d3f3      	bcc.n	8006e74 <__mcmp+0x18>
 8006e8c:	e7fa      	b.n	8006e84 <__mcmp+0x28>
 8006e8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e92:	e7f7      	b.n	8006e84 <__mcmp+0x28>

08006e94 <__mdiff>:
 8006e94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e98:	460c      	mov	r4, r1
 8006e9a:	4606      	mov	r6, r0
 8006e9c:	4611      	mov	r1, r2
 8006e9e:	4620      	mov	r0, r4
 8006ea0:	4690      	mov	r8, r2
 8006ea2:	f7ff ffdb 	bl	8006e5c <__mcmp>
 8006ea6:	1e05      	subs	r5, r0, #0
 8006ea8:	d110      	bne.n	8006ecc <__mdiff+0x38>
 8006eaa:	4629      	mov	r1, r5
 8006eac:	4630      	mov	r0, r6
 8006eae:	f7ff fd53 	bl	8006958 <_Balloc>
 8006eb2:	b930      	cbnz	r0, 8006ec2 <__mdiff+0x2e>
 8006eb4:	4b3a      	ldr	r3, [pc, #232]	; (8006fa0 <__mdiff+0x10c>)
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	f240 2132 	movw	r1, #562	; 0x232
 8006ebc:	4839      	ldr	r0, [pc, #228]	; (8006fa4 <__mdiff+0x110>)
 8006ebe:	f000 fb31 	bl	8007524 <__assert_func>
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006ec8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ecc:	bfa4      	itt	ge
 8006ece:	4643      	movge	r3, r8
 8006ed0:	46a0      	movge	r8, r4
 8006ed2:	4630      	mov	r0, r6
 8006ed4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006ed8:	bfa6      	itte	ge
 8006eda:	461c      	movge	r4, r3
 8006edc:	2500      	movge	r5, #0
 8006ede:	2501      	movlt	r5, #1
 8006ee0:	f7ff fd3a 	bl	8006958 <_Balloc>
 8006ee4:	b920      	cbnz	r0, 8006ef0 <__mdiff+0x5c>
 8006ee6:	4b2e      	ldr	r3, [pc, #184]	; (8006fa0 <__mdiff+0x10c>)
 8006ee8:	4602      	mov	r2, r0
 8006eea:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006eee:	e7e5      	b.n	8006ebc <__mdiff+0x28>
 8006ef0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006ef4:	6926      	ldr	r6, [r4, #16]
 8006ef6:	60c5      	str	r5, [r0, #12]
 8006ef8:	f104 0914 	add.w	r9, r4, #20
 8006efc:	f108 0514 	add.w	r5, r8, #20
 8006f00:	f100 0e14 	add.w	lr, r0, #20
 8006f04:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006f08:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006f0c:	f108 0210 	add.w	r2, r8, #16
 8006f10:	46f2      	mov	sl, lr
 8006f12:	2100      	movs	r1, #0
 8006f14:	f859 3b04 	ldr.w	r3, [r9], #4
 8006f18:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006f1c:	fa1f f883 	uxth.w	r8, r3
 8006f20:	fa11 f18b 	uxtah	r1, r1, fp
 8006f24:	0c1b      	lsrs	r3, r3, #16
 8006f26:	eba1 0808 	sub.w	r8, r1, r8
 8006f2a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006f2e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006f32:	fa1f f888 	uxth.w	r8, r8
 8006f36:	1419      	asrs	r1, r3, #16
 8006f38:	454e      	cmp	r6, r9
 8006f3a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006f3e:	f84a 3b04 	str.w	r3, [sl], #4
 8006f42:	d8e7      	bhi.n	8006f14 <__mdiff+0x80>
 8006f44:	1b33      	subs	r3, r6, r4
 8006f46:	3b15      	subs	r3, #21
 8006f48:	f023 0303 	bic.w	r3, r3, #3
 8006f4c:	3304      	adds	r3, #4
 8006f4e:	3415      	adds	r4, #21
 8006f50:	42a6      	cmp	r6, r4
 8006f52:	bf38      	it	cc
 8006f54:	2304      	movcc	r3, #4
 8006f56:	441d      	add	r5, r3
 8006f58:	4473      	add	r3, lr
 8006f5a:	469e      	mov	lr, r3
 8006f5c:	462e      	mov	r6, r5
 8006f5e:	4566      	cmp	r6, ip
 8006f60:	d30e      	bcc.n	8006f80 <__mdiff+0xec>
 8006f62:	f10c 0203 	add.w	r2, ip, #3
 8006f66:	1b52      	subs	r2, r2, r5
 8006f68:	f022 0203 	bic.w	r2, r2, #3
 8006f6c:	3d03      	subs	r5, #3
 8006f6e:	45ac      	cmp	ip, r5
 8006f70:	bf38      	it	cc
 8006f72:	2200      	movcc	r2, #0
 8006f74:	441a      	add	r2, r3
 8006f76:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006f7a:	b17b      	cbz	r3, 8006f9c <__mdiff+0x108>
 8006f7c:	6107      	str	r7, [r0, #16]
 8006f7e:	e7a3      	b.n	8006ec8 <__mdiff+0x34>
 8006f80:	f856 8b04 	ldr.w	r8, [r6], #4
 8006f84:	fa11 f288 	uxtah	r2, r1, r8
 8006f88:	1414      	asrs	r4, r2, #16
 8006f8a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006f8e:	b292      	uxth	r2, r2
 8006f90:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006f94:	f84e 2b04 	str.w	r2, [lr], #4
 8006f98:	1421      	asrs	r1, r4, #16
 8006f9a:	e7e0      	b.n	8006f5e <__mdiff+0xca>
 8006f9c:	3f01      	subs	r7, #1
 8006f9e:	e7ea      	b.n	8006f76 <__mdiff+0xe2>
 8006fa0:	080084bf 	.word	0x080084bf
 8006fa4:	080084d0 	.word	0x080084d0

08006fa8 <__d2b>:
 8006fa8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006fac:	4689      	mov	r9, r1
 8006fae:	2101      	movs	r1, #1
 8006fb0:	ec57 6b10 	vmov	r6, r7, d0
 8006fb4:	4690      	mov	r8, r2
 8006fb6:	f7ff fccf 	bl	8006958 <_Balloc>
 8006fba:	4604      	mov	r4, r0
 8006fbc:	b930      	cbnz	r0, 8006fcc <__d2b+0x24>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	4b25      	ldr	r3, [pc, #148]	; (8007058 <__d2b+0xb0>)
 8006fc2:	4826      	ldr	r0, [pc, #152]	; (800705c <__d2b+0xb4>)
 8006fc4:	f240 310a 	movw	r1, #778	; 0x30a
 8006fc8:	f000 faac 	bl	8007524 <__assert_func>
 8006fcc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006fd0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006fd4:	bb35      	cbnz	r5, 8007024 <__d2b+0x7c>
 8006fd6:	2e00      	cmp	r6, #0
 8006fd8:	9301      	str	r3, [sp, #4]
 8006fda:	d028      	beq.n	800702e <__d2b+0x86>
 8006fdc:	4668      	mov	r0, sp
 8006fde:	9600      	str	r6, [sp, #0]
 8006fe0:	f7ff fd82 	bl	8006ae8 <__lo0bits>
 8006fe4:	9900      	ldr	r1, [sp, #0]
 8006fe6:	b300      	cbz	r0, 800702a <__d2b+0x82>
 8006fe8:	9a01      	ldr	r2, [sp, #4]
 8006fea:	f1c0 0320 	rsb	r3, r0, #32
 8006fee:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff2:	430b      	orrs	r3, r1
 8006ff4:	40c2      	lsrs	r2, r0
 8006ff6:	6163      	str	r3, [r4, #20]
 8006ff8:	9201      	str	r2, [sp, #4]
 8006ffa:	9b01      	ldr	r3, [sp, #4]
 8006ffc:	61a3      	str	r3, [r4, #24]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	bf14      	ite	ne
 8007002:	2202      	movne	r2, #2
 8007004:	2201      	moveq	r2, #1
 8007006:	6122      	str	r2, [r4, #16]
 8007008:	b1d5      	cbz	r5, 8007040 <__d2b+0x98>
 800700a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800700e:	4405      	add	r5, r0
 8007010:	f8c9 5000 	str.w	r5, [r9]
 8007014:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007018:	f8c8 0000 	str.w	r0, [r8]
 800701c:	4620      	mov	r0, r4
 800701e:	b003      	add	sp, #12
 8007020:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007024:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007028:	e7d5      	b.n	8006fd6 <__d2b+0x2e>
 800702a:	6161      	str	r1, [r4, #20]
 800702c:	e7e5      	b.n	8006ffa <__d2b+0x52>
 800702e:	a801      	add	r0, sp, #4
 8007030:	f7ff fd5a 	bl	8006ae8 <__lo0bits>
 8007034:	9b01      	ldr	r3, [sp, #4]
 8007036:	6163      	str	r3, [r4, #20]
 8007038:	2201      	movs	r2, #1
 800703a:	6122      	str	r2, [r4, #16]
 800703c:	3020      	adds	r0, #32
 800703e:	e7e3      	b.n	8007008 <__d2b+0x60>
 8007040:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007044:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007048:	f8c9 0000 	str.w	r0, [r9]
 800704c:	6918      	ldr	r0, [r3, #16]
 800704e:	f7ff fd2b 	bl	8006aa8 <__hi0bits>
 8007052:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007056:	e7df      	b.n	8007018 <__d2b+0x70>
 8007058:	080084bf 	.word	0x080084bf
 800705c:	080084d0 	.word	0x080084d0

08007060 <_calloc_r>:
 8007060:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007062:	fba1 2402 	umull	r2, r4, r1, r2
 8007066:	b94c      	cbnz	r4, 800707c <_calloc_r+0x1c>
 8007068:	4611      	mov	r1, r2
 800706a:	9201      	str	r2, [sp, #4]
 800706c:	f000 f87a 	bl	8007164 <_malloc_r>
 8007070:	9a01      	ldr	r2, [sp, #4]
 8007072:	4605      	mov	r5, r0
 8007074:	b930      	cbnz	r0, 8007084 <_calloc_r+0x24>
 8007076:	4628      	mov	r0, r5
 8007078:	b003      	add	sp, #12
 800707a:	bd30      	pop	{r4, r5, pc}
 800707c:	220c      	movs	r2, #12
 800707e:	6002      	str	r2, [r0, #0]
 8007080:	2500      	movs	r5, #0
 8007082:	e7f8      	b.n	8007076 <_calloc_r+0x16>
 8007084:	4621      	mov	r1, r4
 8007086:	f7fe f941 	bl	800530c <memset>
 800708a:	e7f4      	b.n	8007076 <_calloc_r+0x16>

0800708c <_free_r>:
 800708c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800708e:	2900      	cmp	r1, #0
 8007090:	d044      	beq.n	800711c <_free_r+0x90>
 8007092:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007096:	9001      	str	r0, [sp, #4]
 8007098:	2b00      	cmp	r3, #0
 800709a:	f1a1 0404 	sub.w	r4, r1, #4
 800709e:	bfb8      	it	lt
 80070a0:	18e4      	addlt	r4, r4, r3
 80070a2:	f000 fa9b 	bl	80075dc <__malloc_lock>
 80070a6:	4a1e      	ldr	r2, [pc, #120]	; (8007120 <_free_r+0x94>)
 80070a8:	9801      	ldr	r0, [sp, #4]
 80070aa:	6813      	ldr	r3, [r2, #0]
 80070ac:	b933      	cbnz	r3, 80070bc <_free_r+0x30>
 80070ae:	6063      	str	r3, [r4, #4]
 80070b0:	6014      	str	r4, [r2, #0]
 80070b2:	b003      	add	sp, #12
 80070b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80070b8:	f000 ba96 	b.w	80075e8 <__malloc_unlock>
 80070bc:	42a3      	cmp	r3, r4
 80070be:	d908      	bls.n	80070d2 <_free_r+0x46>
 80070c0:	6825      	ldr	r5, [r4, #0]
 80070c2:	1961      	adds	r1, r4, r5
 80070c4:	428b      	cmp	r3, r1
 80070c6:	bf01      	itttt	eq
 80070c8:	6819      	ldreq	r1, [r3, #0]
 80070ca:	685b      	ldreq	r3, [r3, #4]
 80070cc:	1949      	addeq	r1, r1, r5
 80070ce:	6021      	streq	r1, [r4, #0]
 80070d0:	e7ed      	b.n	80070ae <_free_r+0x22>
 80070d2:	461a      	mov	r2, r3
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	b10b      	cbz	r3, 80070dc <_free_r+0x50>
 80070d8:	42a3      	cmp	r3, r4
 80070da:	d9fa      	bls.n	80070d2 <_free_r+0x46>
 80070dc:	6811      	ldr	r1, [r2, #0]
 80070de:	1855      	adds	r5, r2, r1
 80070e0:	42a5      	cmp	r5, r4
 80070e2:	d10b      	bne.n	80070fc <_free_r+0x70>
 80070e4:	6824      	ldr	r4, [r4, #0]
 80070e6:	4421      	add	r1, r4
 80070e8:	1854      	adds	r4, r2, r1
 80070ea:	42a3      	cmp	r3, r4
 80070ec:	6011      	str	r1, [r2, #0]
 80070ee:	d1e0      	bne.n	80070b2 <_free_r+0x26>
 80070f0:	681c      	ldr	r4, [r3, #0]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	6053      	str	r3, [r2, #4]
 80070f6:	4421      	add	r1, r4
 80070f8:	6011      	str	r1, [r2, #0]
 80070fa:	e7da      	b.n	80070b2 <_free_r+0x26>
 80070fc:	d902      	bls.n	8007104 <_free_r+0x78>
 80070fe:	230c      	movs	r3, #12
 8007100:	6003      	str	r3, [r0, #0]
 8007102:	e7d6      	b.n	80070b2 <_free_r+0x26>
 8007104:	6825      	ldr	r5, [r4, #0]
 8007106:	1961      	adds	r1, r4, r5
 8007108:	428b      	cmp	r3, r1
 800710a:	bf04      	itt	eq
 800710c:	6819      	ldreq	r1, [r3, #0]
 800710e:	685b      	ldreq	r3, [r3, #4]
 8007110:	6063      	str	r3, [r4, #4]
 8007112:	bf04      	itt	eq
 8007114:	1949      	addeq	r1, r1, r5
 8007116:	6021      	streq	r1, [r4, #0]
 8007118:	6054      	str	r4, [r2, #4]
 800711a:	e7ca      	b.n	80070b2 <_free_r+0x26>
 800711c:	b003      	add	sp, #12
 800711e:	bd30      	pop	{r4, r5, pc}
 8007120:	20000440 	.word	0x20000440

08007124 <sbrk_aligned>:
 8007124:	b570      	push	{r4, r5, r6, lr}
 8007126:	4e0e      	ldr	r6, [pc, #56]	; (8007160 <sbrk_aligned+0x3c>)
 8007128:	460c      	mov	r4, r1
 800712a:	6831      	ldr	r1, [r6, #0]
 800712c:	4605      	mov	r5, r0
 800712e:	b911      	cbnz	r1, 8007136 <sbrk_aligned+0x12>
 8007130:	f000 f9e8 	bl	8007504 <_sbrk_r>
 8007134:	6030      	str	r0, [r6, #0]
 8007136:	4621      	mov	r1, r4
 8007138:	4628      	mov	r0, r5
 800713a:	f000 f9e3 	bl	8007504 <_sbrk_r>
 800713e:	1c43      	adds	r3, r0, #1
 8007140:	d00a      	beq.n	8007158 <sbrk_aligned+0x34>
 8007142:	1cc4      	adds	r4, r0, #3
 8007144:	f024 0403 	bic.w	r4, r4, #3
 8007148:	42a0      	cmp	r0, r4
 800714a:	d007      	beq.n	800715c <sbrk_aligned+0x38>
 800714c:	1a21      	subs	r1, r4, r0
 800714e:	4628      	mov	r0, r5
 8007150:	f000 f9d8 	bl	8007504 <_sbrk_r>
 8007154:	3001      	adds	r0, #1
 8007156:	d101      	bne.n	800715c <sbrk_aligned+0x38>
 8007158:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800715c:	4620      	mov	r0, r4
 800715e:	bd70      	pop	{r4, r5, r6, pc}
 8007160:	20000444 	.word	0x20000444

08007164 <_malloc_r>:
 8007164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007168:	1ccd      	adds	r5, r1, #3
 800716a:	f025 0503 	bic.w	r5, r5, #3
 800716e:	3508      	adds	r5, #8
 8007170:	2d0c      	cmp	r5, #12
 8007172:	bf38      	it	cc
 8007174:	250c      	movcc	r5, #12
 8007176:	2d00      	cmp	r5, #0
 8007178:	4607      	mov	r7, r0
 800717a:	db01      	blt.n	8007180 <_malloc_r+0x1c>
 800717c:	42a9      	cmp	r1, r5
 800717e:	d905      	bls.n	800718c <_malloc_r+0x28>
 8007180:	230c      	movs	r3, #12
 8007182:	603b      	str	r3, [r7, #0]
 8007184:	2600      	movs	r6, #0
 8007186:	4630      	mov	r0, r6
 8007188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800718c:	4e2e      	ldr	r6, [pc, #184]	; (8007248 <_malloc_r+0xe4>)
 800718e:	f000 fa25 	bl	80075dc <__malloc_lock>
 8007192:	6833      	ldr	r3, [r6, #0]
 8007194:	461c      	mov	r4, r3
 8007196:	bb34      	cbnz	r4, 80071e6 <_malloc_r+0x82>
 8007198:	4629      	mov	r1, r5
 800719a:	4638      	mov	r0, r7
 800719c:	f7ff ffc2 	bl	8007124 <sbrk_aligned>
 80071a0:	1c43      	adds	r3, r0, #1
 80071a2:	4604      	mov	r4, r0
 80071a4:	d14d      	bne.n	8007242 <_malloc_r+0xde>
 80071a6:	6834      	ldr	r4, [r6, #0]
 80071a8:	4626      	mov	r6, r4
 80071aa:	2e00      	cmp	r6, #0
 80071ac:	d140      	bne.n	8007230 <_malloc_r+0xcc>
 80071ae:	6823      	ldr	r3, [r4, #0]
 80071b0:	4631      	mov	r1, r6
 80071b2:	4638      	mov	r0, r7
 80071b4:	eb04 0803 	add.w	r8, r4, r3
 80071b8:	f000 f9a4 	bl	8007504 <_sbrk_r>
 80071bc:	4580      	cmp	r8, r0
 80071be:	d13a      	bne.n	8007236 <_malloc_r+0xd2>
 80071c0:	6821      	ldr	r1, [r4, #0]
 80071c2:	3503      	adds	r5, #3
 80071c4:	1a6d      	subs	r5, r5, r1
 80071c6:	f025 0503 	bic.w	r5, r5, #3
 80071ca:	3508      	adds	r5, #8
 80071cc:	2d0c      	cmp	r5, #12
 80071ce:	bf38      	it	cc
 80071d0:	250c      	movcc	r5, #12
 80071d2:	4629      	mov	r1, r5
 80071d4:	4638      	mov	r0, r7
 80071d6:	f7ff ffa5 	bl	8007124 <sbrk_aligned>
 80071da:	3001      	adds	r0, #1
 80071dc:	d02b      	beq.n	8007236 <_malloc_r+0xd2>
 80071de:	6823      	ldr	r3, [r4, #0]
 80071e0:	442b      	add	r3, r5
 80071e2:	6023      	str	r3, [r4, #0]
 80071e4:	e00e      	b.n	8007204 <_malloc_r+0xa0>
 80071e6:	6822      	ldr	r2, [r4, #0]
 80071e8:	1b52      	subs	r2, r2, r5
 80071ea:	d41e      	bmi.n	800722a <_malloc_r+0xc6>
 80071ec:	2a0b      	cmp	r2, #11
 80071ee:	d916      	bls.n	800721e <_malloc_r+0xba>
 80071f0:	1961      	adds	r1, r4, r5
 80071f2:	42a3      	cmp	r3, r4
 80071f4:	6025      	str	r5, [r4, #0]
 80071f6:	bf18      	it	ne
 80071f8:	6059      	strne	r1, [r3, #4]
 80071fa:	6863      	ldr	r3, [r4, #4]
 80071fc:	bf08      	it	eq
 80071fe:	6031      	streq	r1, [r6, #0]
 8007200:	5162      	str	r2, [r4, r5]
 8007202:	604b      	str	r3, [r1, #4]
 8007204:	4638      	mov	r0, r7
 8007206:	f104 060b 	add.w	r6, r4, #11
 800720a:	f000 f9ed 	bl	80075e8 <__malloc_unlock>
 800720e:	f026 0607 	bic.w	r6, r6, #7
 8007212:	1d23      	adds	r3, r4, #4
 8007214:	1af2      	subs	r2, r6, r3
 8007216:	d0b6      	beq.n	8007186 <_malloc_r+0x22>
 8007218:	1b9b      	subs	r3, r3, r6
 800721a:	50a3      	str	r3, [r4, r2]
 800721c:	e7b3      	b.n	8007186 <_malloc_r+0x22>
 800721e:	6862      	ldr	r2, [r4, #4]
 8007220:	42a3      	cmp	r3, r4
 8007222:	bf0c      	ite	eq
 8007224:	6032      	streq	r2, [r6, #0]
 8007226:	605a      	strne	r2, [r3, #4]
 8007228:	e7ec      	b.n	8007204 <_malloc_r+0xa0>
 800722a:	4623      	mov	r3, r4
 800722c:	6864      	ldr	r4, [r4, #4]
 800722e:	e7b2      	b.n	8007196 <_malloc_r+0x32>
 8007230:	4634      	mov	r4, r6
 8007232:	6876      	ldr	r6, [r6, #4]
 8007234:	e7b9      	b.n	80071aa <_malloc_r+0x46>
 8007236:	230c      	movs	r3, #12
 8007238:	603b      	str	r3, [r7, #0]
 800723a:	4638      	mov	r0, r7
 800723c:	f000 f9d4 	bl	80075e8 <__malloc_unlock>
 8007240:	e7a1      	b.n	8007186 <_malloc_r+0x22>
 8007242:	6025      	str	r5, [r4, #0]
 8007244:	e7de      	b.n	8007204 <_malloc_r+0xa0>
 8007246:	bf00      	nop
 8007248:	20000440 	.word	0x20000440

0800724c <__ssputs_r>:
 800724c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007250:	688e      	ldr	r6, [r1, #8]
 8007252:	429e      	cmp	r6, r3
 8007254:	4682      	mov	sl, r0
 8007256:	460c      	mov	r4, r1
 8007258:	4690      	mov	r8, r2
 800725a:	461f      	mov	r7, r3
 800725c:	d838      	bhi.n	80072d0 <__ssputs_r+0x84>
 800725e:	898a      	ldrh	r2, [r1, #12]
 8007260:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007264:	d032      	beq.n	80072cc <__ssputs_r+0x80>
 8007266:	6825      	ldr	r5, [r4, #0]
 8007268:	6909      	ldr	r1, [r1, #16]
 800726a:	eba5 0901 	sub.w	r9, r5, r1
 800726e:	6965      	ldr	r5, [r4, #20]
 8007270:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007274:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007278:	3301      	adds	r3, #1
 800727a:	444b      	add	r3, r9
 800727c:	106d      	asrs	r5, r5, #1
 800727e:	429d      	cmp	r5, r3
 8007280:	bf38      	it	cc
 8007282:	461d      	movcc	r5, r3
 8007284:	0553      	lsls	r3, r2, #21
 8007286:	d531      	bpl.n	80072ec <__ssputs_r+0xa0>
 8007288:	4629      	mov	r1, r5
 800728a:	f7ff ff6b 	bl	8007164 <_malloc_r>
 800728e:	4606      	mov	r6, r0
 8007290:	b950      	cbnz	r0, 80072a8 <__ssputs_r+0x5c>
 8007292:	230c      	movs	r3, #12
 8007294:	f8ca 3000 	str.w	r3, [sl]
 8007298:	89a3      	ldrh	r3, [r4, #12]
 800729a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800729e:	81a3      	strh	r3, [r4, #12]
 80072a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072a8:	6921      	ldr	r1, [r4, #16]
 80072aa:	464a      	mov	r2, r9
 80072ac:	f7ff fb46 	bl	800693c <memcpy>
 80072b0:	89a3      	ldrh	r3, [r4, #12]
 80072b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80072b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072ba:	81a3      	strh	r3, [r4, #12]
 80072bc:	6126      	str	r6, [r4, #16]
 80072be:	6165      	str	r5, [r4, #20]
 80072c0:	444e      	add	r6, r9
 80072c2:	eba5 0509 	sub.w	r5, r5, r9
 80072c6:	6026      	str	r6, [r4, #0]
 80072c8:	60a5      	str	r5, [r4, #8]
 80072ca:	463e      	mov	r6, r7
 80072cc:	42be      	cmp	r6, r7
 80072ce:	d900      	bls.n	80072d2 <__ssputs_r+0x86>
 80072d0:	463e      	mov	r6, r7
 80072d2:	6820      	ldr	r0, [r4, #0]
 80072d4:	4632      	mov	r2, r6
 80072d6:	4641      	mov	r1, r8
 80072d8:	f000 f966 	bl	80075a8 <memmove>
 80072dc:	68a3      	ldr	r3, [r4, #8]
 80072de:	1b9b      	subs	r3, r3, r6
 80072e0:	60a3      	str	r3, [r4, #8]
 80072e2:	6823      	ldr	r3, [r4, #0]
 80072e4:	4433      	add	r3, r6
 80072e6:	6023      	str	r3, [r4, #0]
 80072e8:	2000      	movs	r0, #0
 80072ea:	e7db      	b.n	80072a4 <__ssputs_r+0x58>
 80072ec:	462a      	mov	r2, r5
 80072ee:	f000 f981 	bl	80075f4 <_realloc_r>
 80072f2:	4606      	mov	r6, r0
 80072f4:	2800      	cmp	r0, #0
 80072f6:	d1e1      	bne.n	80072bc <__ssputs_r+0x70>
 80072f8:	6921      	ldr	r1, [r4, #16]
 80072fa:	4650      	mov	r0, sl
 80072fc:	f7ff fec6 	bl	800708c <_free_r>
 8007300:	e7c7      	b.n	8007292 <__ssputs_r+0x46>
	...

08007304 <_svfiprintf_r>:
 8007304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007308:	4698      	mov	r8, r3
 800730a:	898b      	ldrh	r3, [r1, #12]
 800730c:	061b      	lsls	r3, r3, #24
 800730e:	b09d      	sub	sp, #116	; 0x74
 8007310:	4607      	mov	r7, r0
 8007312:	460d      	mov	r5, r1
 8007314:	4614      	mov	r4, r2
 8007316:	d50e      	bpl.n	8007336 <_svfiprintf_r+0x32>
 8007318:	690b      	ldr	r3, [r1, #16]
 800731a:	b963      	cbnz	r3, 8007336 <_svfiprintf_r+0x32>
 800731c:	2140      	movs	r1, #64	; 0x40
 800731e:	f7ff ff21 	bl	8007164 <_malloc_r>
 8007322:	6028      	str	r0, [r5, #0]
 8007324:	6128      	str	r0, [r5, #16]
 8007326:	b920      	cbnz	r0, 8007332 <_svfiprintf_r+0x2e>
 8007328:	230c      	movs	r3, #12
 800732a:	603b      	str	r3, [r7, #0]
 800732c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007330:	e0d1      	b.n	80074d6 <_svfiprintf_r+0x1d2>
 8007332:	2340      	movs	r3, #64	; 0x40
 8007334:	616b      	str	r3, [r5, #20]
 8007336:	2300      	movs	r3, #0
 8007338:	9309      	str	r3, [sp, #36]	; 0x24
 800733a:	2320      	movs	r3, #32
 800733c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007340:	f8cd 800c 	str.w	r8, [sp, #12]
 8007344:	2330      	movs	r3, #48	; 0x30
 8007346:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80074f0 <_svfiprintf_r+0x1ec>
 800734a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800734e:	f04f 0901 	mov.w	r9, #1
 8007352:	4623      	mov	r3, r4
 8007354:	469a      	mov	sl, r3
 8007356:	f813 2b01 	ldrb.w	r2, [r3], #1
 800735a:	b10a      	cbz	r2, 8007360 <_svfiprintf_r+0x5c>
 800735c:	2a25      	cmp	r2, #37	; 0x25
 800735e:	d1f9      	bne.n	8007354 <_svfiprintf_r+0x50>
 8007360:	ebba 0b04 	subs.w	fp, sl, r4
 8007364:	d00b      	beq.n	800737e <_svfiprintf_r+0x7a>
 8007366:	465b      	mov	r3, fp
 8007368:	4622      	mov	r2, r4
 800736a:	4629      	mov	r1, r5
 800736c:	4638      	mov	r0, r7
 800736e:	f7ff ff6d 	bl	800724c <__ssputs_r>
 8007372:	3001      	adds	r0, #1
 8007374:	f000 80aa 	beq.w	80074cc <_svfiprintf_r+0x1c8>
 8007378:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800737a:	445a      	add	r2, fp
 800737c:	9209      	str	r2, [sp, #36]	; 0x24
 800737e:	f89a 3000 	ldrb.w	r3, [sl]
 8007382:	2b00      	cmp	r3, #0
 8007384:	f000 80a2 	beq.w	80074cc <_svfiprintf_r+0x1c8>
 8007388:	2300      	movs	r3, #0
 800738a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800738e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007392:	f10a 0a01 	add.w	sl, sl, #1
 8007396:	9304      	str	r3, [sp, #16]
 8007398:	9307      	str	r3, [sp, #28]
 800739a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800739e:	931a      	str	r3, [sp, #104]	; 0x68
 80073a0:	4654      	mov	r4, sl
 80073a2:	2205      	movs	r2, #5
 80073a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073a8:	4851      	ldr	r0, [pc, #324]	; (80074f0 <_svfiprintf_r+0x1ec>)
 80073aa:	f7f8 ff21 	bl	80001f0 <memchr>
 80073ae:	9a04      	ldr	r2, [sp, #16]
 80073b0:	b9d8      	cbnz	r0, 80073ea <_svfiprintf_r+0xe6>
 80073b2:	06d0      	lsls	r0, r2, #27
 80073b4:	bf44      	itt	mi
 80073b6:	2320      	movmi	r3, #32
 80073b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073bc:	0711      	lsls	r1, r2, #28
 80073be:	bf44      	itt	mi
 80073c0:	232b      	movmi	r3, #43	; 0x2b
 80073c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073c6:	f89a 3000 	ldrb.w	r3, [sl]
 80073ca:	2b2a      	cmp	r3, #42	; 0x2a
 80073cc:	d015      	beq.n	80073fa <_svfiprintf_r+0xf6>
 80073ce:	9a07      	ldr	r2, [sp, #28]
 80073d0:	4654      	mov	r4, sl
 80073d2:	2000      	movs	r0, #0
 80073d4:	f04f 0c0a 	mov.w	ip, #10
 80073d8:	4621      	mov	r1, r4
 80073da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073de:	3b30      	subs	r3, #48	; 0x30
 80073e0:	2b09      	cmp	r3, #9
 80073e2:	d94e      	bls.n	8007482 <_svfiprintf_r+0x17e>
 80073e4:	b1b0      	cbz	r0, 8007414 <_svfiprintf_r+0x110>
 80073e6:	9207      	str	r2, [sp, #28]
 80073e8:	e014      	b.n	8007414 <_svfiprintf_r+0x110>
 80073ea:	eba0 0308 	sub.w	r3, r0, r8
 80073ee:	fa09 f303 	lsl.w	r3, r9, r3
 80073f2:	4313      	orrs	r3, r2
 80073f4:	9304      	str	r3, [sp, #16]
 80073f6:	46a2      	mov	sl, r4
 80073f8:	e7d2      	b.n	80073a0 <_svfiprintf_r+0x9c>
 80073fa:	9b03      	ldr	r3, [sp, #12]
 80073fc:	1d19      	adds	r1, r3, #4
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	9103      	str	r1, [sp, #12]
 8007402:	2b00      	cmp	r3, #0
 8007404:	bfbb      	ittet	lt
 8007406:	425b      	neglt	r3, r3
 8007408:	f042 0202 	orrlt.w	r2, r2, #2
 800740c:	9307      	strge	r3, [sp, #28]
 800740e:	9307      	strlt	r3, [sp, #28]
 8007410:	bfb8      	it	lt
 8007412:	9204      	strlt	r2, [sp, #16]
 8007414:	7823      	ldrb	r3, [r4, #0]
 8007416:	2b2e      	cmp	r3, #46	; 0x2e
 8007418:	d10c      	bne.n	8007434 <_svfiprintf_r+0x130>
 800741a:	7863      	ldrb	r3, [r4, #1]
 800741c:	2b2a      	cmp	r3, #42	; 0x2a
 800741e:	d135      	bne.n	800748c <_svfiprintf_r+0x188>
 8007420:	9b03      	ldr	r3, [sp, #12]
 8007422:	1d1a      	adds	r2, r3, #4
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	9203      	str	r2, [sp, #12]
 8007428:	2b00      	cmp	r3, #0
 800742a:	bfb8      	it	lt
 800742c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007430:	3402      	adds	r4, #2
 8007432:	9305      	str	r3, [sp, #20]
 8007434:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007500 <_svfiprintf_r+0x1fc>
 8007438:	7821      	ldrb	r1, [r4, #0]
 800743a:	2203      	movs	r2, #3
 800743c:	4650      	mov	r0, sl
 800743e:	f7f8 fed7 	bl	80001f0 <memchr>
 8007442:	b140      	cbz	r0, 8007456 <_svfiprintf_r+0x152>
 8007444:	2340      	movs	r3, #64	; 0x40
 8007446:	eba0 000a 	sub.w	r0, r0, sl
 800744a:	fa03 f000 	lsl.w	r0, r3, r0
 800744e:	9b04      	ldr	r3, [sp, #16]
 8007450:	4303      	orrs	r3, r0
 8007452:	3401      	adds	r4, #1
 8007454:	9304      	str	r3, [sp, #16]
 8007456:	f814 1b01 	ldrb.w	r1, [r4], #1
 800745a:	4826      	ldr	r0, [pc, #152]	; (80074f4 <_svfiprintf_r+0x1f0>)
 800745c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007460:	2206      	movs	r2, #6
 8007462:	f7f8 fec5 	bl	80001f0 <memchr>
 8007466:	2800      	cmp	r0, #0
 8007468:	d038      	beq.n	80074dc <_svfiprintf_r+0x1d8>
 800746a:	4b23      	ldr	r3, [pc, #140]	; (80074f8 <_svfiprintf_r+0x1f4>)
 800746c:	bb1b      	cbnz	r3, 80074b6 <_svfiprintf_r+0x1b2>
 800746e:	9b03      	ldr	r3, [sp, #12]
 8007470:	3307      	adds	r3, #7
 8007472:	f023 0307 	bic.w	r3, r3, #7
 8007476:	3308      	adds	r3, #8
 8007478:	9303      	str	r3, [sp, #12]
 800747a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800747c:	4433      	add	r3, r6
 800747e:	9309      	str	r3, [sp, #36]	; 0x24
 8007480:	e767      	b.n	8007352 <_svfiprintf_r+0x4e>
 8007482:	fb0c 3202 	mla	r2, ip, r2, r3
 8007486:	460c      	mov	r4, r1
 8007488:	2001      	movs	r0, #1
 800748a:	e7a5      	b.n	80073d8 <_svfiprintf_r+0xd4>
 800748c:	2300      	movs	r3, #0
 800748e:	3401      	adds	r4, #1
 8007490:	9305      	str	r3, [sp, #20]
 8007492:	4619      	mov	r1, r3
 8007494:	f04f 0c0a 	mov.w	ip, #10
 8007498:	4620      	mov	r0, r4
 800749a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800749e:	3a30      	subs	r2, #48	; 0x30
 80074a0:	2a09      	cmp	r2, #9
 80074a2:	d903      	bls.n	80074ac <_svfiprintf_r+0x1a8>
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d0c5      	beq.n	8007434 <_svfiprintf_r+0x130>
 80074a8:	9105      	str	r1, [sp, #20]
 80074aa:	e7c3      	b.n	8007434 <_svfiprintf_r+0x130>
 80074ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80074b0:	4604      	mov	r4, r0
 80074b2:	2301      	movs	r3, #1
 80074b4:	e7f0      	b.n	8007498 <_svfiprintf_r+0x194>
 80074b6:	ab03      	add	r3, sp, #12
 80074b8:	9300      	str	r3, [sp, #0]
 80074ba:	462a      	mov	r2, r5
 80074bc:	4b0f      	ldr	r3, [pc, #60]	; (80074fc <_svfiprintf_r+0x1f8>)
 80074be:	a904      	add	r1, sp, #16
 80074c0:	4638      	mov	r0, r7
 80074c2:	f7fd ffcb 	bl	800545c <_printf_float>
 80074c6:	1c42      	adds	r2, r0, #1
 80074c8:	4606      	mov	r6, r0
 80074ca:	d1d6      	bne.n	800747a <_svfiprintf_r+0x176>
 80074cc:	89ab      	ldrh	r3, [r5, #12]
 80074ce:	065b      	lsls	r3, r3, #25
 80074d0:	f53f af2c 	bmi.w	800732c <_svfiprintf_r+0x28>
 80074d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074d6:	b01d      	add	sp, #116	; 0x74
 80074d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074dc:	ab03      	add	r3, sp, #12
 80074de:	9300      	str	r3, [sp, #0]
 80074e0:	462a      	mov	r2, r5
 80074e2:	4b06      	ldr	r3, [pc, #24]	; (80074fc <_svfiprintf_r+0x1f8>)
 80074e4:	a904      	add	r1, sp, #16
 80074e6:	4638      	mov	r0, r7
 80074e8:	f7fe fa5c 	bl	80059a4 <_printf_i>
 80074ec:	e7eb      	b.n	80074c6 <_svfiprintf_r+0x1c2>
 80074ee:	bf00      	nop
 80074f0:	0800862c 	.word	0x0800862c
 80074f4:	08008636 	.word	0x08008636
 80074f8:	0800545d 	.word	0x0800545d
 80074fc:	0800724d 	.word	0x0800724d
 8007500:	08008632 	.word	0x08008632

08007504 <_sbrk_r>:
 8007504:	b538      	push	{r3, r4, r5, lr}
 8007506:	4d06      	ldr	r5, [pc, #24]	; (8007520 <_sbrk_r+0x1c>)
 8007508:	2300      	movs	r3, #0
 800750a:	4604      	mov	r4, r0
 800750c:	4608      	mov	r0, r1
 800750e:	602b      	str	r3, [r5, #0]
 8007510:	f7fa ffa2 	bl	8002458 <_sbrk>
 8007514:	1c43      	adds	r3, r0, #1
 8007516:	d102      	bne.n	800751e <_sbrk_r+0x1a>
 8007518:	682b      	ldr	r3, [r5, #0]
 800751a:	b103      	cbz	r3, 800751e <_sbrk_r+0x1a>
 800751c:	6023      	str	r3, [r4, #0]
 800751e:	bd38      	pop	{r3, r4, r5, pc}
 8007520:	20000448 	.word	0x20000448

08007524 <__assert_func>:
 8007524:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007526:	4614      	mov	r4, r2
 8007528:	461a      	mov	r2, r3
 800752a:	4b09      	ldr	r3, [pc, #36]	; (8007550 <__assert_func+0x2c>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4605      	mov	r5, r0
 8007530:	68d8      	ldr	r0, [r3, #12]
 8007532:	b14c      	cbz	r4, 8007548 <__assert_func+0x24>
 8007534:	4b07      	ldr	r3, [pc, #28]	; (8007554 <__assert_func+0x30>)
 8007536:	9100      	str	r1, [sp, #0]
 8007538:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800753c:	4906      	ldr	r1, [pc, #24]	; (8007558 <__assert_func+0x34>)
 800753e:	462b      	mov	r3, r5
 8007540:	f000 f80e 	bl	8007560 <fiprintf>
 8007544:	f000 faac 	bl	8007aa0 <abort>
 8007548:	4b04      	ldr	r3, [pc, #16]	; (800755c <__assert_func+0x38>)
 800754a:	461c      	mov	r4, r3
 800754c:	e7f3      	b.n	8007536 <__assert_func+0x12>
 800754e:	bf00      	nop
 8007550:	2000000c 	.word	0x2000000c
 8007554:	0800863d 	.word	0x0800863d
 8007558:	0800864a 	.word	0x0800864a
 800755c:	08008678 	.word	0x08008678

08007560 <fiprintf>:
 8007560:	b40e      	push	{r1, r2, r3}
 8007562:	b503      	push	{r0, r1, lr}
 8007564:	4601      	mov	r1, r0
 8007566:	ab03      	add	r3, sp, #12
 8007568:	4805      	ldr	r0, [pc, #20]	; (8007580 <fiprintf+0x20>)
 800756a:	f853 2b04 	ldr.w	r2, [r3], #4
 800756e:	6800      	ldr	r0, [r0, #0]
 8007570:	9301      	str	r3, [sp, #4]
 8007572:	f000 f897 	bl	80076a4 <_vfiprintf_r>
 8007576:	b002      	add	sp, #8
 8007578:	f85d eb04 	ldr.w	lr, [sp], #4
 800757c:	b003      	add	sp, #12
 800757e:	4770      	bx	lr
 8007580:	2000000c 	.word	0x2000000c

08007584 <__ascii_mbtowc>:
 8007584:	b082      	sub	sp, #8
 8007586:	b901      	cbnz	r1, 800758a <__ascii_mbtowc+0x6>
 8007588:	a901      	add	r1, sp, #4
 800758a:	b142      	cbz	r2, 800759e <__ascii_mbtowc+0x1a>
 800758c:	b14b      	cbz	r3, 80075a2 <__ascii_mbtowc+0x1e>
 800758e:	7813      	ldrb	r3, [r2, #0]
 8007590:	600b      	str	r3, [r1, #0]
 8007592:	7812      	ldrb	r2, [r2, #0]
 8007594:	1e10      	subs	r0, r2, #0
 8007596:	bf18      	it	ne
 8007598:	2001      	movne	r0, #1
 800759a:	b002      	add	sp, #8
 800759c:	4770      	bx	lr
 800759e:	4610      	mov	r0, r2
 80075a0:	e7fb      	b.n	800759a <__ascii_mbtowc+0x16>
 80075a2:	f06f 0001 	mvn.w	r0, #1
 80075a6:	e7f8      	b.n	800759a <__ascii_mbtowc+0x16>

080075a8 <memmove>:
 80075a8:	4288      	cmp	r0, r1
 80075aa:	b510      	push	{r4, lr}
 80075ac:	eb01 0402 	add.w	r4, r1, r2
 80075b0:	d902      	bls.n	80075b8 <memmove+0x10>
 80075b2:	4284      	cmp	r4, r0
 80075b4:	4623      	mov	r3, r4
 80075b6:	d807      	bhi.n	80075c8 <memmove+0x20>
 80075b8:	1e43      	subs	r3, r0, #1
 80075ba:	42a1      	cmp	r1, r4
 80075bc:	d008      	beq.n	80075d0 <memmove+0x28>
 80075be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80075c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80075c6:	e7f8      	b.n	80075ba <memmove+0x12>
 80075c8:	4402      	add	r2, r0
 80075ca:	4601      	mov	r1, r0
 80075cc:	428a      	cmp	r2, r1
 80075ce:	d100      	bne.n	80075d2 <memmove+0x2a>
 80075d0:	bd10      	pop	{r4, pc}
 80075d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80075d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80075da:	e7f7      	b.n	80075cc <memmove+0x24>

080075dc <__malloc_lock>:
 80075dc:	4801      	ldr	r0, [pc, #4]	; (80075e4 <__malloc_lock+0x8>)
 80075de:	f000 bc1f 	b.w	8007e20 <__retarget_lock_acquire_recursive>
 80075e2:	bf00      	nop
 80075e4:	2000044c 	.word	0x2000044c

080075e8 <__malloc_unlock>:
 80075e8:	4801      	ldr	r0, [pc, #4]	; (80075f0 <__malloc_unlock+0x8>)
 80075ea:	f000 bc1a 	b.w	8007e22 <__retarget_lock_release_recursive>
 80075ee:	bf00      	nop
 80075f0:	2000044c 	.word	0x2000044c

080075f4 <_realloc_r>:
 80075f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075f8:	4680      	mov	r8, r0
 80075fa:	4614      	mov	r4, r2
 80075fc:	460e      	mov	r6, r1
 80075fe:	b921      	cbnz	r1, 800760a <_realloc_r+0x16>
 8007600:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007604:	4611      	mov	r1, r2
 8007606:	f7ff bdad 	b.w	8007164 <_malloc_r>
 800760a:	b92a      	cbnz	r2, 8007618 <_realloc_r+0x24>
 800760c:	f7ff fd3e 	bl	800708c <_free_r>
 8007610:	4625      	mov	r5, r4
 8007612:	4628      	mov	r0, r5
 8007614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007618:	f000 fc6a 	bl	8007ef0 <_malloc_usable_size_r>
 800761c:	4284      	cmp	r4, r0
 800761e:	4607      	mov	r7, r0
 8007620:	d802      	bhi.n	8007628 <_realloc_r+0x34>
 8007622:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007626:	d812      	bhi.n	800764e <_realloc_r+0x5a>
 8007628:	4621      	mov	r1, r4
 800762a:	4640      	mov	r0, r8
 800762c:	f7ff fd9a 	bl	8007164 <_malloc_r>
 8007630:	4605      	mov	r5, r0
 8007632:	2800      	cmp	r0, #0
 8007634:	d0ed      	beq.n	8007612 <_realloc_r+0x1e>
 8007636:	42bc      	cmp	r4, r7
 8007638:	4622      	mov	r2, r4
 800763a:	4631      	mov	r1, r6
 800763c:	bf28      	it	cs
 800763e:	463a      	movcs	r2, r7
 8007640:	f7ff f97c 	bl	800693c <memcpy>
 8007644:	4631      	mov	r1, r6
 8007646:	4640      	mov	r0, r8
 8007648:	f7ff fd20 	bl	800708c <_free_r>
 800764c:	e7e1      	b.n	8007612 <_realloc_r+0x1e>
 800764e:	4635      	mov	r5, r6
 8007650:	e7df      	b.n	8007612 <_realloc_r+0x1e>

08007652 <__sfputc_r>:
 8007652:	6893      	ldr	r3, [r2, #8]
 8007654:	3b01      	subs	r3, #1
 8007656:	2b00      	cmp	r3, #0
 8007658:	b410      	push	{r4}
 800765a:	6093      	str	r3, [r2, #8]
 800765c:	da08      	bge.n	8007670 <__sfputc_r+0x1e>
 800765e:	6994      	ldr	r4, [r2, #24]
 8007660:	42a3      	cmp	r3, r4
 8007662:	db01      	blt.n	8007668 <__sfputc_r+0x16>
 8007664:	290a      	cmp	r1, #10
 8007666:	d103      	bne.n	8007670 <__sfputc_r+0x1e>
 8007668:	f85d 4b04 	ldr.w	r4, [sp], #4
 800766c:	f000 b94a 	b.w	8007904 <__swbuf_r>
 8007670:	6813      	ldr	r3, [r2, #0]
 8007672:	1c58      	adds	r0, r3, #1
 8007674:	6010      	str	r0, [r2, #0]
 8007676:	7019      	strb	r1, [r3, #0]
 8007678:	4608      	mov	r0, r1
 800767a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800767e:	4770      	bx	lr

08007680 <__sfputs_r>:
 8007680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007682:	4606      	mov	r6, r0
 8007684:	460f      	mov	r7, r1
 8007686:	4614      	mov	r4, r2
 8007688:	18d5      	adds	r5, r2, r3
 800768a:	42ac      	cmp	r4, r5
 800768c:	d101      	bne.n	8007692 <__sfputs_r+0x12>
 800768e:	2000      	movs	r0, #0
 8007690:	e007      	b.n	80076a2 <__sfputs_r+0x22>
 8007692:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007696:	463a      	mov	r2, r7
 8007698:	4630      	mov	r0, r6
 800769a:	f7ff ffda 	bl	8007652 <__sfputc_r>
 800769e:	1c43      	adds	r3, r0, #1
 80076a0:	d1f3      	bne.n	800768a <__sfputs_r+0xa>
 80076a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080076a4 <_vfiprintf_r>:
 80076a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076a8:	460d      	mov	r5, r1
 80076aa:	b09d      	sub	sp, #116	; 0x74
 80076ac:	4614      	mov	r4, r2
 80076ae:	4698      	mov	r8, r3
 80076b0:	4606      	mov	r6, r0
 80076b2:	b118      	cbz	r0, 80076bc <_vfiprintf_r+0x18>
 80076b4:	6983      	ldr	r3, [r0, #24]
 80076b6:	b90b      	cbnz	r3, 80076bc <_vfiprintf_r+0x18>
 80076b8:	f000 fb14 	bl	8007ce4 <__sinit>
 80076bc:	4b89      	ldr	r3, [pc, #548]	; (80078e4 <_vfiprintf_r+0x240>)
 80076be:	429d      	cmp	r5, r3
 80076c0:	d11b      	bne.n	80076fa <_vfiprintf_r+0x56>
 80076c2:	6875      	ldr	r5, [r6, #4]
 80076c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076c6:	07d9      	lsls	r1, r3, #31
 80076c8:	d405      	bmi.n	80076d6 <_vfiprintf_r+0x32>
 80076ca:	89ab      	ldrh	r3, [r5, #12]
 80076cc:	059a      	lsls	r2, r3, #22
 80076ce:	d402      	bmi.n	80076d6 <_vfiprintf_r+0x32>
 80076d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076d2:	f000 fba5 	bl	8007e20 <__retarget_lock_acquire_recursive>
 80076d6:	89ab      	ldrh	r3, [r5, #12]
 80076d8:	071b      	lsls	r3, r3, #28
 80076da:	d501      	bpl.n	80076e0 <_vfiprintf_r+0x3c>
 80076dc:	692b      	ldr	r3, [r5, #16]
 80076de:	b9eb      	cbnz	r3, 800771c <_vfiprintf_r+0x78>
 80076e0:	4629      	mov	r1, r5
 80076e2:	4630      	mov	r0, r6
 80076e4:	f000 f96e 	bl	80079c4 <__swsetup_r>
 80076e8:	b1c0      	cbz	r0, 800771c <_vfiprintf_r+0x78>
 80076ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076ec:	07dc      	lsls	r4, r3, #31
 80076ee:	d50e      	bpl.n	800770e <_vfiprintf_r+0x6a>
 80076f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076f4:	b01d      	add	sp, #116	; 0x74
 80076f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076fa:	4b7b      	ldr	r3, [pc, #492]	; (80078e8 <_vfiprintf_r+0x244>)
 80076fc:	429d      	cmp	r5, r3
 80076fe:	d101      	bne.n	8007704 <_vfiprintf_r+0x60>
 8007700:	68b5      	ldr	r5, [r6, #8]
 8007702:	e7df      	b.n	80076c4 <_vfiprintf_r+0x20>
 8007704:	4b79      	ldr	r3, [pc, #484]	; (80078ec <_vfiprintf_r+0x248>)
 8007706:	429d      	cmp	r5, r3
 8007708:	bf08      	it	eq
 800770a:	68f5      	ldreq	r5, [r6, #12]
 800770c:	e7da      	b.n	80076c4 <_vfiprintf_r+0x20>
 800770e:	89ab      	ldrh	r3, [r5, #12]
 8007710:	0598      	lsls	r0, r3, #22
 8007712:	d4ed      	bmi.n	80076f0 <_vfiprintf_r+0x4c>
 8007714:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007716:	f000 fb84 	bl	8007e22 <__retarget_lock_release_recursive>
 800771a:	e7e9      	b.n	80076f0 <_vfiprintf_r+0x4c>
 800771c:	2300      	movs	r3, #0
 800771e:	9309      	str	r3, [sp, #36]	; 0x24
 8007720:	2320      	movs	r3, #32
 8007722:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007726:	f8cd 800c 	str.w	r8, [sp, #12]
 800772a:	2330      	movs	r3, #48	; 0x30
 800772c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80078f0 <_vfiprintf_r+0x24c>
 8007730:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007734:	f04f 0901 	mov.w	r9, #1
 8007738:	4623      	mov	r3, r4
 800773a:	469a      	mov	sl, r3
 800773c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007740:	b10a      	cbz	r2, 8007746 <_vfiprintf_r+0xa2>
 8007742:	2a25      	cmp	r2, #37	; 0x25
 8007744:	d1f9      	bne.n	800773a <_vfiprintf_r+0x96>
 8007746:	ebba 0b04 	subs.w	fp, sl, r4
 800774a:	d00b      	beq.n	8007764 <_vfiprintf_r+0xc0>
 800774c:	465b      	mov	r3, fp
 800774e:	4622      	mov	r2, r4
 8007750:	4629      	mov	r1, r5
 8007752:	4630      	mov	r0, r6
 8007754:	f7ff ff94 	bl	8007680 <__sfputs_r>
 8007758:	3001      	adds	r0, #1
 800775a:	f000 80aa 	beq.w	80078b2 <_vfiprintf_r+0x20e>
 800775e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007760:	445a      	add	r2, fp
 8007762:	9209      	str	r2, [sp, #36]	; 0x24
 8007764:	f89a 3000 	ldrb.w	r3, [sl]
 8007768:	2b00      	cmp	r3, #0
 800776a:	f000 80a2 	beq.w	80078b2 <_vfiprintf_r+0x20e>
 800776e:	2300      	movs	r3, #0
 8007770:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007774:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007778:	f10a 0a01 	add.w	sl, sl, #1
 800777c:	9304      	str	r3, [sp, #16]
 800777e:	9307      	str	r3, [sp, #28]
 8007780:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007784:	931a      	str	r3, [sp, #104]	; 0x68
 8007786:	4654      	mov	r4, sl
 8007788:	2205      	movs	r2, #5
 800778a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800778e:	4858      	ldr	r0, [pc, #352]	; (80078f0 <_vfiprintf_r+0x24c>)
 8007790:	f7f8 fd2e 	bl	80001f0 <memchr>
 8007794:	9a04      	ldr	r2, [sp, #16]
 8007796:	b9d8      	cbnz	r0, 80077d0 <_vfiprintf_r+0x12c>
 8007798:	06d1      	lsls	r1, r2, #27
 800779a:	bf44      	itt	mi
 800779c:	2320      	movmi	r3, #32
 800779e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077a2:	0713      	lsls	r3, r2, #28
 80077a4:	bf44      	itt	mi
 80077a6:	232b      	movmi	r3, #43	; 0x2b
 80077a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077ac:	f89a 3000 	ldrb.w	r3, [sl]
 80077b0:	2b2a      	cmp	r3, #42	; 0x2a
 80077b2:	d015      	beq.n	80077e0 <_vfiprintf_r+0x13c>
 80077b4:	9a07      	ldr	r2, [sp, #28]
 80077b6:	4654      	mov	r4, sl
 80077b8:	2000      	movs	r0, #0
 80077ba:	f04f 0c0a 	mov.w	ip, #10
 80077be:	4621      	mov	r1, r4
 80077c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077c4:	3b30      	subs	r3, #48	; 0x30
 80077c6:	2b09      	cmp	r3, #9
 80077c8:	d94e      	bls.n	8007868 <_vfiprintf_r+0x1c4>
 80077ca:	b1b0      	cbz	r0, 80077fa <_vfiprintf_r+0x156>
 80077cc:	9207      	str	r2, [sp, #28]
 80077ce:	e014      	b.n	80077fa <_vfiprintf_r+0x156>
 80077d0:	eba0 0308 	sub.w	r3, r0, r8
 80077d4:	fa09 f303 	lsl.w	r3, r9, r3
 80077d8:	4313      	orrs	r3, r2
 80077da:	9304      	str	r3, [sp, #16]
 80077dc:	46a2      	mov	sl, r4
 80077de:	e7d2      	b.n	8007786 <_vfiprintf_r+0xe2>
 80077e0:	9b03      	ldr	r3, [sp, #12]
 80077e2:	1d19      	adds	r1, r3, #4
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	9103      	str	r1, [sp, #12]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	bfbb      	ittet	lt
 80077ec:	425b      	neglt	r3, r3
 80077ee:	f042 0202 	orrlt.w	r2, r2, #2
 80077f2:	9307      	strge	r3, [sp, #28]
 80077f4:	9307      	strlt	r3, [sp, #28]
 80077f6:	bfb8      	it	lt
 80077f8:	9204      	strlt	r2, [sp, #16]
 80077fa:	7823      	ldrb	r3, [r4, #0]
 80077fc:	2b2e      	cmp	r3, #46	; 0x2e
 80077fe:	d10c      	bne.n	800781a <_vfiprintf_r+0x176>
 8007800:	7863      	ldrb	r3, [r4, #1]
 8007802:	2b2a      	cmp	r3, #42	; 0x2a
 8007804:	d135      	bne.n	8007872 <_vfiprintf_r+0x1ce>
 8007806:	9b03      	ldr	r3, [sp, #12]
 8007808:	1d1a      	adds	r2, r3, #4
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	9203      	str	r2, [sp, #12]
 800780e:	2b00      	cmp	r3, #0
 8007810:	bfb8      	it	lt
 8007812:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007816:	3402      	adds	r4, #2
 8007818:	9305      	str	r3, [sp, #20]
 800781a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007900 <_vfiprintf_r+0x25c>
 800781e:	7821      	ldrb	r1, [r4, #0]
 8007820:	2203      	movs	r2, #3
 8007822:	4650      	mov	r0, sl
 8007824:	f7f8 fce4 	bl	80001f0 <memchr>
 8007828:	b140      	cbz	r0, 800783c <_vfiprintf_r+0x198>
 800782a:	2340      	movs	r3, #64	; 0x40
 800782c:	eba0 000a 	sub.w	r0, r0, sl
 8007830:	fa03 f000 	lsl.w	r0, r3, r0
 8007834:	9b04      	ldr	r3, [sp, #16]
 8007836:	4303      	orrs	r3, r0
 8007838:	3401      	adds	r4, #1
 800783a:	9304      	str	r3, [sp, #16]
 800783c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007840:	482c      	ldr	r0, [pc, #176]	; (80078f4 <_vfiprintf_r+0x250>)
 8007842:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007846:	2206      	movs	r2, #6
 8007848:	f7f8 fcd2 	bl	80001f0 <memchr>
 800784c:	2800      	cmp	r0, #0
 800784e:	d03f      	beq.n	80078d0 <_vfiprintf_r+0x22c>
 8007850:	4b29      	ldr	r3, [pc, #164]	; (80078f8 <_vfiprintf_r+0x254>)
 8007852:	bb1b      	cbnz	r3, 800789c <_vfiprintf_r+0x1f8>
 8007854:	9b03      	ldr	r3, [sp, #12]
 8007856:	3307      	adds	r3, #7
 8007858:	f023 0307 	bic.w	r3, r3, #7
 800785c:	3308      	adds	r3, #8
 800785e:	9303      	str	r3, [sp, #12]
 8007860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007862:	443b      	add	r3, r7
 8007864:	9309      	str	r3, [sp, #36]	; 0x24
 8007866:	e767      	b.n	8007738 <_vfiprintf_r+0x94>
 8007868:	fb0c 3202 	mla	r2, ip, r2, r3
 800786c:	460c      	mov	r4, r1
 800786e:	2001      	movs	r0, #1
 8007870:	e7a5      	b.n	80077be <_vfiprintf_r+0x11a>
 8007872:	2300      	movs	r3, #0
 8007874:	3401      	adds	r4, #1
 8007876:	9305      	str	r3, [sp, #20]
 8007878:	4619      	mov	r1, r3
 800787a:	f04f 0c0a 	mov.w	ip, #10
 800787e:	4620      	mov	r0, r4
 8007880:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007884:	3a30      	subs	r2, #48	; 0x30
 8007886:	2a09      	cmp	r2, #9
 8007888:	d903      	bls.n	8007892 <_vfiprintf_r+0x1ee>
 800788a:	2b00      	cmp	r3, #0
 800788c:	d0c5      	beq.n	800781a <_vfiprintf_r+0x176>
 800788e:	9105      	str	r1, [sp, #20]
 8007890:	e7c3      	b.n	800781a <_vfiprintf_r+0x176>
 8007892:	fb0c 2101 	mla	r1, ip, r1, r2
 8007896:	4604      	mov	r4, r0
 8007898:	2301      	movs	r3, #1
 800789a:	e7f0      	b.n	800787e <_vfiprintf_r+0x1da>
 800789c:	ab03      	add	r3, sp, #12
 800789e:	9300      	str	r3, [sp, #0]
 80078a0:	462a      	mov	r2, r5
 80078a2:	4b16      	ldr	r3, [pc, #88]	; (80078fc <_vfiprintf_r+0x258>)
 80078a4:	a904      	add	r1, sp, #16
 80078a6:	4630      	mov	r0, r6
 80078a8:	f7fd fdd8 	bl	800545c <_printf_float>
 80078ac:	4607      	mov	r7, r0
 80078ae:	1c78      	adds	r0, r7, #1
 80078b0:	d1d6      	bne.n	8007860 <_vfiprintf_r+0x1bc>
 80078b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078b4:	07d9      	lsls	r1, r3, #31
 80078b6:	d405      	bmi.n	80078c4 <_vfiprintf_r+0x220>
 80078b8:	89ab      	ldrh	r3, [r5, #12]
 80078ba:	059a      	lsls	r2, r3, #22
 80078bc:	d402      	bmi.n	80078c4 <_vfiprintf_r+0x220>
 80078be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078c0:	f000 faaf 	bl	8007e22 <__retarget_lock_release_recursive>
 80078c4:	89ab      	ldrh	r3, [r5, #12]
 80078c6:	065b      	lsls	r3, r3, #25
 80078c8:	f53f af12 	bmi.w	80076f0 <_vfiprintf_r+0x4c>
 80078cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078ce:	e711      	b.n	80076f4 <_vfiprintf_r+0x50>
 80078d0:	ab03      	add	r3, sp, #12
 80078d2:	9300      	str	r3, [sp, #0]
 80078d4:	462a      	mov	r2, r5
 80078d6:	4b09      	ldr	r3, [pc, #36]	; (80078fc <_vfiprintf_r+0x258>)
 80078d8:	a904      	add	r1, sp, #16
 80078da:	4630      	mov	r0, r6
 80078dc:	f7fe f862 	bl	80059a4 <_printf_i>
 80078e0:	e7e4      	b.n	80078ac <_vfiprintf_r+0x208>
 80078e2:	bf00      	nop
 80078e4:	080087a4 	.word	0x080087a4
 80078e8:	080087c4 	.word	0x080087c4
 80078ec:	08008784 	.word	0x08008784
 80078f0:	0800862c 	.word	0x0800862c
 80078f4:	08008636 	.word	0x08008636
 80078f8:	0800545d 	.word	0x0800545d
 80078fc:	08007681 	.word	0x08007681
 8007900:	08008632 	.word	0x08008632

08007904 <__swbuf_r>:
 8007904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007906:	460e      	mov	r6, r1
 8007908:	4614      	mov	r4, r2
 800790a:	4605      	mov	r5, r0
 800790c:	b118      	cbz	r0, 8007916 <__swbuf_r+0x12>
 800790e:	6983      	ldr	r3, [r0, #24]
 8007910:	b90b      	cbnz	r3, 8007916 <__swbuf_r+0x12>
 8007912:	f000 f9e7 	bl	8007ce4 <__sinit>
 8007916:	4b21      	ldr	r3, [pc, #132]	; (800799c <__swbuf_r+0x98>)
 8007918:	429c      	cmp	r4, r3
 800791a:	d12b      	bne.n	8007974 <__swbuf_r+0x70>
 800791c:	686c      	ldr	r4, [r5, #4]
 800791e:	69a3      	ldr	r3, [r4, #24]
 8007920:	60a3      	str	r3, [r4, #8]
 8007922:	89a3      	ldrh	r3, [r4, #12]
 8007924:	071a      	lsls	r2, r3, #28
 8007926:	d52f      	bpl.n	8007988 <__swbuf_r+0x84>
 8007928:	6923      	ldr	r3, [r4, #16]
 800792a:	b36b      	cbz	r3, 8007988 <__swbuf_r+0x84>
 800792c:	6923      	ldr	r3, [r4, #16]
 800792e:	6820      	ldr	r0, [r4, #0]
 8007930:	1ac0      	subs	r0, r0, r3
 8007932:	6963      	ldr	r3, [r4, #20]
 8007934:	b2f6      	uxtb	r6, r6
 8007936:	4283      	cmp	r3, r0
 8007938:	4637      	mov	r7, r6
 800793a:	dc04      	bgt.n	8007946 <__swbuf_r+0x42>
 800793c:	4621      	mov	r1, r4
 800793e:	4628      	mov	r0, r5
 8007940:	f000 f93c 	bl	8007bbc <_fflush_r>
 8007944:	bb30      	cbnz	r0, 8007994 <__swbuf_r+0x90>
 8007946:	68a3      	ldr	r3, [r4, #8]
 8007948:	3b01      	subs	r3, #1
 800794a:	60a3      	str	r3, [r4, #8]
 800794c:	6823      	ldr	r3, [r4, #0]
 800794e:	1c5a      	adds	r2, r3, #1
 8007950:	6022      	str	r2, [r4, #0]
 8007952:	701e      	strb	r6, [r3, #0]
 8007954:	6963      	ldr	r3, [r4, #20]
 8007956:	3001      	adds	r0, #1
 8007958:	4283      	cmp	r3, r0
 800795a:	d004      	beq.n	8007966 <__swbuf_r+0x62>
 800795c:	89a3      	ldrh	r3, [r4, #12]
 800795e:	07db      	lsls	r3, r3, #31
 8007960:	d506      	bpl.n	8007970 <__swbuf_r+0x6c>
 8007962:	2e0a      	cmp	r6, #10
 8007964:	d104      	bne.n	8007970 <__swbuf_r+0x6c>
 8007966:	4621      	mov	r1, r4
 8007968:	4628      	mov	r0, r5
 800796a:	f000 f927 	bl	8007bbc <_fflush_r>
 800796e:	b988      	cbnz	r0, 8007994 <__swbuf_r+0x90>
 8007970:	4638      	mov	r0, r7
 8007972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007974:	4b0a      	ldr	r3, [pc, #40]	; (80079a0 <__swbuf_r+0x9c>)
 8007976:	429c      	cmp	r4, r3
 8007978:	d101      	bne.n	800797e <__swbuf_r+0x7a>
 800797a:	68ac      	ldr	r4, [r5, #8]
 800797c:	e7cf      	b.n	800791e <__swbuf_r+0x1a>
 800797e:	4b09      	ldr	r3, [pc, #36]	; (80079a4 <__swbuf_r+0xa0>)
 8007980:	429c      	cmp	r4, r3
 8007982:	bf08      	it	eq
 8007984:	68ec      	ldreq	r4, [r5, #12]
 8007986:	e7ca      	b.n	800791e <__swbuf_r+0x1a>
 8007988:	4621      	mov	r1, r4
 800798a:	4628      	mov	r0, r5
 800798c:	f000 f81a 	bl	80079c4 <__swsetup_r>
 8007990:	2800      	cmp	r0, #0
 8007992:	d0cb      	beq.n	800792c <__swbuf_r+0x28>
 8007994:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007998:	e7ea      	b.n	8007970 <__swbuf_r+0x6c>
 800799a:	bf00      	nop
 800799c:	080087a4 	.word	0x080087a4
 80079a0:	080087c4 	.word	0x080087c4
 80079a4:	08008784 	.word	0x08008784

080079a8 <__ascii_wctomb>:
 80079a8:	b149      	cbz	r1, 80079be <__ascii_wctomb+0x16>
 80079aa:	2aff      	cmp	r2, #255	; 0xff
 80079ac:	bf85      	ittet	hi
 80079ae:	238a      	movhi	r3, #138	; 0x8a
 80079b0:	6003      	strhi	r3, [r0, #0]
 80079b2:	700a      	strbls	r2, [r1, #0]
 80079b4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80079b8:	bf98      	it	ls
 80079ba:	2001      	movls	r0, #1
 80079bc:	4770      	bx	lr
 80079be:	4608      	mov	r0, r1
 80079c0:	4770      	bx	lr
	...

080079c4 <__swsetup_r>:
 80079c4:	4b32      	ldr	r3, [pc, #200]	; (8007a90 <__swsetup_r+0xcc>)
 80079c6:	b570      	push	{r4, r5, r6, lr}
 80079c8:	681d      	ldr	r5, [r3, #0]
 80079ca:	4606      	mov	r6, r0
 80079cc:	460c      	mov	r4, r1
 80079ce:	b125      	cbz	r5, 80079da <__swsetup_r+0x16>
 80079d0:	69ab      	ldr	r3, [r5, #24]
 80079d2:	b913      	cbnz	r3, 80079da <__swsetup_r+0x16>
 80079d4:	4628      	mov	r0, r5
 80079d6:	f000 f985 	bl	8007ce4 <__sinit>
 80079da:	4b2e      	ldr	r3, [pc, #184]	; (8007a94 <__swsetup_r+0xd0>)
 80079dc:	429c      	cmp	r4, r3
 80079de:	d10f      	bne.n	8007a00 <__swsetup_r+0x3c>
 80079e0:	686c      	ldr	r4, [r5, #4]
 80079e2:	89a3      	ldrh	r3, [r4, #12]
 80079e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079e8:	0719      	lsls	r1, r3, #28
 80079ea:	d42c      	bmi.n	8007a46 <__swsetup_r+0x82>
 80079ec:	06dd      	lsls	r5, r3, #27
 80079ee:	d411      	bmi.n	8007a14 <__swsetup_r+0x50>
 80079f0:	2309      	movs	r3, #9
 80079f2:	6033      	str	r3, [r6, #0]
 80079f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80079f8:	81a3      	strh	r3, [r4, #12]
 80079fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079fe:	e03e      	b.n	8007a7e <__swsetup_r+0xba>
 8007a00:	4b25      	ldr	r3, [pc, #148]	; (8007a98 <__swsetup_r+0xd4>)
 8007a02:	429c      	cmp	r4, r3
 8007a04:	d101      	bne.n	8007a0a <__swsetup_r+0x46>
 8007a06:	68ac      	ldr	r4, [r5, #8]
 8007a08:	e7eb      	b.n	80079e2 <__swsetup_r+0x1e>
 8007a0a:	4b24      	ldr	r3, [pc, #144]	; (8007a9c <__swsetup_r+0xd8>)
 8007a0c:	429c      	cmp	r4, r3
 8007a0e:	bf08      	it	eq
 8007a10:	68ec      	ldreq	r4, [r5, #12]
 8007a12:	e7e6      	b.n	80079e2 <__swsetup_r+0x1e>
 8007a14:	0758      	lsls	r0, r3, #29
 8007a16:	d512      	bpl.n	8007a3e <__swsetup_r+0x7a>
 8007a18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a1a:	b141      	cbz	r1, 8007a2e <__swsetup_r+0x6a>
 8007a1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a20:	4299      	cmp	r1, r3
 8007a22:	d002      	beq.n	8007a2a <__swsetup_r+0x66>
 8007a24:	4630      	mov	r0, r6
 8007a26:	f7ff fb31 	bl	800708c <_free_r>
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	6363      	str	r3, [r4, #52]	; 0x34
 8007a2e:	89a3      	ldrh	r3, [r4, #12]
 8007a30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a34:	81a3      	strh	r3, [r4, #12]
 8007a36:	2300      	movs	r3, #0
 8007a38:	6063      	str	r3, [r4, #4]
 8007a3a:	6923      	ldr	r3, [r4, #16]
 8007a3c:	6023      	str	r3, [r4, #0]
 8007a3e:	89a3      	ldrh	r3, [r4, #12]
 8007a40:	f043 0308 	orr.w	r3, r3, #8
 8007a44:	81a3      	strh	r3, [r4, #12]
 8007a46:	6923      	ldr	r3, [r4, #16]
 8007a48:	b94b      	cbnz	r3, 8007a5e <__swsetup_r+0x9a>
 8007a4a:	89a3      	ldrh	r3, [r4, #12]
 8007a4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a54:	d003      	beq.n	8007a5e <__swsetup_r+0x9a>
 8007a56:	4621      	mov	r1, r4
 8007a58:	4630      	mov	r0, r6
 8007a5a:	f000 fa09 	bl	8007e70 <__smakebuf_r>
 8007a5e:	89a0      	ldrh	r0, [r4, #12]
 8007a60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a64:	f010 0301 	ands.w	r3, r0, #1
 8007a68:	d00a      	beq.n	8007a80 <__swsetup_r+0xbc>
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	60a3      	str	r3, [r4, #8]
 8007a6e:	6963      	ldr	r3, [r4, #20]
 8007a70:	425b      	negs	r3, r3
 8007a72:	61a3      	str	r3, [r4, #24]
 8007a74:	6923      	ldr	r3, [r4, #16]
 8007a76:	b943      	cbnz	r3, 8007a8a <__swsetup_r+0xc6>
 8007a78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a7c:	d1ba      	bne.n	80079f4 <__swsetup_r+0x30>
 8007a7e:	bd70      	pop	{r4, r5, r6, pc}
 8007a80:	0781      	lsls	r1, r0, #30
 8007a82:	bf58      	it	pl
 8007a84:	6963      	ldrpl	r3, [r4, #20]
 8007a86:	60a3      	str	r3, [r4, #8]
 8007a88:	e7f4      	b.n	8007a74 <__swsetup_r+0xb0>
 8007a8a:	2000      	movs	r0, #0
 8007a8c:	e7f7      	b.n	8007a7e <__swsetup_r+0xba>
 8007a8e:	bf00      	nop
 8007a90:	2000000c 	.word	0x2000000c
 8007a94:	080087a4 	.word	0x080087a4
 8007a98:	080087c4 	.word	0x080087c4
 8007a9c:	08008784 	.word	0x08008784

08007aa0 <abort>:
 8007aa0:	b508      	push	{r3, lr}
 8007aa2:	2006      	movs	r0, #6
 8007aa4:	f000 fa54 	bl	8007f50 <raise>
 8007aa8:	2001      	movs	r0, #1
 8007aaa:	f7fa fc5d 	bl	8002368 <_exit>
	...

08007ab0 <__sflush_r>:
 8007ab0:	898a      	ldrh	r2, [r1, #12]
 8007ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ab6:	4605      	mov	r5, r0
 8007ab8:	0710      	lsls	r0, r2, #28
 8007aba:	460c      	mov	r4, r1
 8007abc:	d458      	bmi.n	8007b70 <__sflush_r+0xc0>
 8007abe:	684b      	ldr	r3, [r1, #4]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	dc05      	bgt.n	8007ad0 <__sflush_r+0x20>
 8007ac4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	dc02      	bgt.n	8007ad0 <__sflush_r+0x20>
 8007aca:	2000      	movs	r0, #0
 8007acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ad0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ad2:	2e00      	cmp	r6, #0
 8007ad4:	d0f9      	beq.n	8007aca <__sflush_r+0x1a>
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007adc:	682f      	ldr	r7, [r5, #0]
 8007ade:	602b      	str	r3, [r5, #0]
 8007ae0:	d032      	beq.n	8007b48 <__sflush_r+0x98>
 8007ae2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ae4:	89a3      	ldrh	r3, [r4, #12]
 8007ae6:	075a      	lsls	r2, r3, #29
 8007ae8:	d505      	bpl.n	8007af6 <__sflush_r+0x46>
 8007aea:	6863      	ldr	r3, [r4, #4]
 8007aec:	1ac0      	subs	r0, r0, r3
 8007aee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007af0:	b10b      	cbz	r3, 8007af6 <__sflush_r+0x46>
 8007af2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007af4:	1ac0      	subs	r0, r0, r3
 8007af6:	2300      	movs	r3, #0
 8007af8:	4602      	mov	r2, r0
 8007afa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007afc:	6a21      	ldr	r1, [r4, #32]
 8007afe:	4628      	mov	r0, r5
 8007b00:	47b0      	blx	r6
 8007b02:	1c43      	adds	r3, r0, #1
 8007b04:	89a3      	ldrh	r3, [r4, #12]
 8007b06:	d106      	bne.n	8007b16 <__sflush_r+0x66>
 8007b08:	6829      	ldr	r1, [r5, #0]
 8007b0a:	291d      	cmp	r1, #29
 8007b0c:	d82c      	bhi.n	8007b68 <__sflush_r+0xb8>
 8007b0e:	4a2a      	ldr	r2, [pc, #168]	; (8007bb8 <__sflush_r+0x108>)
 8007b10:	40ca      	lsrs	r2, r1
 8007b12:	07d6      	lsls	r6, r2, #31
 8007b14:	d528      	bpl.n	8007b68 <__sflush_r+0xb8>
 8007b16:	2200      	movs	r2, #0
 8007b18:	6062      	str	r2, [r4, #4]
 8007b1a:	04d9      	lsls	r1, r3, #19
 8007b1c:	6922      	ldr	r2, [r4, #16]
 8007b1e:	6022      	str	r2, [r4, #0]
 8007b20:	d504      	bpl.n	8007b2c <__sflush_r+0x7c>
 8007b22:	1c42      	adds	r2, r0, #1
 8007b24:	d101      	bne.n	8007b2a <__sflush_r+0x7a>
 8007b26:	682b      	ldr	r3, [r5, #0]
 8007b28:	b903      	cbnz	r3, 8007b2c <__sflush_r+0x7c>
 8007b2a:	6560      	str	r0, [r4, #84]	; 0x54
 8007b2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b2e:	602f      	str	r7, [r5, #0]
 8007b30:	2900      	cmp	r1, #0
 8007b32:	d0ca      	beq.n	8007aca <__sflush_r+0x1a>
 8007b34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b38:	4299      	cmp	r1, r3
 8007b3a:	d002      	beq.n	8007b42 <__sflush_r+0x92>
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	f7ff faa5 	bl	800708c <_free_r>
 8007b42:	2000      	movs	r0, #0
 8007b44:	6360      	str	r0, [r4, #52]	; 0x34
 8007b46:	e7c1      	b.n	8007acc <__sflush_r+0x1c>
 8007b48:	6a21      	ldr	r1, [r4, #32]
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	4628      	mov	r0, r5
 8007b4e:	47b0      	blx	r6
 8007b50:	1c41      	adds	r1, r0, #1
 8007b52:	d1c7      	bne.n	8007ae4 <__sflush_r+0x34>
 8007b54:	682b      	ldr	r3, [r5, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d0c4      	beq.n	8007ae4 <__sflush_r+0x34>
 8007b5a:	2b1d      	cmp	r3, #29
 8007b5c:	d001      	beq.n	8007b62 <__sflush_r+0xb2>
 8007b5e:	2b16      	cmp	r3, #22
 8007b60:	d101      	bne.n	8007b66 <__sflush_r+0xb6>
 8007b62:	602f      	str	r7, [r5, #0]
 8007b64:	e7b1      	b.n	8007aca <__sflush_r+0x1a>
 8007b66:	89a3      	ldrh	r3, [r4, #12]
 8007b68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b6c:	81a3      	strh	r3, [r4, #12]
 8007b6e:	e7ad      	b.n	8007acc <__sflush_r+0x1c>
 8007b70:	690f      	ldr	r7, [r1, #16]
 8007b72:	2f00      	cmp	r7, #0
 8007b74:	d0a9      	beq.n	8007aca <__sflush_r+0x1a>
 8007b76:	0793      	lsls	r3, r2, #30
 8007b78:	680e      	ldr	r6, [r1, #0]
 8007b7a:	bf08      	it	eq
 8007b7c:	694b      	ldreq	r3, [r1, #20]
 8007b7e:	600f      	str	r7, [r1, #0]
 8007b80:	bf18      	it	ne
 8007b82:	2300      	movne	r3, #0
 8007b84:	eba6 0807 	sub.w	r8, r6, r7
 8007b88:	608b      	str	r3, [r1, #8]
 8007b8a:	f1b8 0f00 	cmp.w	r8, #0
 8007b8e:	dd9c      	ble.n	8007aca <__sflush_r+0x1a>
 8007b90:	6a21      	ldr	r1, [r4, #32]
 8007b92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b94:	4643      	mov	r3, r8
 8007b96:	463a      	mov	r2, r7
 8007b98:	4628      	mov	r0, r5
 8007b9a:	47b0      	blx	r6
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	dc06      	bgt.n	8007bae <__sflush_r+0xfe>
 8007ba0:	89a3      	ldrh	r3, [r4, #12]
 8007ba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ba6:	81a3      	strh	r3, [r4, #12]
 8007ba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007bac:	e78e      	b.n	8007acc <__sflush_r+0x1c>
 8007bae:	4407      	add	r7, r0
 8007bb0:	eba8 0800 	sub.w	r8, r8, r0
 8007bb4:	e7e9      	b.n	8007b8a <__sflush_r+0xda>
 8007bb6:	bf00      	nop
 8007bb8:	20400001 	.word	0x20400001

08007bbc <_fflush_r>:
 8007bbc:	b538      	push	{r3, r4, r5, lr}
 8007bbe:	690b      	ldr	r3, [r1, #16]
 8007bc0:	4605      	mov	r5, r0
 8007bc2:	460c      	mov	r4, r1
 8007bc4:	b913      	cbnz	r3, 8007bcc <_fflush_r+0x10>
 8007bc6:	2500      	movs	r5, #0
 8007bc8:	4628      	mov	r0, r5
 8007bca:	bd38      	pop	{r3, r4, r5, pc}
 8007bcc:	b118      	cbz	r0, 8007bd6 <_fflush_r+0x1a>
 8007bce:	6983      	ldr	r3, [r0, #24]
 8007bd0:	b90b      	cbnz	r3, 8007bd6 <_fflush_r+0x1a>
 8007bd2:	f000 f887 	bl	8007ce4 <__sinit>
 8007bd6:	4b14      	ldr	r3, [pc, #80]	; (8007c28 <_fflush_r+0x6c>)
 8007bd8:	429c      	cmp	r4, r3
 8007bda:	d11b      	bne.n	8007c14 <_fflush_r+0x58>
 8007bdc:	686c      	ldr	r4, [r5, #4]
 8007bde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d0ef      	beq.n	8007bc6 <_fflush_r+0xa>
 8007be6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007be8:	07d0      	lsls	r0, r2, #31
 8007bea:	d404      	bmi.n	8007bf6 <_fflush_r+0x3a>
 8007bec:	0599      	lsls	r1, r3, #22
 8007bee:	d402      	bmi.n	8007bf6 <_fflush_r+0x3a>
 8007bf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bf2:	f000 f915 	bl	8007e20 <__retarget_lock_acquire_recursive>
 8007bf6:	4628      	mov	r0, r5
 8007bf8:	4621      	mov	r1, r4
 8007bfa:	f7ff ff59 	bl	8007ab0 <__sflush_r>
 8007bfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c00:	07da      	lsls	r2, r3, #31
 8007c02:	4605      	mov	r5, r0
 8007c04:	d4e0      	bmi.n	8007bc8 <_fflush_r+0xc>
 8007c06:	89a3      	ldrh	r3, [r4, #12]
 8007c08:	059b      	lsls	r3, r3, #22
 8007c0a:	d4dd      	bmi.n	8007bc8 <_fflush_r+0xc>
 8007c0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c0e:	f000 f908 	bl	8007e22 <__retarget_lock_release_recursive>
 8007c12:	e7d9      	b.n	8007bc8 <_fflush_r+0xc>
 8007c14:	4b05      	ldr	r3, [pc, #20]	; (8007c2c <_fflush_r+0x70>)
 8007c16:	429c      	cmp	r4, r3
 8007c18:	d101      	bne.n	8007c1e <_fflush_r+0x62>
 8007c1a:	68ac      	ldr	r4, [r5, #8]
 8007c1c:	e7df      	b.n	8007bde <_fflush_r+0x22>
 8007c1e:	4b04      	ldr	r3, [pc, #16]	; (8007c30 <_fflush_r+0x74>)
 8007c20:	429c      	cmp	r4, r3
 8007c22:	bf08      	it	eq
 8007c24:	68ec      	ldreq	r4, [r5, #12]
 8007c26:	e7da      	b.n	8007bde <_fflush_r+0x22>
 8007c28:	080087a4 	.word	0x080087a4
 8007c2c:	080087c4 	.word	0x080087c4
 8007c30:	08008784 	.word	0x08008784

08007c34 <std>:
 8007c34:	2300      	movs	r3, #0
 8007c36:	b510      	push	{r4, lr}
 8007c38:	4604      	mov	r4, r0
 8007c3a:	e9c0 3300 	strd	r3, r3, [r0]
 8007c3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c42:	6083      	str	r3, [r0, #8]
 8007c44:	8181      	strh	r1, [r0, #12]
 8007c46:	6643      	str	r3, [r0, #100]	; 0x64
 8007c48:	81c2      	strh	r2, [r0, #14]
 8007c4a:	6183      	str	r3, [r0, #24]
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	2208      	movs	r2, #8
 8007c50:	305c      	adds	r0, #92	; 0x5c
 8007c52:	f7fd fb5b 	bl	800530c <memset>
 8007c56:	4b05      	ldr	r3, [pc, #20]	; (8007c6c <std+0x38>)
 8007c58:	6263      	str	r3, [r4, #36]	; 0x24
 8007c5a:	4b05      	ldr	r3, [pc, #20]	; (8007c70 <std+0x3c>)
 8007c5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c5e:	4b05      	ldr	r3, [pc, #20]	; (8007c74 <std+0x40>)
 8007c60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c62:	4b05      	ldr	r3, [pc, #20]	; (8007c78 <std+0x44>)
 8007c64:	6224      	str	r4, [r4, #32]
 8007c66:	6323      	str	r3, [r4, #48]	; 0x30
 8007c68:	bd10      	pop	{r4, pc}
 8007c6a:	bf00      	nop
 8007c6c:	08007f89 	.word	0x08007f89
 8007c70:	08007fab 	.word	0x08007fab
 8007c74:	08007fe3 	.word	0x08007fe3
 8007c78:	08008007 	.word	0x08008007

08007c7c <_cleanup_r>:
 8007c7c:	4901      	ldr	r1, [pc, #4]	; (8007c84 <_cleanup_r+0x8>)
 8007c7e:	f000 b8af 	b.w	8007de0 <_fwalk_reent>
 8007c82:	bf00      	nop
 8007c84:	08007bbd 	.word	0x08007bbd

08007c88 <__sfmoreglue>:
 8007c88:	b570      	push	{r4, r5, r6, lr}
 8007c8a:	2268      	movs	r2, #104	; 0x68
 8007c8c:	1e4d      	subs	r5, r1, #1
 8007c8e:	4355      	muls	r5, r2
 8007c90:	460e      	mov	r6, r1
 8007c92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007c96:	f7ff fa65 	bl	8007164 <_malloc_r>
 8007c9a:	4604      	mov	r4, r0
 8007c9c:	b140      	cbz	r0, 8007cb0 <__sfmoreglue+0x28>
 8007c9e:	2100      	movs	r1, #0
 8007ca0:	e9c0 1600 	strd	r1, r6, [r0]
 8007ca4:	300c      	adds	r0, #12
 8007ca6:	60a0      	str	r0, [r4, #8]
 8007ca8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007cac:	f7fd fb2e 	bl	800530c <memset>
 8007cb0:	4620      	mov	r0, r4
 8007cb2:	bd70      	pop	{r4, r5, r6, pc}

08007cb4 <__sfp_lock_acquire>:
 8007cb4:	4801      	ldr	r0, [pc, #4]	; (8007cbc <__sfp_lock_acquire+0x8>)
 8007cb6:	f000 b8b3 	b.w	8007e20 <__retarget_lock_acquire_recursive>
 8007cba:	bf00      	nop
 8007cbc:	2000044d 	.word	0x2000044d

08007cc0 <__sfp_lock_release>:
 8007cc0:	4801      	ldr	r0, [pc, #4]	; (8007cc8 <__sfp_lock_release+0x8>)
 8007cc2:	f000 b8ae 	b.w	8007e22 <__retarget_lock_release_recursive>
 8007cc6:	bf00      	nop
 8007cc8:	2000044d 	.word	0x2000044d

08007ccc <__sinit_lock_acquire>:
 8007ccc:	4801      	ldr	r0, [pc, #4]	; (8007cd4 <__sinit_lock_acquire+0x8>)
 8007cce:	f000 b8a7 	b.w	8007e20 <__retarget_lock_acquire_recursive>
 8007cd2:	bf00      	nop
 8007cd4:	2000044e 	.word	0x2000044e

08007cd8 <__sinit_lock_release>:
 8007cd8:	4801      	ldr	r0, [pc, #4]	; (8007ce0 <__sinit_lock_release+0x8>)
 8007cda:	f000 b8a2 	b.w	8007e22 <__retarget_lock_release_recursive>
 8007cde:	bf00      	nop
 8007ce0:	2000044e 	.word	0x2000044e

08007ce4 <__sinit>:
 8007ce4:	b510      	push	{r4, lr}
 8007ce6:	4604      	mov	r4, r0
 8007ce8:	f7ff fff0 	bl	8007ccc <__sinit_lock_acquire>
 8007cec:	69a3      	ldr	r3, [r4, #24]
 8007cee:	b11b      	cbz	r3, 8007cf8 <__sinit+0x14>
 8007cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cf4:	f7ff bff0 	b.w	8007cd8 <__sinit_lock_release>
 8007cf8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007cfc:	6523      	str	r3, [r4, #80]	; 0x50
 8007cfe:	4b13      	ldr	r3, [pc, #76]	; (8007d4c <__sinit+0x68>)
 8007d00:	4a13      	ldr	r2, [pc, #76]	; (8007d50 <__sinit+0x6c>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	62a2      	str	r2, [r4, #40]	; 0x28
 8007d06:	42a3      	cmp	r3, r4
 8007d08:	bf04      	itt	eq
 8007d0a:	2301      	moveq	r3, #1
 8007d0c:	61a3      	streq	r3, [r4, #24]
 8007d0e:	4620      	mov	r0, r4
 8007d10:	f000 f820 	bl	8007d54 <__sfp>
 8007d14:	6060      	str	r0, [r4, #4]
 8007d16:	4620      	mov	r0, r4
 8007d18:	f000 f81c 	bl	8007d54 <__sfp>
 8007d1c:	60a0      	str	r0, [r4, #8]
 8007d1e:	4620      	mov	r0, r4
 8007d20:	f000 f818 	bl	8007d54 <__sfp>
 8007d24:	2200      	movs	r2, #0
 8007d26:	60e0      	str	r0, [r4, #12]
 8007d28:	2104      	movs	r1, #4
 8007d2a:	6860      	ldr	r0, [r4, #4]
 8007d2c:	f7ff ff82 	bl	8007c34 <std>
 8007d30:	68a0      	ldr	r0, [r4, #8]
 8007d32:	2201      	movs	r2, #1
 8007d34:	2109      	movs	r1, #9
 8007d36:	f7ff ff7d 	bl	8007c34 <std>
 8007d3a:	68e0      	ldr	r0, [r4, #12]
 8007d3c:	2202      	movs	r2, #2
 8007d3e:	2112      	movs	r1, #18
 8007d40:	f7ff ff78 	bl	8007c34 <std>
 8007d44:	2301      	movs	r3, #1
 8007d46:	61a3      	str	r3, [r4, #24]
 8007d48:	e7d2      	b.n	8007cf0 <__sinit+0xc>
 8007d4a:	bf00      	nop
 8007d4c:	08008408 	.word	0x08008408
 8007d50:	08007c7d 	.word	0x08007c7d

08007d54 <__sfp>:
 8007d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d56:	4607      	mov	r7, r0
 8007d58:	f7ff ffac 	bl	8007cb4 <__sfp_lock_acquire>
 8007d5c:	4b1e      	ldr	r3, [pc, #120]	; (8007dd8 <__sfp+0x84>)
 8007d5e:	681e      	ldr	r6, [r3, #0]
 8007d60:	69b3      	ldr	r3, [r6, #24]
 8007d62:	b913      	cbnz	r3, 8007d6a <__sfp+0x16>
 8007d64:	4630      	mov	r0, r6
 8007d66:	f7ff ffbd 	bl	8007ce4 <__sinit>
 8007d6a:	3648      	adds	r6, #72	; 0x48
 8007d6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007d70:	3b01      	subs	r3, #1
 8007d72:	d503      	bpl.n	8007d7c <__sfp+0x28>
 8007d74:	6833      	ldr	r3, [r6, #0]
 8007d76:	b30b      	cbz	r3, 8007dbc <__sfp+0x68>
 8007d78:	6836      	ldr	r6, [r6, #0]
 8007d7a:	e7f7      	b.n	8007d6c <__sfp+0x18>
 8007d7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007d80:	b9d5      	cbnz	r5, 8007db8 <__sfp+0x64>
 8007d82:	4b16      	ldr	r3, [pc, #88]	; (8007ddc <__sfp+0x88>)
 8007d84:	60e3      	str	r3, [r4, #12]
 8007d86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007d8a:	6665      	str	r5, [r4, #100]	; 0x64
 8007d8c:	f000 f847 	bl	8007e1e <__retarget_lock_init_recursive>
 8007d90:	f7ff ff96 	bl	8007cc0 <__sfp_lock_release>
 8007d94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007d98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007d9c:	6025      	str	r5, [r4, #0]
 8007d9e:	61a5      	str	r5, [r4, #24]
 8007da0:	2208      	movs	r2, #8
 8007da2:	4629      	mov	r1, r5
 8007da4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007da8:	f7fd fab0 	bl	800530c <memset>
 8007dac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007db0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007db4:	4620      	mov	r0, r4
 8007db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007db8:	3468      	adds	r4, #104	; 0x68
 8007dba:	e7d9      	b.n	8007d70 <__sfp+0x1c>
 8007dbc:	2104      	movs	r1, #4
 8007dbe:	4638      	mov	r0, r7
 8007dc0:	f7ff ff62 	bl	8007c88 <__sfmoreglue>
 8007dc4:	4604      	mov	r4, r0
 8007dc6:	6030      	str	r0, [r6, #0]
 8007dc8:	2800      	cmp	r0, #0
 8007dca:	d1d5      	bne.n	8007d78 <__sfp+0x24>
 8007dcc:	f7ff ff78 	bl	8007cc0 <__sfp_lock_release>
 8007dd0:	230c      	movs	r3, #12
 8007dd2:	603b      	str	r3, [r7, #0]
 8007dd4:	e7ee      	b.n	8007db4 <__sfp+0x60>
 8007dd6:	bf00      	nop
 8007dd8:	08008408 	.word	0x08008408
 8007ddc:	ffff0001 	.word	0xffff0001

08007de0 <_fwalk_reent>:
 8007de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007de4:	4606      	mov	r6, r0
 8007de6:	4688      	mov	r8, r1
 8007de8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007dec:	2700      	movs	r7, #0
 8007dee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007df2:	f1b9 0901 	subs.w	r9, r9, #1
 8007df6:	d505      	bpl.n	8007e04 <_fwalk_reent+0x24>
 8007df8:	6824      	ldr	r4, [r4, #0]
 8007dfa:	2c00      	cmp	r4, #0
 8007dfc:	d1f7      	bne.n	8007dee <_fwalk_reent+0xe>
 8007dfe:	4638      	mov	r0, r7
 8007e00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e04:	89ab      	ldrh	r3, [r5, #12]
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d907      	bls.n	8007e1a <_fwalk_reent+0x3a>
 8007e0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e0e:	3301      	adds	r3, #1
 8007e10:	d003      	beq.n	8007e1a <_fwalk_reent+0x3a>
 8007e12:	4629      	mov	r1, r5
 8007e14:	4630      	mov	r0, r6
 8007e16:	47c0      	blx	r8
 8007e18:	4307      	orrs	r7, r0
 8007e1a:	3568      	adds	r5, #104	; 0x68
 8007e1c:	e7e9      	b.n	8007df2 <_fwalk_reent+0x12>

08007e1e <__retarget_lock_init_recursive>:
 8007e1e:	4770      	bx	lr

08007e20 <__retarget_lock_acquire_recursive>:
 8007e20:	4770      	bx	lr

08007e22 <__retarget_lock_release_recursive>:
 8007e22:	4770      	bx	lr

08007e24 <__swhatbuf_r>:
 8007e24:	b570      	push	{r4, r5, r6, lr}
 8007e26:	460e      	mov	r6, r1
 8007e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e2c:	2900      	cmp	r1, #0
 8007e2e:	b096      	sub	sp, #88	; 0x58
 8007e30:	4614      	mov	r4, r2
 8007e32:	461d      	mov	r5, r3
 8007e34:	da08      	bge.n	8007e48 <__swhatbuf_r+0x24>
 8007e36:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	602a      	str	r2, [r5, #0]
 8007e3e:	061a      	lsls	r2, r3, #24
 8007e40:	d410      	bmi.n	8007e64 <__swhatbuf_r+0x40>
 8007e42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e46:	e00e      	b.n	8007e66 <__swhatbuf_r+0x42>
 8007e48:	466a      	mov	r2, sp
 8007e4a:	f000 f903 	bl	8008054 <_fstat_r>
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	dbf1      	blt.n	8007e36 <__swhatbuf_r+0x12>
 8007e52:	9a01      	ldr	r2, [sp, #4]
 8007e54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007e58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007e5c:	425a      	negs	r2, r3
 8007e5e:	415a      	adcs	r2, r3
 8007e60:	602a      	str	r2, [r5, #0]
 8007e62:	e7ee      	b.n	8007e42 <__swhatbuf_r+0x1e>
 8007e64:	2340      	movs	r3, #64	; 0x40
 8007e66:	2000      	movs	r0, #0
 8007e68:	6023      	str	r3, [r4, #0]
 8007e6a:	b016      	add	sp, #88	; 0x58
 8007e6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007e70 <__smakebuf_r>:
 8007e70:	898b      	ldrh	r3, [r1, #12]
 8007e72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007e74:	079d      	lsls	r5, r3, #30
 8007e76:	4606      	mov	r6, r0
 8007e78:	460c      	mov	r4, r1
 8007e7a:	d507      	bpl.n	8007e8c <__smakebuf_r+0x1c>
 8007e7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007e80:	6023      	str	r3, [r4, #0]
 8007e82:	6123      	str	r3, [r4, #16]
 8007e84:	2301      	movs	r3, #1
 8007e86:	6163      	str	r3, [r4, #20]
 8007e88:	b002      	add	sp, #8
 8007e8a:	bd70      	pop	{r4, r5, r6, pc}
 8007e8c:	ab01      	add	r3, sp, #4
 8007e8e:	466a      	mov	r2, sp
 8007e90:	f7ff ffc8 	bl	8007e24 <__swhatbuf_r>
 8007e94:	9900      	ldr	r1, [sp, #0]
 8007e96:	4605      	mov	r5, r0
 8007e98:	4630      	mov	r0, r6
 8007e9a:	f7ff f963 	bl	8007164 <_malloc_r>
 8007e9e:	b948      	cbnz	r0, 8007eb4 <__smakebuf_r+0x44>
 8007ea0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ea4:	059a      	lsls	r2, r3, #22
 8007ea6:	d4ef      	bmi.n	8007e88 <__smakebuf_r+0x18>
 8007ea8:	f023 0303 	bic.w	r3, r3, #3
 8007eac:	f043 0302 	orr.w	r3, r3, #2
 8007eb0:	81a3      	strh	r3, [r4, #12]
 8007eb2:	e7e3      	b.n	8007e7c <__smakebuf_r+0xc>
 8007eb4:	4b0d      	ldr	r3, [pc, #52]	; (8007eec <__smakebuf_r+0x7c>)
 8007eb6:	62b3      	str	r3, [r6, #40]	; 0x28
 8007eb8:	89a3      	ldrh	r3, [r4, #12]
 8007eba:	6020      	str	r0, [r4, #0]
 8007ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ec0:	81a3      	strh	r3, [r4, #12]
 8007ec2:	9b00      	ldr	r3, [sp, #0]
 8007ec4:	6163      	str	r3, [r4, #20]
 8007ec6:	9b01      	ldr	r3, [sp, #4]
 8007ec8:	6120      	str	r0, [r4, #16]
 8007eca:	b15b      	cbz	r3, 8007ee4 <__smakebuf_r+0x74>
 8007ecc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ed0:	4630      	mov	r0, r6
 8007ed2:	f000 f8d1 	bl	8008078 <_isatty_r>
 8007ed6:	b128      	cbz	r0, 8007ee4 <__smakebuf_r+0x74>
 8007ed8:	89a3      	ldrh	r3, [r4, #12]
 8007eda:	f023 0303 	bic.w	r3, r3, #3
 8007ede:	f043 0301 	orr.w	r3, r3, #1
 8007ee2:	81a3      	strh	r3, [r4, #12]
 8007ee4:	89a0      	ldrh	r0, [r4, #12]
 8007ee6:	4305      	orrs	r5, r0
 8007ee8:	81a5      	strh	r5, [r4, #12]
 8007eea:	e7cd      	b.n	8007e88 <__smakebuf_r+0x18>
 8007eec:	08007c7d 	.word	0x08007c7d

08007ef0 <_malloc_usable_size_r>:
 8007ef0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ef4:	1f18      	subs	r0, r3, #4
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	bfbc      	itt	lt
 8007efa:	580b      	ldrlt	r3, [r1, r0]
 8007efc:	18c0      	addlt	r0, r0, r3
 8007efe:	4770      	bx	lr

08007f00 <_raise_r>:
 8007f00:	291f      	cmp	r1, #31
 8007f02:	b538      	push	{r3, r4, r5, lr}
 8007f04:	4604      	mov	r4, r0
 8007f06:	460d      	mov	r5, r1
 8007f08:	d904      	bls.n	8007f14 <_raise_r+0x14>
 8007f0a:	2316      	movs	r3, #22
 8007f0c:	6003      	str	r3, [r0, #0]
 8007f0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f12:	bd38      	pop	{r3, r4, r5, pc}
 8007f14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007f16:	b112      	cbz	r2, 8007f1e <_raise_r+0x1e>
 8007f18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f1c:	b94b      	cbnz	r3, 8007f32 <_raise_r+0x32>
 8007f1e:	4620      	mov	r0, r4
 8007f20:	f000 f830 	bl	8007f84 <_getpid_r>
 8007f24:	462a      	mov	r2, r5
 8007f26:	4601      	mov	r1, r0
 8007f28:	4620      	mov	r0, r4
 8007f2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f2e:	f000 b817 	b.w	8007f60 <_kill_r>
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d00a      	beq.n	8007f4c <_raise_r+0x4c>
 8007f36:	1c59      	adds	r1, r3, #1
 8007f38:	d103      	bne.n	8007f42 <_raise_r+0x42>
 8007f3a:	2316      	movs	r3, #22
 8007f3c:	6003      	str	r3, [r0, #0]
 8007f3e:	2001      	movs	r0, #1
 8007f40:	e7e7      	b.n	8007f12 <_raise_r+0x12>
 8007f42:	2400      	movs	r4, #0
 8007f44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007f48:	4628      	mov	r0, r5
 8007f4a:	4798      	blx	r3
 8007f4c:	2000      	movs	r0, #0
 8007f4e:	e7e0      	b.n	8007f12 <_raise_r+0x12>

08007f50 <raise>:
 8007f50:	4b02      	ldr	r3, [pc, #8]	; (8007f5c <raise+0xc>)
 8007f52:	4601      	mov	r1, r0
 8007f54:	6818      	ldr	r0, [r3, #0]
 8007f56:	f7ff bfd3 	b.w	8007f00 <_raise_r>
 8007f5a:	bf00      	nop
 8007f5c:	2000000c 	.word	0x2000000c

08007f60 <_kill_r>:
 8007f60:	b538      	push	{r3, r4, r5, lr}
 8007f62:	4d07      	ldr	r5, [pc, #28]	; (8007f80 <_kill_r+0x20>)
 8007f64:	2300      	movs	r3, #0
 8007f66:	4604      	mov	r4, r0
 8007f68:	4608      	mov	r0, r1
 8007f6a:	4611      	mov	r1, r2
 8007f6c:	602b      	str	r3, [r5, #0]
 8007f6e:	f7fa f9eb 	bl	8002348 <_kill>
 8007f72:	1c43      	adds	r3, r0, #1
 8007f74:	d102      	bne.n	8007f7c <_kill_r+0x1c>
 8007f76:	682b      	ldr	r3, [r5, #0]
 8007f78:	b103      	cbz	r3, 8007f7c <_kill_r+0x1c>
 8007f7a:	6023      	str	r3, [r4, #0]
 8007f7c:	bd38      	pop	{r3, r4, r5, pc}
 8007f7e:	bf00      	nop
 8007f80:	20000448 	.word	0x20000448

08007f84 <_getpid_r>:
 8007f84:	f7fa b9d8 	b.w	8002338 <_getpid>

08007f88 <__sread>:
 8007f88:	b510      	push	{r4, lr}
 8007f8a:	460c      	mov	r4, r1
 8007f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f90:	f000 f894 	bl	80080bc <_read_r>
 8007f94:	2800      	cmp	r0, #0
 8007f96:	bfab      	itete	ge
 8007f98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007f9a:	89a3      	ldrhlt	r3, [r4, #12]
 8007f9c:	181b      	addge	r3, r3, r0
 8007f9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007fa2:	bfac      	ite	ge
 8007fa4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007fa6:	81a3      	strhlt	r3, [r4, #12]
 8007fa8:	bd10      	pop	{r4, pc}

08007faa <__swrite>:
 8007faa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fae:	461f      	mov	r7, r3
 8007fb0:	898b      	ldrh	r3, [r1, #12]
 8007fb2:	05db      	lsls	r3, r3, #23
 8007fb4:	4605      	mov	r5, r0
 8007fb6:	460c      	mov	r4, r1
 8007fb8:	4616      	mov	r6, r2
 8007fba:	d505      	bpl.n	8007fc8 <__swrite+0x1e>
 8007fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fc0:	2302      	movs	r3, #2
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f000 f868 	bl	8008098 <_lseek_r>
 8007fc8:	89a3      	ldrh	r3, [r4, #12]
 8007fca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fd2:	81a3      	strh	r3, [r4, #12]
 8007fd4:	4632      	mov	r2, r6
 8007fd6:	463b      	mov	r3, r7
 8007fd8:	4628      	mov	r0, r5
 8007fda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fde:	f000 b817 	b.w	8008010 <_write_r>

08007fe2 <__sseek>:
 8007fe2:	b510      	push	{r4, lr}
 8007fe4:	460c      	mov	r4, r1
 8007fe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fea:	f000 f855 	bl	8008098 <_lseek_r>
 8007fee:	1c43      	adds	r3, r0, #1
 8007ff0:	89a3      	ldrh	r3, [r4, #12]
 8007ff2:	bf15      	itete	ne
 8007ff4:	6560      	strne	r0, [r4, #84]	; 0x54
 8007ff6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007ffa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007ffe:	81a3      	strheq	r3, [r4, #12]
 8008000:	bf18      	it	ne
 8008002:	81a3      	strhne	r3, [r4, #12]
 8008004:	bd10      	pop	{r4, pc}

08008006 <__sclose>:
 8008006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800800a:	f000 b813 	b.w	8008034 <_close_r>
	...

08008010 <_write_r>:
 8008010:	b538      	push	{r3, r4, r5, lr}
 8008012:	4d07      	ldr	r5, [pc, #28]	; (8008030 <_write_r+0x20>)
 8008014:	4604      	mov	r4, r0
 8008016:	4608      	mov	r0, r1
 8008018:	4611      	mov	r1, r2
 800801a:	2200      	movs	r2, #0
 800801c:	602a      	str	r2, [r5, #0]
 800801e:	461a      	mov	r2, r3
 8008020:	f7fa f9c9 	bl	80023b6 <_write>
 8008024:	1c43      	adds	r3, r0, #1
 8008026:	d102      	bne.n	800802e <_write_r+0x1e>
 8008028:	682b      	ldr	r3, [r5, #0]
 800802a:	b103      	cbz	r3, 800802e <_write_r+0x1e>
 800802c:	6023      	str	r3, [r4, #0]
 800802e:	bd38      	pop	{r3, r4, r5, pc}
 8008030:	20000448 	.word	0x20000448

08008034 <_close_r>:
 8008034:	b538      	push	{r3, r4, r5, lr}
 8008036:	4d06      	ldr	r5, [pc, #24]	; (8008050 <_close_r+0x1c>)
 8008038:	2300      	movs	r3, #0
 800803a:	4604      	mov	r4, r0
 800803c:	4608      	mov	r0, r1
 800803e:	602b      	str	r3, [r5, #0]
 8008040:	f7fa f9d5 	bl	80023ee <_close>
 8008044:	1c43      	adds	r3, r0, #1
 8008046:	d102      	bne.n	800804e <_close_r+0x1a>
 8008048:	682b      	ldr	r3, [r5, #0]
 800804a:	b103      	cbz	r3, 800804e <_close_r+0x1a>
 800804c:	6023      	str	r3, [r4, #0]
 800804e:	bd38      	pop	{r3, r4, r5, pc}
 8008050:	20000448 	.word	0x20000448

08008054 <_fstat_r>:
 8008054:	b538      	push	{r3, r4, r5, lr}
 8008056:	4d07      	ldr	r5, [pc, #28]	; (8008074 <_fstat_r+0x20>)
 8008058:	2300      	movs	r3, #0
 800805a:	4604      	mov	r4, r0
 800805c:	4608      	mov	r0, r1
 800805e:	4611      	mov	r1, r2
 8008060:	602b      	str	r3, [r5, #0]
 8008062:	f7fa f9d0 	bl	8002406 <_fstat>
 8008066:	1c43      	adds	r3, r0, #1
 8008068:	d102      	bne.n	8008070 <_fstat_r+0x1c>
 800806a:	682b      	ldr	r3, [r5, #0]
 800806c:	b103      	cbz	r3, 8008070 <_fstat_r+0x1c>
 800806e:	6023      	str	r3, [r4, #0]
 8008070:	bd38      	pop	{r3, r4, r5, pc}
 8008072:	bf00      	nop
 8008074:	20000448 	.word	0x20000448

08008078 <_isatty_r>:
 8008078:	b538      	push	{r3, r4, r5, lr}
 800807a:	4d06      	ldr	r5, [pc, #24]	; (8008094 <_isatty_r+0x1c>)
 800807c:	2300      	movs	r3, #0
 800807e:	4604      	mov	r4, r0
 8008080:	4608      	mov	r0, r1
 8008082:	602b      	str	r3, [r5, #0]
 8008084:	f7fa f9cf 	bl	8002426 <_isatty>
 8008088:	1c43      	adds	r3, r0, #1
 800808a:	d102      	bne.n	8008092 <_isatty_r+0x1a>
 800808c:	682b      	ldr	r3, [r5, #0]
 800808e:	b103      	cbz	r3, 8008092 <_isatty_r+0x1a>
 8008090:	6023      	str	r3, [r4, #0]
 8008092:	bd38      	pop	{r3, r4, r5, pc}
 8008094:	20000448 	.word	0x20000448

08008098 <_lseek_r>:
 8008098:	b538      	push	{r3, r4, r5, lr}
 800809a:	4d07      	ldr	r5, [pc, #28]	; (80080b8 <_lseek_r+0x20>)
 800809c:	4604      	mov	r4, r0
 800809e:	4608      	mov	r0, r1
 80080a0:	4611      	mov	r1, r2
 80080a2:	2200      	movs	r2, #0
 80080a4:	602a      	str	r2, [r5, #0]
 80080a6:	461a      	mov	r2, r3
 80080a8:	f7fa f9c8 	bl	800243c <_lseek>
 80080ac:	1c43      	adds	r3, r0, #1
 80080ae:	d102      	bne.n	80080b6 <_lseek_r+0x1e>
 80080b0:	682b      	ldr	r3, [r5, #0]
 80080b2:	b103      	cbz	r3, 80080b6 <_lseek_r+0x1e>
 80080b4:	6023      	str	r3, [r4, #0]
 80080b6:	bd38      	pop	{r3, r4, r5, pc}
 80080b8:	20000448 	.word	0x20000448

080080bc <_read_r>:
 80080bc:	b538      	push	{r3, r4, r5, lr}
 80080be:	4d07      	ldr	r5, [pc, #28]	; (80080dc <_read_r+0x20>)
 80080c0:	4604      	mov	r4, r0
 80080c2:	4608      	mov	r0, r1
 80080c4:	4611      	mov	r1, r2
 80080c6:	2200      	movs	r2, #0
 80080c8:	602a      	str	r2, [r5, #0]
 80080ca:	461a      	mov	r2, r3
 80080cc:	f7fa f956 	bl	800237c <_read>
 80080d0:	1c43      	adds	r3, r0, #1
 80080d2:	d102      	bne.n	80080da <_read_r+0x1e>
 80080d4:	682b      	ldr	r3, [r5, #0]
 80080d6:	b103      	cbz	r3, 80080da <_read_r+0x1e>
 80080d8:	6023      	str	r3, [r4, #0]
 80080da:	bd38      	pop	{r3, r4, r5, pc}
 80080dc:	20000448 	.word	0x20000448

080080e0 <_init>:
 80080e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080e2:	bf00      	nop
 80080e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080e6:	bc08      	pop	{r3}
 80080e8:	469e      	mov	lr, r3
 80080ea:	4770      	bx	lr

080080ec <_fini>:
 80080ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ee:	bf00      	nop
 80080f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080f2:	bc08      	pop	{r3}
 80080f4:	469e      	mov	lr, r3
 80080f6:	4770      	bx	lr
